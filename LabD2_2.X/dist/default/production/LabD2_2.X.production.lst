

Microchip MPLAB XC8 Assembler V2.40 build 20220703182018 
                                                                                               Wed Jul 26 00:35:16 2023

Microchip MPLAB XC8 C Compiler v2.40 (Free license) build 20220703182018 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     8                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,noexec
     9                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
    10                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	intentry,global,class=CODE,delta=2
    31                           	psect	text17,local,class=CODE,merge=1,delta=2
    32                           	psect	text18,local,class=CODE,merge=1,delta=2
    33                           	psect	text19,local,class=CODE,merge=1,delta=2
    34                           	psect	text20,local,class=CODE,merge=1,delta=2
    35                           	psect	text21,local,class=CODE,merge=1,delta=2
    36                           	psect	text22,local,class=CODE,merge=1,delta=2,group=2
    37                           	psect	text23,local,class=CODE,merge=1,delta=2,group=2
    38                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=2,noexec
    39                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    40                           	dabs	1,0x7E,2
    41     0000                     
    42                           ; Version 2.40
    43                           ; Generated 17/11/2021 GMT
    44                           ; 
    45                           ; Copyright Â© 2021, Microchip Technology Inc. and its subsidiaries ("Microchip")
    46                           ; All rights reserved.
    47                           ; 
    48                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    49                           ; 
    50                           ; Redistribution and use in source and binary forms, with or without modification, are
    51                           ; permitted provided that the following conditions are met:
    52                           ; 
    53                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    54                           ;        conditions and the following disclaimer.
    55                           ; 
    56                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    57                           ;        of conditions and the following disclaimer in the documentation and/or other
    58                           ;        materials provided with the distribution. Publication is not required when
    59                           ;        this file is used in an embedded application.
    60                           ; 
    61                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    62                           ;        software without specific prior written permission.
    63                           ; 
    64                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    65                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    66                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    67                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    68                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    69                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    70                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    71                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    72                           ; 
    73                           ; 
    74                           ; Code-generator required, PIC16F887 Definitions
    75                           ; 
    76                           ; SFR Addresses
    77     0000                     	;# 
    78     0001                     	;# 
    79     0002                     	;# 
    80     0003                     	;# 
    81     0004                     	;# 
    82     0005                     	;# 
    83     0006                     	;# 
    84     0007                     	;# 
    85     0008                     	;# 
    86     0009                     	;# 
    87     000A                     	;# 
    88     000B                     	;# 
    89     000C                     	;# 
    90     000D                     	;# 
    91     000E                     	;# 
    92     000E                     	;# 
    93     000F                     	;# 
    94     0010                     	;# 
    95     0011                     	;# 
    96     0012                     	;# 
    97     0013                     	;# 
    98     0014                     	;# 
    99     0015                     	;# 
   100     0015                     	;# 
   101     0016                     	;# 
   102     0017                     	;# 
   103     0018                     	;# 
   104     0019                     	;# 
   105     001A                     	;# 
   106     001B                     	;# 
   107     001B                     	;# 
   108     001C                     	;# 
   109     001D                     	;# 
   110     001E                     	;# 
   111     001F                     	;# 
   112     0081                     	;# 
   113     0085                     	;# 
   114     0086                     	;# 
   115     0087                     	;# 
   116     0088                     	;# 
   117     0089                     	;# 
   118     008C                     	;# 
   119     008D                     	;# 
   120     008E                     	;# 
   121     008F                     	;# 
   122     0090                     	;# 
   123     0091                     	;# 
   124     0092                     	;# 
   125     0093                     	;# 
   126     0093                     	;# 
   127     0093                     	;# 
   128     0094                     	;# 
   129     0095                     	;# 
   130     0096                     	;# 
   131     0097                     	;# 
   132     0098                     	;# 
   133     0099                     	;# 
   134     009A                     	;# 
   135     009B                     	;# 
   136     009C                     	;# 
   137     009D                     	;# 
   138     009E                     	;# 
   139     009F                     	;# 
   140     0105                     	;# 
   141     0107                     	;# 
   142     0108                     	;# 
   143     0109                     	;# 
   144     010C                     	;# 
   145     010C                     	;# 
   146     010D                     	;# 
   147     010E                     	;# 
   148     010F                     	;# 
   149     0185                     	;# 
   150     0187                     	;# 
   151     0188                     	;# 
   152     0189                     	;# 
   153     018C                     	;# 
   154     018D                     	;# 
   155     0000                     	;# 
   156     0001                     	;# 
   157     0002                     	;# 
   158     0003                     	;# 
   159     0004                     	;# 
   160     0005                     	;# 
   161     0006                     	;# 
   162     0007                     	;# 
   163     0008                     	;# 
   164     0009                     	;# 
   165     000A                     	;# 
   166     000B                     	;# 
   167     000C                     	;# 
   168     000D                     	;# 
   169     000E                     	;# 
   170     000E                     	;# 
   171     000F                     	;# 
   172     0010                     	;# 
   173     0011                     	;# 
   174     0012                     	;# 
   175     0013                     	;# 
   176     0014                     	;# 
   177     0015                     	;# 
   178     0015                     	;# 
   179     0016                     	;# 
   180     0017                     	;# 
   181     0018                     	;# 
   182     0019                     	;# 
   183     001A                     	;# 
   184     001B                     	;# 
   185     001B                     	;# 
   186     001C                     	;# 
   187     001D                     	;# 
   188     001E                     	;# 
   189     001F                     	;# 
   190     0081                     	;# 
   191     0085                     	;# 
   192     0086                     	;# 
   193     0087                     	;# 
   194     0088                     	;# 
   195     0089                     	;# 
   196     008C                     	;# 
   197     008D                     	;# 
   198     008E                     	;# 
   199     008F                     	;# 
   200     0090                     	;# 
   201     0091                     	;# 
   202     0092                     	;# 
   203     0093                     	;# 
   204     0093                     	;# 
   205     0093                     	;# 
   206     0094                     	;# 
   207     0095                     	;# 
   208     0096                     	;# 
   209     0097                     	;# 
   210     0098                     	;# 
   211     0099                     	;# 
   212     009A                     	;# 
   213     009B                     	;# 
   214     009C                     	;# 
   215     009D                     	;# 
   216     009E                     	;# 
   217     009F                     	;# 
   218     0105                     	;# 
   219     0107                     	;# 
   220     0108                     	;# 
   221     0109                     	;# 
   222     010C                     	;# 
   223     010C                     	;# 
   224     010D                     	;# 
   225     010E                     	;# 
   226     010F                     	;# 
   227     0185                     	;# 
   228     0187                     	;# 
   229     0188                     	;# 
   230     0189                     	;# 
   231     018C                     	;# 
   232     018D                     	;# 
   233     0000                     	;# 
   234     0001                     	;# 
   235     0002                     	;# 
   236     0003                     	;# 
   237     0004                     	;# 
   238     0005                     	;# 
   239     0006                     	;# 
   240     0007                     	;# 
   241     0008                     	;# 
   242     0009                     	;# 
   243     000A                     	;# 
   244     000B                     	;# 
   245     000C                     	;# 
   246     000D                     	;# 
   247     000E                     	;# 
   248     000E                     	;# 
   249     000F                     	;# 
   250     0010                     	;# 
   251     0011                     	;# 
   252     0012                     	;# 
   253     0013                     	;# 
   254     0014                     	;# 
   255     0015                     	;# 
   256     0015                     	;# 
   257     0016                     	;# 
   258     0017                     	;# 
   259     0018                     	;# 
   260     0019                     	;# 
   261     001A                     	;# 
   262     001B                     	;# 
   263     001B                     	;# 
   264     001C                     	;# 
   265     001D                     	;# 
   266     001E                     	;# 
   267     001F                     	;# 
   268     0081                     	;# 
   269     0085                     	;# 
   270     0086                     	;# 
   271     0087                     	;# 
   272     0088                     	;# 
   273     0089                     	;# 
   274     008C                     	;# 
   275     008D                     	;# 
   276     008E                     	;# 
   277     008F                     	;# 
   278     0090                     	;# 
   279     0091                     	;# 
   280     0092                     	;# 
   281     0093                     	;# 
   282     0093                     	;# 
   283     0093                     	;# 
   284     0094                     	;# 
   285     0095                     	;# 
   286     0096                     	;# 
   287     0097                     	;# 
   288     0098                     	;# 
   289     0099                     	;# 
   290     009A                     	;# 
   291     009B                     	;# 
   292     009C                     	;# 
   293     009D                     	;# 
   294     009E                     	;# 
   295     009F                     	;# 
   296     0105                     	;# 
   297     0107                     	;# 
   298     0108                     	;# 
   299     0109                     	;# 
   300     010C                     	;# 
   301     010C                     	;# 
   302     010D                     	;# 
   303     010E                     	;# 
   304     010F                     	;# 
   305     0185                     	;# 
   306     0187                     	;# 
   307     0188                     	;# 
   308     0189                     	;# 
   309     018C                     	;# 
   310     018D                     	;# 
   311     0000                     	;# 
   312     0001                     	;# 
   313     0002                     	;# 
   314     0003                     	;# 
   315     0004                     	;# 
   316     0005                     	;# 
   317     0006                     	;# 
   318     0007                     	;# 
   319     0008                     	;# 
   320     0009                     	;# 
   321     000A                     	;# 
   322     000B                     	;# 
   323     000C                     	;# 
   324     000D                     	;# 
   325     000E                     	;# 
   326     000E                     	;# 
   327     000F                     	;# 
   328     0010                     	;# 
   329     0011                     	;# 
   330     0012                     	;# 
   331     0013                     	;# 
   332     0014                     	;# 
   333     0015                     	;# 
   334     0015                     	;# 
   335     0016                     	;# 
   336     0017                     	;# 
   337     0018                     	;# 
   338     0019                     	;# 
   339     001A                     	;# 
   340     001B                     	;# 
   341     001B                     	;# 
   342     001C                     	;# 
   343     001D                     	;# 
   344     001E                     	;# 
   345     001F                     	;# 
   346     0081                     	;# 
   347     0085                     	;# 
   348     0086                     	;# 
   349     0087                     	;# 
   350     0088                     	;# 
   351     0089                     	;# 
   352     008C                     	;# 
   353     008D                     	;# 
   354     008E                     	;# 
   355     008F                     	;# 
   356     0090                     	;# 
   357     0091                     	;# 
   358     0092                     	;# 
   359     0093                     	;# 
   360     0093                     	;# 
   361     0093                     	;# 
   362     0094                     	;# 
   363     0095                     	;# 
   364     0096                     	;# 
   365     0097                     	;# 
   366     0098                     	;# 
   367     0099                     	;# 
   368     009A                     	;# 
   369     009B                     	;# 
   370     009C                     	;# 
   371     009D                     	;# 
   372     009E                     	;# 
   373     009F                     	;# 
   374     0105                     	;# 
   375     0107                     	;# 
   376     0108                     	;# 
   377     0109                     	;# 
   378     010C                     	;# 
   379     010C                     	;# 
   380     010D                     	;# 
   381     010E                     	;# 
   382     010F                     	;# 
   383     0185                     	;# 
   384     0187                     	;# 
   385     0188                     	;# 
   386     0189                     	;# 
   387     018C                     	;# 
   388     018D                     	;# 
   389     0000                     	;# 
   390     0001                     	;# 
   391     0002                     	;# 
   392     0003                     	;# 
   393     0004                     	;# 
   394     0005                     	;# 
   395     0006                     	;# 
   396     0007                     	;# 
   397     0008                     	;# 
   398     0009                     	;# 
   399     000A                     	;# 
   400     000B                     	;# 
   401     000C                     	;# 
   402     000D                     	;# 
   403     000E                     	;# 
   404     000E                     	;# 
   405     000F                     	;# 
   406     0010                     	;# 
   407     0011                     	;# 
   408     0012                     	;# 
   409     0013                     	;# 
   410     0014                     	;# 
   411     0015                     	;# 
   412     0015                     	;# 
   413     0016                     	;# 
   414     0017                     	;# 
   415     0018                     	;# 
   416     0019                     	;# 
   417     001A                     	;# 
   418     001B                     	;# 
   419     001B                     	;# 
   420     001C                     	;# 
   421     001D                     	;# 
   422     001E                     	;# 
   423     001F                     	;# 
   424     0081                     	;# 
   425     0085                     	;# 
   426     0086                     	;# 
   427     0087                     	;# 
   428     0088                     	;# 
   429     0089                     	;# 
   430     008C                     	;# 
   431     008D                     	;# 
   432     008E                     	;# 
   433     008F                     	;# 
   434     0090                     	;# 
   435     0091                     	;# 
   436     0092                     	;# 
   437     0093                     	;# 
   438     0093                     	;# 
   439     0093                     	;# 
   440     0094                     	;# 
   441     0095                     	;# 
   442     0096                     	;# 
   443     0097                     	;# 
   444     0098                     	;# 
   445     0099                     	;# 
   446     009A                     	;# 
   447     009B                     	;# 
   448     009C                     	;# 
   449     009D                     	;# 
   450     009E                     	;# 
   451     009F                     	;# 
   452     0105                     	;# 
   453     0107                     	;# 
   454     0108                     	;# 
   455     0109                     	;# 
   456     010C                     	;# 
   457     010C                     	;# 
   458     010D                     	;# 
   459     010E                     	;# 
   460     010F                     	;# 
   461     0185                     	;# 
   462     0187                     	;# 
   463     0188                     	;# 
   464     0189                     	;# 
   465     018C                     	;# 
   466     018D                     	;# 
   467                           
   468                           	psect	idataBANK0
   469     07FC                     __pidataBANK0:
   470                           
   471                           ;initializer for _indicador
   472     07FC  3430               	retlw	48
   473                           
   474                           	psect	strings
   475     0600                     __pstrings:
   476     0600                     stringtab:
   477     0600                     __stringtab:
   478                           
   479                           ;	String table - string pointers are 1 byte each
   480     0600  1BFF               	btfsc	btemp+1,7
   481     0601  2E0A               	ljmp	stringcode
   482     0602  1383               	bcf	3,7
   483     0603  187F               	btfsc	btemp+1,0
   484     0604  1783               	bsf	3,7
   485     0605  0800               	movf	0,w
   486     0606  0A84               	incf	4,f
   487     0607  1903               	skipnz
   488     0608  0AFF               	incf	btemp+1,f
   489     0609  0008               	return
   490     060A                     stringcode:
   491     060A                     stringdir:
   492     060A  3006               	movlw	high stringdir
   493     060B  008A               	movwf	10
   494     060C  0804               	movf	4,w
   495     060D  0A84               	incf	4,f
   496     060E  0782               	addwf	2,f
   497     060F                     __stringbase:
   498     060F  3400               	retlw	0
   499     0610                     __end_of__stringtab:
   500     0610                     _dpowers:
   501     0610  3401               	retlw	1
   502     0611  3400               	retlw	0
   503     0612  340A               	retlw	10
   504     0613  3400               	retlw	0
   505     0614  3464               	retlw	100
   506     0615  3400               	retlw	0
   507     0616  34E8               	retlw	232
   508     0617  3403               	retlw	3
   509     0618  3410               	retlw	16
   510     0619  3427               	retlw	39
   511     061A                     __end_of_dpowers:
   512     0019                     _TXREG	set	25
   513     0018                     _RCSTA	set	24
   514     0008                     _PORTDbits	set	8
   515     0006                     _PORTBbits	set	6
   516     001E                     _ADRESH	set	30
   517     001F                     _ADCON0	set	31
   518     001F                     _ADCON0bits	set	31
   519     001A                     _RCREG	set	26
   520     000C                     _PIR1bits	set	12
   521     0009                     _PORTE	set	9
   522     0008                     _PORTD	set	8
   523     0006                     _PORTB	set	6
   524     0005                     _PORTA	set	5
   525     000C                     _PIR1	set	12
   526     000B                     _INTCON	set	11
   527     0098                     _TXSTA	set	152
   528     009A                     _SPBRGH	set	154
   529     0099                     _SPBRG	set	153
   530     0086                     _TRISBbits	set	134
   531     0089                     _TRISEbits	set	137
   532     0085                     _TRISAbits	set	133
   533     009F                     _ADCON1	set	159
   534     0089                     _TRISE	set	137
   535     0088                     _TRISD	set	136
   536     0086                     _TRISB	set	134
   537     0081                     _OPTION_REG	set	129
   538     008C                     _PIE1	set	140
   539     008F                     _OSCCON	set	143
   540     0187                     _BAUDCTL	set	391
   541     0189                     _ANSELHbits	set	393
   542     0188                     _ANSELbits	set	392
   543     0189                     _ANSELH	set	393
   544     0188                     _ANSEL	set	392
   545     061A                     STR_2:
   546     061A  3431               	retlw	49	;'1'
   547     061B  342E               	retlw	46	;'.'
   548     061C  3420               	retlw	32	;' '
   549     061D  344C               	retlw	76	;'L'
   550     061E  3465               	retlw	101	;'e'
   551     061F  3465               	retlw	101	;'e'
   552     0620  3472               	retlw	114	;'r'
   553     0621  3420               	retlw	32	;' '
   554     0622  3470               	retlw	112	;'p'
   555     0623  346F               	retlw	111	;'o'
   556     0624  3474               	retlw	116	;'t'
   557     0625  3465               	retlw	101	;'e'
   558     0626  346E               	retlw	110	;'n'
   559     0627  3463               	retlw	99	;'c'
   560     0628  3469               	retlw	105	;'i'
   561     0629  346F               	retlw	111	;'o'
   562     062A  346D               	retlw	109	;'m'
   563     062B  3465               	retlw	101	;'e'
   564     062C  3474               	retlw	116	;'t'
   565     062D  3472               	retlw	114	;'r'
   566     062E  346F               	retlw	111	;'o'
   567     062F  3420               	retlw	32	;' '
   568     0630  3400               	retlw	0
   569     0631                     STR_3:
   570     0631  3432               	retlw	50	;'2'
   571     0632  342E               	retlw	46	;'.'
   572     0633  3420               	retlw	32	;' '
   573     0634  3445               	retlw	69	;'E'
   574     0635  346E               	retlw	110	;'n'
   575     0636  3476               	retlw	118	;'v'
   576     0637  3469               	retlw	105	;'i'
   577     0638  3461               	retlw	97	;'a'
   578     0639  3472               	retlw	114	;'r'
   579     063A  3420               	retlw	32	;' '
   580     063B  3476               	retlw	118	;'v'
   581     063C  3461               	retlw	97	;'a'
   582     063D  346C               	retlw	108	;'l'
   583     063E  346F               	retlw	111	;'o'
   584     063F  3472               	retlw	114	;'r'
   585     0640  3420               	retlw	32	;' '
   586     0641  3400               	retlw	0
   587     0642                     STR_5:
   588     0642  3443               	retlw	67	;'C'
   589     0643  346F               	retlw	111	;'o'
   590     0644  346E               	retlw	110	;'n'
   591     0645  3474               	retlw	116	;'t'
   592     0646  3461               	retlw	97	;'a'
   593     0647  3464               	retlw	100	;'d'
   594     0648  346F               	retlw	111	;'o'
   595     0649  3472               	retlw	114	;'r'
   596     064A  3400               	retlw	0
   597     064B                     STR_4:
   598     064B  3450               	retlw	80	;'P'
   599     064C  344F               	retlw	79	;'O'
   600     064D  3454               	retlw	84	;'T'
   601     064E  3431               	retlw	49	;'1'
   602     064F  3400               	retlw	0
   603     0650                     STR_1:
   604     0650  3425               	retlw	37	;'%'
   605     0651  3464               	retlw	100	;'d'
   606     0652  3400               	retlw	0
   607     0650                     
   608                           	psect	cinit
   609     0015                     start_initialization:	
   610                           ; #config settings
   611                           
   612     0015                     __initialization:
   613                           
   614                           ; Initialize objects allocated to BANK0
   615     0015  120A  118A  27FC  120A  118A  	fcall	__pidataBANK0	;fetch initializer
   616     001A  00CF               	movwf	__pdataBANK0& (0+127)
   617                           
   618                           ; Clear objects allocated to BANK1
   619     001B  1683               	bsf	3,5	;RP0=1, select bank1
   620     001C  1303               	bcf	3,6	;RP1=0, select bank1
   621     001D  01B6               	clrf	__pbssBANK1& (0+127)
   622     001E  01B7               	clrf	(__pbssBANK1+1)& (0+127)
   623     001F  01B8               	clrf	(__pbssBANK1+2)& (0+127)
   624     0020  01B9               	clrf	(__pbssBANK1+3)& (0+127)
   625     0021  01BA               	clrf	(__pbssBANK1+4)& (0+127)
   626     0022  01BB               	clrf	(__pbssBANK1+5)& (0+127)
   627     0023  01BC               	clrf	(__pbssBANK1+6)& (0+127)
   628                           
   629                           ; Clear objects allocated to BANK0
   630     0024  1283               	bcf	3,5	;RP0=0, select bank0
   631     0025  1303               	bcf	3,6	;RP1=0, select bank0
   632     0026  01C7               	clrf	__pbssBANK0& (0+127)
   633     0027  01C8               	clrf	(__pbssBANK0+1)& (0+127)
   634     0028  01C9               	clrf	(__pbssBANK0+2)& (0+127)
   635     0029  01CA               	clrf	(__pbssBANK0+3)& (0+127)
   636     002A  01CB               	clrf	(__pbssBANK0+4)& (0+127)
   637     002B  01CC               	clrf	(__pbssBANK0+5)& (0+127)
   638     002C  01CD               	clrf	(__pbssBANK0+6)& (0+127)
   639     002D  01CE               	clrf	(__pbssBANK0+7)& (0+127)
   640     002E                     end_of_initialization:	
   641                           ;End of C runtime variable initialization code
   642                           
   643     002E                     __end_of__initialization:
   644     002E  0183               	clrf	3
   645     002F  120A  118A  2832   	ljmp	_main	;jump to C main() function
   646                           
   647                           	psect	bssBANK0
   648     0047                     __pbssBANK0:
   649     0047                     _esperar:
   650     0047                     	ds	2
   651     0049                     _condicion:
   652     0049                     	ds	2
   653     004B                     _ADC:
   654     004B                     	ds	2
   655     004D                     _cADC:
   656     004D                     	ds	2
   657                           
   658                           	psect	dataBANK0
   659     004F                     __pdataBANK0:
   660     004F                     _indicador:
   661     004F                     	ds	1
   662                           
   663                           	psect	bssBANK1
   664     00B6                     __pbssBANK1:
   665     00B6                     _contador:
   666     00B6                     	ds	1
   667     00B7                     _ncADC:
   668     00B7                     	ds	4
   669     00BB                     _charcontador:
   670     00BB                     	ds	2
   671                           
   672                           	psect	cstackBANK1
   673     00A0                     __pcstackBANK1:
   674     00A0                     ??_UART_config:
   675     00A0                     ??_Lcd_Write_String:	
   676                           ; 1 bytes @ 0x0
   677                           
   678     00A0                     ___lwdiv@counter:	
   679                           ; 1 bytes @ 0x0
   680                           
   681                           
   682                           ; 1 bytes @ 0x0
   683     00A0                     	ds	1
   684     00A1                     ___lwdiv@quotient:
   685                           
   686                           ; 2 bytes @ 0x1
   687     00A1                     	ds	2
   688     00A3                     ?___lwmod:
   689     00A3                     ___lwmod@divisor:	
   690                           ; 2 bytes @ 0x3
   691                           
   692                           
   693                           ; 2 bytes @ 0x3
   694     00A3                     	ds	2
   695     00A5                     ___lwmod@dividend:
   696                           
   697                           ; 2 bytes @ 0x5
   698     00A5                     	ds	2
   699     00A7                     ?_sprintf:
   700     00A7                     sprintf@f:	
   701                           ; 2 bytes @ 0x7
   702                           
   703                           
   704                           ; 1 bytes @ 0x7
   705     00A7                     	ds	3
   706     00AA                     ??_sprintf:
   707                           
   708                           ; 1 bytes @ 0xA
   709     00AA                     	ds	3
   710     00AD                     sprintf@ap:
   711                           
   712                           ; 1 bytes @ 0xD
   713     00AD                     	ds	1
   714     00AE                     sprintf@flag:
   715                           
   716                           ; 1 bytes @ 0xE
   717     00AE                     	ds	1
   718     00AF                     sprintf@prec:
   719                           
   720                           ; 1 bytes @ 0xF
   721     00AF                     	ds	1
   722     00B0                     sprintf@val:
   723                           
   724                           ; 2 bytes @ 0x10
   725     00B0                     	ds	2
   726     00B2                     sprintf@sp:
   727                           
   728                           ; 1 bytes @ 0x12
   729     00B2                     	ds	1
   730     00B3                     sprintf@c:
   731                           
   732                           ; 1 bytes @ 0x13
   733     00B3                     	ds	1
   734     00B4                     ??_main:
   735                           
   736                           ; 1 bytes @ 0x14
   737     00B4                     	ds	2
   738                           
   739                           	psect	cstackCOMMON
   740     0070                     __pcstackCOMMON:
   741     0070                     ?_Lcd_Init:
   742     0070                     ?_Lcd_Clear:	
   743                           ; 1 bytes @ 0x0
   744                           
   745     0070                     ?_UART_write_string:	
   746                           ; 1 bytes @ 0x0
   747                           
   748     0070                     ?_setup:	
   749                           ; 1 bytes @ 0x0
   750                           
   751     0070                     ?_isr:	
   752                           ; 1 bytes @ 0x0
   753                           
   754     0070                     ?_main:	
   755                           ; 1 bytes @ 0x0
   756                           
   757     0070                     ?_Lcd_Port:	
   758                           ; 1 bytes @ 0x0
   759                           
   760     0070                     ?_Lcd_Cmd:	
   761                           ; 1 bytes @ 0x0
   762                           
   763     0070                     ?_Lcd_Write_Char:	
   764                           ; 1 bytes @ 0x0
   765                           
   766     0070                     ?_UART_write_char:	
   767                           ; 1 bytes @ 0x0
   768                           
   769     0070                     ?_read_ADC:	
   770                           ; 1 bytes @ 0x0
   771                           
   772     0070                     ?i1___lwdiv:	
   773                           ; 2 bytes @ 0x0
   774                           
   775     0070                     ?___lmul:	
   776                           ; 2 bytes @ 0x0
   777                           
   778     0070                     i1___lwdiv@divisor:	
   779                           ; 4 bytes @ 0x0
   780                           
   781     0070                     ___lmul@multiplier:	
   782                           ; 2 bytes @ 0x0
   783                           
   784                           
   785                           ; 4 bytes @ 0x0
   786     0070                     	ds	2
   787     0072                     ??_read_ADC:
   788     0072                     i1___lwdiv@dividend:	
   789                           ; 1 bytes @ 0x2
   790                           
   791                           
   792                           ; 2 bytes @ 0x2
   793     0072                     	ds	2
   794     0074                     ??i1___lwdiv:
   795     0074                     ___lmul@multiplicand:	
   796                           ; 1 bytes @ 0x4
   797                           
   798                           
   799                           ; 4 bytes @ 0x4
   800     0074                     	ds	1
   801     0075                     i1___lwdiv@quotient:
   802                           
   803                           ; 2 bytes @ 0x5
   804     0075                     	ds	2
   805     0077                     i1___lwdiv@counter:
   806                           
   807                           ; 1 bytes @ 0x7
   808     0077                     	ds	1
   809     0078                     ??___lmul:
   810     0078                     ?i1___lwmod:	
   811                           ; 1 bytes @ 0x8
   812                           
   813     0078                     i1___lwmod@divisor:	
   814                           ; 2 bytes @ 0x8
   815                           
   816                           
   817                           ; 2 bytes @ 0x8
   818     0078                     	ds	1
   819     0079                     ___lmul@product:
   820                           
   821                           ; 4 bytes @ 0x9
   822     0079                     	ds	1
   823     007A                     i1___lwmod@dividend:
   824                           
   825                           ; 2 bytes @ 0xA
   826     007A                     	ds	2
   827     007C                     ??i1___lwmod:
   828                           
   829                           ; 1 bytes @ 0xC
   830     007C                     	ds	1
   831     007D                     ??___aldiv:
   832     007D                     i1___lwmod@counter:	
   833                           ; 1 bytes @ 0xD
   834                           
   835                           
   836                           ; 1 bytes @ 0xD
   837     007D                     	ds	1
   838     007E                     ??_mapear:
   839                           
   840                           	psect	cstackBANK0
   841     0020                     __pcstackBANK0:	
   842                           ; 1 bytes @ 0xE
   843                           
   844     0020                     ?i1_sprintf:
   845     0020                     ?___aldiv:	
   846                           ; 2 bytes @ 0x0
   847                           
   848     0020                     i1sprintf@f:	
   849                           ; 4 bytes @ 0x0
   850                           
   851     0020                     ___aldiv@divisor:	
   852                           ; 1 bytes @ 0x0
   853                           
   854                           
   855                           ; 4 bytes @ 0x0
   856     0020                     	ds	3
   857     0023                     ??i1_sprintf:
   858                           
   859                           ; 1 bytes @ 0x3
   860     0023                     	ds	1
   861     0024                     ___aldiv@dividend:
   862                           
   863                           ; 4 bytes @ 0x4
   864     0024                     	ds	2
   865     0026                     i1sprintf@ap:
   866                           
   867                           ; 1 bytes @ 0x6
   868     0026                     	ds	1
   869     0027                     i1sprintf@flag:
   870                           
   871                           ; 1 bytes @ 0x7
   872     0027                     	ds	1
   873     0028                     ___aldiv@counter:
   874     0028                     i1sprintf@prec:	
   875                           ; 1 bytes @ 0x8
   876                           
   877                           
   878                           ; 1 bytes @ 0x8
   879     0028                     	ds	1
   880     0029                     ___aldiv@sign:
   881     0029                     i1sprintf@val:	
   882                           ; 1 bytes @ 0x9
   883                           
   884                           
   885                           ; 2 bytes @ 0x9
   886     0029                     	ds	1
   887     002A                     ___aldiv@quotient:
   888                           
   889                           ; 4 bytes @ 0xA
   890     002A                     	ds	1
   891     002B                     i1sprintf@sp:
   892                           
   893                           ; 1 bytes @ 0xB
   894     002B                     	ds	1
   895     002C                     i1sprintf@c:
   896                           
   897                           ; 1 bytes @ 0xC
   898     002C                     	ds	2
   899     002E                     ?_mapear:
   900     002E                     mapear@valor:	
   901                           ; 2 bytes @ 0xE
   902                           
   903                           
   904                           ; 2 bytes @ 0xE
   905     002E                     	ds	2
   906     0030                     mapear@min:
   907                           
   908                           ; 2 bytes @ 0x10
   909     0030                     	ds	2
   910     0032                     mapear@max:
   911                           
   912                           ; 2 bytes @ 0x12
   913     0032                     	ds	2
   914     0034                     mapear@nmin:
   915                           
   916                           ; 2 bytes @ 0x14
   917     0034                     	ds	2
   918     0036                     mapear@nmax:
   919                           
   920                           ; 2 bytes @ 0x16
   921     0036                     	ds	2
   922     0038                     mapear@nvalor:
   923                           
   924                           ; 2 bytes @ 0x18
   925     0038                     	ds	2
   926     003A                     ??_isr:
   927                           
   928                           ; 1 bytes @ 0x1A
   929     003A                     	ds	6
   930     0040                     ?_setup_ADC:
   931     0040                     ?_UART_config:	
   932                           ; 1 bytes @ 0x20
   933                           
   934     0040                     ??_Lcd_Port:	
   935                           ; 1 bytes @ 0x20
   936                           
   937     0040                     ??_UART_write_char:	
   938                           ; 1 bytes @ 0x20
   939                           
   940     0040                     ?___lwdiv:	
   941                           ; 1 bytes @ 0x20
   942                           
   943     0040                     Lcd_Port@a:	
   944                           ; 2 bytes @ 0x20
   945                           
   946     0040                     setup_ADC@channel:	
   947                           ; 1 bytes @ 0x20
   948                           
   949     0040                     UART_config@baudrate:	
   950                           ; 2 bytes @ 0x20
   951                           
   952     0040                     ___lwdiv@divisor:	
   953                           ; 2 bytes @ 0x20
   954                           
   955                           
   956                           ; 2 bytes @ 0x20
   957     0040                     	ds	1
   958     0041                     ??_Lcd_Cmd:
   959     0041                     ??_Lcd_Write_Char:	
   960                           ; 1 bytes @ 0x21
   961                           
   962     0041                     UART_write_char@a:	
   963                           ; 1 bytes @ 0x21
   964                           
   965                           
   966                           ; 1 bytes @ 0x21
   967     0041                     	ds	1
   968     0042                     ??_setup_ADC:
   969     0042                     ??_UART_write_string:	
   970                           ; 1 bytes @ 0x22
   971                           
   972     0042                     Lcd_Cmd@a:	
   973                           ; 1 bytes @ 0x22
   974                           
   975     0042                     Lcd_Write_Char@a:	
   976                           ; 1 bytes @ 0x22
   977                           
   978     0042                     ___lwdiv@dividend:	
   979                           ; 1 bytes @ 0x22
   980                           
   981     0042                     UART_config@fosc:	
   982                           ; 2 bytes @ 0x22
   983                           
   984                           
   985                           ; 4 bytes @ 0x22
   986     0042                     	ds	1
   987     0043                     ??_Lcd_Init:
   988     0043                     ??_Lcd_Clear:	
   989                           ; 1 bytes @ 0x23
   990                           
   991     0043                     ?_Lcd_Set_Cursor:	
   992                           ; 1 bytes @ 0x23
   993                           
   994     0043                     ?_Lcd_Write_String:	
   995                           ; 1 bytes @ 0x23
   996                           
   997     0043                     Lcd_Set_Cursor@b:	
   998                           ; 1 bytes @ 0x23
   999                           
  1000     0043                     UART_write_string@i:	
  1001                           ; 1 bytes @ 0x23
  1002                           
  1003     0043                     Lcd_Write_String@a:	
  1004                           ; 1 bytes @ 0x23
  1005                           
  1006                           
  1007                           ; 2 bytes @ 0x23
  1008     0043                     	ds	1
  1009     0044                     ??_Lcd_Set_Cursor:
  1010     0044                     ??___lwdiv:	
  1011                           ; 1 bytes @ 0x24
  1012                           
  1013     0044                     Lcd_Set_Cursor@a:	
  1014                           ; 1 bytes @ 0x24
  1015                           
  1016     0044                     UART_write_string@txt:	
  1017                           ; 1 bytes @ 0x24
  1018                           
  1019                           
  1020                           ; 1 bytes @ 0x24
  1021     0044                     	ds	1
  1022     0045                     ??___lwmod:
  1023     0045                     Lcd_Set_Cursor@temp:	
  1024                           ; 1 bytes @ 0x25
  1025                           
  1026     0045                     Lcd_Write_String@i:	
  1027                           ; 1 bytes @ 0x25
  1028                           
  1029                           
  1030                           ; 2 bytes @ 0x25
  1031     0045                     	ds	1
  1032     0046                     UART_config@conection:
  1033     0046                     ___lwmod@counter:	
  1034                           ; 1 bytes @ 0x26
  1035                           
  1036                           
  1037                           ; 1 bytes @ 0x26
  1038     0046                     	ds	1
  1039     0047                     ??_setup:
  1040                           
  1041                           	psect	maintext
  1042     0032                     __pmaintext:	
  1043                           ; 1 bytes @ 0x27
  1044 ;;
  1045 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  1046 ;;
  1047 ;; *************** function _main *****************
  1048 ;; Defined at:
  1049 ;;		line 118 in file "Principal.c"
  1050 ;; Parameters:    Size  Location     Type
  1051 ;;		None
  1052 ;; Auto vars:     Size  Location     Type
  1053 ;;		None
  1054 ;; Return value:  Size  Location     Type
  1055 ;;                  1    wreg      void 
  1056 ;; Registers used:
  1057 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1058 ;; Tracked objects:
  1059 ;;		On entry : B00/0
  1060 ;;		On exit  : 0/0
  1061 ;;		Unchanged: 0/0
  1062 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1063 ;;      Params:         0       0       0       0       0
  1064 ;;      Locals:         0       0       0       0       0
  1065 ;;      Temps:          0       0       2       0       0
  1066 ;;      Totals:         0       0       2       0       0
  1067 ;;Total ram usage:        2 bytes
  1068 ;; Hardware stack levels required when called: 6
  1069 ;; This function calls:
  1070 ;;		_Lcd_Clear
  1071 ;;		_Lcd_Init
  1072 ;;		_Lcd_Set_Cursor
  1073 ;;		_Lcd_Write_String
  1074 ;;		_UART_write_string
  1075 ;;		_setup
  1076 ;;		_sprintf
  1077 ;; This function is called by:
  1078 ;;		Startup code after reset
  1079 ;; This function uses a non-reentrant model
  1080 ;;
  1081                           
  1082     0032                     _main:	
  1083                           ;psect for function _main
  1084                           
  1085     0032                     l2643:	
  1086                           ;incstack = 0
  1087                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1088                           
  1089                           
  1090                           ;Principal.c: 119:     setup();
  1091     0032  120A  118A  25B9  120A  118A  	fcall	_setup
  1092     0037                     l2645:
  1093                           
  1094                           ;Principal.c: 120:     Lcd_Init();
  1095     0037  120A  118A  2653  120A  118A  	fcall	_Lcd_Init
  1096     003C                     l2647:
  1097                           
  1098                           ;Principal.c: 121:     Lcd_Clear();
  1099     003C  120A  158A  26F0  120A  118A  	fcall	_Lcd_Clear
  1100     0041                     l2649:
  1101                           
  1102                           ;Principal.c: 123:         if (ADCON0bits.GO == 0){
  1103     0041  1283               	bcf	3,5	;RP0=0, select bank0
  1104     0042  1303               	bcf	3,6	;RP1=0, select bank0
  1105     0043  189F               	btfsc	31,1	;volatile
  1106     0044  2846               	goto	u2041
  1107     0045  2847               	goto	u2040
  1108     0046                     u2041:
  1109     0046  2852               	goto	l2655
  1110     0047                     u2040:
  1111     0047                     l2651:
  1112                           
  1113                           ;Principal.c: 124:             _delay((unsigned long)((5)*(1000000/4000.0)));
  1114     0047  30F9               	movlw	249
  1115     0048  1683               	bsf	3,5	;RP0=1, select bank1
  1116     0049  1303               	bcf	3,6	;RP1=0, select bank1
  1117     004A  00B4               	movwf	??_main^(0+128)
  1118     004B                     u2117:
  1119     004B  284C               	nop2
  1120     004C  0BB4               	decfsz	??_main^(0+128),f
  1121     004D  284B               	goto	u2117
  1122     004E  284F               	nop2
  1123     004F                     l2653:
  1124                           
  1125                           ;Principal.c: 125:             ADCON0bits.GO = 1;
  1126     004F  1283               	bcf	3,5	;RP0=0, select bank0
  1127     0050  1303               	bcf	3,6	;RP1=0, select bank0
  1128     0051  149F               	bsf	31,1	;volatile
  1129     0052                     l2655:
  1130                           
  1131                           ;Principal.c: 128:         if (indicador == 0B00110000){
  1132     0052  3030               	movlw	48
  1133     0053  064F               	xorwf	_indicador,w
  1134     0054  1D03               	btfss	3,2
  1135     0055  2857               	goto	u2051
  1136     0056  2858               	goto	u2050
  1137     0057                     u2051:
  1138     0057  2868               	goto	l2661
  1139     0058                     u2050:
  1140     0058                     l2657:
  1141                           
  1142                           ;Principal.c: 129:             UART_write_string("1. Leer potenciometro ");
  1143     0058  300B               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
  1144     0059  120A  158A  2765  120A  118A  	fcall	_UART_write_string
  1145                           
  1146                           ;Principal.c: 130:             UART_write_string("2. Enviar valor ");
  1147     005E  3022               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1148     005F  120A  158A  2765  120A  118A  	fcall	_UART_write_string
  1149     0064                     l2659:
  1150                           
  1151                           ;Principal.c: 131:             indicador = 0;
  1152     0064  1283               	bcf	3,5	;RP0=0, select bank0
  1153     0065  1303               	bcf	3,6	;RP1=0, select bank0
  1154     0066  01CF               	clrf	_indicador
  1155                           
  1156                           ;Principal.c: 132:         }
  1157     0067  28C9               	goto	l2679
  1158     0068                     l2661:
  1159     0068  3031               	movlw	49
  1160     0069  064F               	xorwf	_indicador,w
  1161     006A  1D03               	btfss	3,2
  1162     006B  286D               	goto	u2061
  1163     006C  286E               	goto	u2060
  1164     006D                     u2061:
  1165     006D  28C9               	goto	l2679
  1166     006E                     u2060:
  1167     006E                     l2663:
  1168                           
  1169                           ;Principal.c: 134:             Lcd_Set_Cursor(2,1);
  1170     006E  01C3               	clrf	Lcd_Set_Cursor@b
  1171     006F  0AC3               	incf	Lcd_Set_Cursor@b,f
  1172     0070  3002               	movlw	2
  1173     0071  120A  158A  2743  120A  118A  	fcall	_Lcd_Set_Cursor
  1174     0076                     l2665:
  1175                           
  1176                           ;Principal.c: 135:             if(ADC < 10){
  1177     0076  1283               	bcf	3,5	;RP0=0, select bank0
  1178     0077  1303               	bcf	3,6	;RP1=0, select bank0
  1179     0078  084C               	movf	_ADC+1,w
  1180     0079  3A80               	xorlw	128
  1181     007A  00FF               	movwf	btemp+1
  1182     007B  3080               	movlw	128
  1183     007C  027F               	subwf	btemp+1,w
  1184     007D  1D03               	skipz
  1185     007E  2881               	goto	u2075
  1186     007F  300A               	movlw	10
  1187     0080  024B               	subwf	_ADC,w
  1188     0081                     u2075:
  1189     0081  1803               	skipnc
  1190     0082  2884               	goto	u2071
  1191     0083  2885               	goto	u2070
  1192     0084                     u2071:
  1193     0084  288E               	goto	l2669
  1194     0085                     u2070:
  1195     0085                     l2667:
  1196                           
  1197                           ;Principal.c: 136:                 cADC[2] = cADC[0];
  1198     0085  1283               	bcf	3,5	;RP0=0, select bank0
  1199     0086  1303               	bcf	3,6	;RP1=0, select bank0
  1200     0087  084D               	movf	_cADC,w
  1201     0088  00CF               	movwf	_cADC+2
  1202                           
  1203                           ;Principal.c: 137:                 cADC[1] = '0';
  1204     0089  3030               	movlw	48
  1205     008A  00CE               	movwf	_cADC+1
  1206                           
  1207                           ;Principal.c: 138:                 cADC[0] = '0';
  1208     008B  3030               	movlw	48
  1209     008C  00CD               	movwf	_cADC
  1210                           
  1211                           ;Principal.c: 139:             }
  1212     008D  28A5               	goto	l96
  1213     008E                     l2669:
  1214     008E  1283               	bcf	3,5	;RP0=0, select bank0
  1215     008F  1303               	bcf	3,6	;RP1=0, select bank0
  1216     0090  084C               	movf	_ADC+1,w
  1217     0091  3A80               	xorlw	128
  1218     0092  00FF               	movwf	btemp+1
  1219     0093  3080               	movlw	128
  1220     0094  027F               	subwf	btemp+1,w
  1221     0095  1D03               	skipz
  1222     0096  2899               	goto	u2085
  1223     0097  3064               	movlw	100
  1224     0098  024B               	subwf	_ADC,w
  1225     0099                     u2085:
  1226     0099  1803               	skipnc
  1227     009A  289C               	goto	u2081
  1228     009B  289D               	goto	u2080
  1229     009C                     u2081:
  1230     009C  28A5               	goto	l96
  1231     009D                     u2080:
  1232     009D                     l2671:
  1233                           
  1234                           ;Principal.c: 141:                 cADC[2] = cADC[1];
  1235     009D  1283               	bcf	3,5	;RP0=0, select bank0
  1236     009E  1303               	bcf	3,6	;RP1=0, select bank0
  1237     009F  084E               	movf	_cADC+1,w
  1238     00A0  00CF               	movwf	_cADC+2
  1239                           
  1240                           ;Principal.c: 142:                 cADC[1] = cADC[0];
  1241     00A1  084D               	movf	_cADC,w
  1242     00A2  00CE               	movwf	_cADC+1
  1243                           
  1244                           ;Principal.c: 143:                 cADC[0] = '0';
  1245     00A3  3030               	movlw	48
  1246     00A4  00CD               	movwf	_cADC
  1247     00A5                     l96:
  1248                           
  1249                           ;Principal.c: 145:             ncADC[0] = cADC[0];
  1250     00A5  1283               	bcf	3,5	;RP0=0, select bank0
  1251     00A6  1303               	bcf	3,6	;RP1=0, select bank0
  1252     00A7  084D               	movf	_cADC,w
  1253     00A8  1683               	bsf	3,5	;RP0=1, select bank1
  1254     00A9  1303               	bcf	3,6	;RP1=0, select bank1
  1255     00AA  00B7               	movwf	_ncADC^(0+128)
  1256                           
  1257                           ;Principal.c: 146:             ncADC[1] = '.';
  1258     00AB  302E               	movlw	46
  1259     00AC  00B8               	movwf	(_ncADC^(0+128)+1)
  1260                           
  1261                           ;Principal.c: 147:             ncADC[2] = cADC[1];
  1262     00AD  1283               	bcf	3,5	;RP0=0, select bank0
  1263     00AE  1303               	bcf	3,6	;RP1=0, select bank0
  1264     00AF  084E               	movf	_cADC+1,w
  1265     00B0  1683               	bsf	3,5	;RP0=1, select bank1
  1266     00B1  1303               	bcf	3,6	;RP1=0, select bank1
  1267     00B2  00B9               	movwf	(_ncADC^(0+128)+2)
  1268                           
  1269                           ;Principal.c: 148:             ncADC[3] = cADC[2];
  1270     00B3  1283               	bcf	3,5	;RP0=0, select bank0
  1271     00B4  1303               	bcf	3,6	;RP1=0, select bank0
  1272     00B5  084F               	movf	_cADC+2,w
  1273     00B6  1683               	bsf	3,5	;RP0=1, select bank1
  1274     00B7  1303               	bcf	3,6	;RP1=0, select bank1
  1275     00B8  00BA               	movwf	(_ncADC^(0+128)+3)
  1276     00B9                     l2673:
  1277                           
  1278                           ;Principal.c: 149:             ncADC[4] = 0;
  1279     00B9  01BB               	clrf	(_ncADC^(0+128)+4)
  1280     00BA                     l2675:
  1281                           
  1282                           ;Principal.c: 151:             Lcd_Write_String(ncADC);
  1283     00BA  30B7               	movlw	(low (_ncADC| 0))& (0+255)
  1284     00BB  1283               	bcf	3,5	;RP0=0, select bank0
  1285     00BC  1303               	bcf	3,6	;RP1=0, select bank0
  1286     00BD  00C3               	movwf	Lcd_Write_String@a
  1287     00BE  3000               	movlw	0
  1288     00BF  00C4               	movwf	Lcd_Write_String@a+1
  1289     00C0  120A  118A  24F4  120A  118A  	fcall	_Lcd_Write_String
  1290     00C5                     l2677:
  1291                           
  1292                           ;Principal.c: 153:             indicador = 0B00110000;
  1293     00C5  3030               	movlw	48
  1294     00C6  1283               	bcf	3,5	;RP0=0, select bank0
  1295     00C7  1303               	bcf	3,6	;RP1=0, select bank0
  1296     00C8  00CF               	movwf	_indicador
  1297     00C9                     l2679:
  1298                           
  1299                           ;Principal.c: 156:         Lcd_Set_Cursor(1, 1);
  1300     00C9  01C3               	clrf	Lcd_Set_Cursor@b
  1301     00CA  0AC3               	incf	Lcd_Set_Cursor@b,f
  1302     00CB  3001               	movlw	1
  1303     00CC  120A  158A  2743  120A  118A  	fcall	_Lcd_Set_Cursor
  1304     00D1                     l2681:
  1305                           
  1306                           ;Principal.c: 157:         Lcd_Write_String("POT1");
  1307     00D1  303C               	movlw	(low ((STR_4-__stringbase)| (0+32768)))& (0+255)
  1308     00D2  1283               	bcf	3,5	;RP0=0, select bank0
  1309     00D3  1303               	bcf	3,6	;RP1=0, select bank0
  1310     00D4  00C3               	movwf	Lcd_Write_String@a
  1311     00D5  3080               	movlw	128
  1312     00D6  00C4               	movwf	Lcd_Write_String@a+1
  1313     00D7  120A  118A  24F4  120A  118A  	fcall	_Lcd_Write_String
  1314     00DC                     l2683:
  1315                           
  1316                           ;Principal.c: 158:         Lcd_Set_Cursor(1, 7);
  1317     00DC  3007               	movlw	7
  1318     00DD  1283               	bcf	3,5	;RP0=0, select bank0
  1319     00DE  1303               	bcf	3,6	;RP1=0, select bank0
  1320     00DF  00C3               	movwf	Lcd_Set_Cursor@b
  1321     00E0  3001               	movlw	1
  1322     00E1  120A  158A  2743  120A  118A  	fcall	_Lcd_Set_Cursor
  1323     00E6                     l2685:
  1324                           
  1325                           ;Principal.c: 159:         Lcd_Write_String("Contador");
  1326     00E6  3033               	movlw	(low ((STR_5-__stringbase)| (0+32768)))& (0+255)
  1327     00E7  1283               	bcf	3,5	;RP0=0, select bank0
  1328     00E8  1303               	bcf	3,6	;RP1=0, select bank0
  1329     00E9  00C3               	movwf	Lcd_Write_String@a
  1330     00EA  3080               	movlw	128
  1331     00EB  00C4               	movwf	Lcd_Write_String@a+1
  1332     00EC  120A  118A  24F4  120A  118A  	fcall	_Lcd_Write_String
  1333     00F1                     l2687:
  1334                           
  1335                           ;Principal.c: 160:         Lcd_Set_Cursor(2,7);
  1336     00F1  3007               	movlw	7
  1337     00F2  1283               	bcf	3,5	;RP0=0, select bank0
  1338     00F3  1303               	bcf	3,6	;RP1=0, select bank0
  1339     00F4  00C3               	movwf	Lcd_Set_Cursor@b
  1340     00F5  3002               	movlw	2
  1341     00F6  120A  158A  2743  120A  118A  	fcall	_Lcd_Set_Cursor
  1342     00FB                     l2689:
  1343                           
  1344                           ;Principal.c: 161:         sprintf(charcontador, "%d", contador);
  1345     00FB  3041               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  1346     00FC  1683               	bsf	3,5	;RP0=1, select bank1
  1347     00FD  1303               	bcf	3,6	;RP1=0, select bank1
  1348     00FE  00A7               	movwf	sprintf@f^(0+128)
  1349     00FF  0836               	movf	_contador^(0+128),w
  1350     0100  00B4               	movwf	??_main^(0+128)
  1351     0101  01B5               	clrf	(??_main^(0+128)+1)
  1352     0102  0834               	movf	??_main^(0+128),w
  1353     0103  00A8               	movwf	(?_sprintf^(0+128)+1)
  1354     0104  0835               	movf	(??_main+1)^(0+128),w
  1355     0105  00A9               	movwf	((?_sprintf+1)^(0+128)+1)
  1356     0106  30BB               	movlw	(low (_charcontador| 0))& (0+255)
  1357     0107  120A  118A  2136  120A  118A  	fcall	_sprintf
  1358     010C                     l2691:
  1359                           
  1360                           ;Principal.c: 162:         if(contador < 10){
  1361     010C  300A               	movlw	10
  1362     010D  1683               	bsf	3,5	;RP0=1, select bank1
  1363     010E  1303               	bcf	3,6	;RP1=0, select bank1
  1364     010F  0236               	subwf	_contador^(0+128),w
  1365     0110  1803               	skipnc
  1366     0111  2913               	goto	u2091
  1367     0112  2914               	goto	u2090
  1368     0113                     u2091:
  1369     0113  291B               	goto	l2695
  1370     0114                     u2090:
  1371     0114                     l2693:
  1372                           
  1373                           ;Principal.c: 163:             charcontador[2] = charcontador[0];
  1374     0114  083B               	movf	_charcontador^(0+128),w
  1375     0115  00BD               	movwf	(_charcontador^(0+128)+2)
  1376                           
  1377                           ;Principal.c: 164:             charcontador[1] = '0';
  1378     0116  3030               	movlw	48
  1379     0117  00BC               	movwf	(_charcontador^(0+128)+1)
  1380                           
  1381                           ;Principal.c: 165:             charcontador[0] = '0';
  1382     0118  3030               	movlw	48
  1383     0119  00BB               	movwf	_charcontador^(0+128)
  1384                           
  1385                           ;Principal.c: 166:         }
  1386     011A  2927               	goto	l2699
  1387     011B                     l2695:
  1388     011B  3064               	movlw	100
  1389     011C  0236               	subwf	_contador^(0+128),w
  1390     011D  1803               	skipnc
  1391     011E  2920               	goto	u2101
  1392     011F  2921               	goto	u2100
  1393     0120                     u2101:
  1394     0120  2927               	goto	l2699
  1395     0121                     u2100:
  1396     0121                     l2697:
  1397                           
  1398                           ;Principal.c: 168:             charcontador[2] = charcontador[1];
  1399     0121  083C               	movf	(_charcontador^(0+128)+1),w
  1400     0122  00BD               	movwf	(_charcontador^(0+128)+2)
  1401                           
  1402                           ;Principal.c: 169:             charcontador[1] = charcontador[0];
  1403     0123  083B               	movf	_charcontador^(0+128),w
  1404     0124  00BC               	movwf	(_charcontador^(0+128)+1)
  1405                           
  1406                           ;Principal.c: 170:             charcontador[0] = '0';
  1407     0125  3030               	movlw	48
  1408     0126  00BB               	movwf	_charcontador^(0+128)
  1409     0127                     l2699:
  1410                           
  1411                           ;Principal.c: 172:         Lcd_Write_String(charcontador);
  1412     0127  30BB               	movlw	(low (_charcontador| 0))& (0+255)
  1413     0128  1283               	bcf	3,5	;RP0=0, select bank0
  1414     0129  1303               	bcf	3,6	;RP1=0, select bank0
  1415     012A  00C3               	movwf	Lcd_Write_String@a
  1416     012B  3000               	movlw	0
  1417     012C  00C4               	movwf	Lcd_Write_String@a+1
  1418     012D  120A  118A  24F4  120A  118A  	fcall	_Lcd_Write_String
  1419     0132  2841               	goto	l2649
  1420     0133  120A  118A  2812   	ljmp	start
  1421     0136                     __end_of_main:
  1422                           
  1423                           	psect	text1
  1424     0136                     __ptext1:	
  1425 ;; *************** function _sprintf *****************
  1426 ;; Defined at:
  1427 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;  sp              1    wreg     PTR unsigned char 
  1430 ;;		 -> charcontador(2), cADC(2), 
  1431 ;;  f               1    7[BANK1 ] PTR const unsigned char 
  1432 ;;		 -> STR_6(3), STR_1(3), 
  1433 ;; Auto vars:     Size  Location     Type
  1434 ;;  sp              1   18[BANK1 ] PTR unsigned char 
  1435 ;;		 -> charcontador(2), cADC(2), 
  1436 ;;  tmpval          4    0        struct .
  1437 ;;  val             2   16[BANK1 ] unsigned int 
  1438 ;;  cp              2    0        PTR const unsigned char 
  1439 ;;  len             2    0        unsigned int 
  1440 ;;  c               1   19[BANK1 ] unsigned char 
  1441 ;;  prec            1   15[BANK1 ] char 
  1442 ;;  flag            1   14[BANK1 ] unsigned char 
  1443 ;;  ap              1   13[BANK1 ] PTR void [1]
  1444 ;;		 -> ?_sprintf(2), 
  1445 ;; Return value:  Size  Location     Type
  1446 ;;                  2    7[BANK1 ] int 
  1447 ;; Registers used:
  1448 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1449 ;; Tracked objects:
  1450 ;;		On entry : 0/0
  1451 ;;		On exit  : 0/0
  1452 ;;		Unchanged: 0/0
  1453 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1454 ;;      Params:         0       0       3       0       0
  1455 ;;      Locals:         0       0       7       0       0
  1456 ;;      Temps:          0       0       3       0       0
  1457 ;;      Totals:         0       0      13       0       0
  1458 ;;Total ram usage:       13 bytes
  1459 ;; Hardware stack levels used: 1
  1460 ;; Hardware stack levels required when called: 4
  1461 ;; This function calls:
  1462 ;;		___lwdiv
  1463 ;;		___lwmod
  1464 ;; This function is called by:
  1465 ;;		_main
  1466 ;; This function uses a non-reentrant model
  1467 ;;
  1468                           
  1469     0136                     _sprintf:	
  1470                           ;psect for function _sprintf
  1471                           
  1472                           
  1473                           ;incstack = 0
  1474                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1475                           ;sprintf@sp stored from wreg
  1476     0136  1683               	bsf	3,5	;RP0=1, select bank1
  1477     0137  1303               	bcf	3,6	;RP1=0, select bank1
  1478     0138  00B2               	movwf	sprintf@sp^(0+128)
  1479     0139                     l2573:
  1480                           
  1481                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1482     0139  30A8               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1483     013A  00AD               	movwf	sprintf@ap^(0+128)
  1484                           
  1485                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1486     013B  2A0D               	goto	l2625
  1487     013C                     l2575:
  1488                           
  1489                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1490     013C  3025               	movlw	37
  1491     013D  0633               	xorwf	sprintf@c^(0+128),w
  1492     013E  1903               	btfsc	3,2
  1493     013F  2941               	goto	u1941
  1494     0140  2942               	goto	u1940
  1495     0141                     u1941:
  1496     0141  294C               	goto	l2581
  1497     0142                     u1940:
  1498     0142                     l2577:
  1499                           
  1500                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1501     0142  0832               	movf	sprintf@sp^(0+128),w
  1502     0143  0084               	movwf	4
  1503     0144  0833               	movf	sprintf@c^(0+128),w
  1504     0145  1383               	bcf	3,7	;select IRP bank0
  1505     0146  0080               	movwf	0
  1506     0147                     l2579:
  1507     0147  3001               	movlw	1
  1508     0148  00AA               	movwf	??_sprintf^(0+128)
  1509     0149  082A               	movf	??_sprintf^(0+128),w
  1510     014A  07B2               	addwf	sprintf@sp^(0+128),f
  1511                           
  1512                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  1513     014B  2A0D               	goto	l2625
  1514     014C                     l2581:
  1515                           
  1516                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1517     014C  01AE               	clrf	sprintf@flag^(0+128)
  1518     014D                     l2585:	
  1519                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1520                           
  1521     014D  3001               	movlw	1
  1522     014E  07A7               	addwf	sprintf@f^(0+128),f
  1523     014F  30FF               	movlw	-1
  1524     0150  0727               	addwf	sprintf@f^(0+128),w
  1525     0151  0084               	movwf	4
  1526     0152  120A  118A  260A  120A  118A  	fcall	stringdir
  1527     0157  00B3               	movwf	sprintf@c^(0+128)
  1528     0158  00AA               	movwf	??_sprintf^(0+128)
  1529     0159  01AB               	clrf	(??_sprintf^(0+128)+1)
  1530                           
  1531                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1532                           ; Switch size 1, requested type "simple"
  1533                           ; Number of cases is 1, Range of values is 0 to 0
  1534                           ; switch strategies available:
  1535                           ; Name         Instructions Cycles
  1536                           ; simple_byte            4     3 (average)
  1537                           ; direct_byte           11     8 (fixed)
  1538                           ; jumptable            260     6 (fixed)
  1539                           ;	Chosen strategy is simple_byte
  1540     015A  082B               	movf	(??_sprintf+1)^(0+128),w
  1541     015B  3A00               	xorlw	0	; case 0
  1542     015C  1903               	skipnz
  1543     015D  295F               	goto	l2781
  1544     015E  2A0D               	goto	l2625
  1545     015F                     l2781:
  1546                           
  1547                           ; Switch size 1, requested type "simple"
  1548                           ; Number of cases is 3, Range of values is 0 to 105
  1549                           ; switch strategies available:
  1550                           ; Name         Instructions Cycles
  1551                           ; simple_byte           10     6 (average)
  1552                           ; jumptable            260     6 (fixed)
  1553                           ;	Chosen strategy is simple_byte
  1554     015F  082A               	movf	??_sprintf^(0+128),w
  1555     0160  3A00               	xorlw	0	; case 0
  1556     0161  1903               	skipnz
  1557     0162  2A1D               	goto	l2627
  1558     0163  3A64               	xorlw	100	; case 100
  1559     0164  1903               	skipnz
  1560     0165  296A               	goto	l2587
  1561     0166  3A0D               	xorlw	13	; case 105
  1562     0167  1903               	skipnz
  1563     0168  296A               	goto	l2587
  1564     0169  2A0D               	goto	l2625
  1565     016A                     l2587:
  1566                           
  1567                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1568     016A  082D               	movf	sprintf@ap^(0+128),w
  1569     016B  0084               	movwf	4
  1570     016C  1383               	bcf	3,7	;select IRP bank0
  1571     016D  0800               	movf	0,w
  1572     016E  00B0               	movwf	sprintf@val^(0+128)
  1573     016F  0A84               	incf	4,f
  1574     0170  0800               	movf	0,w
  1575     0171  00B1               	movwf	(sprintf@val+1)^(0+128)
  1576     0172                     l2589:
  1577     0172  3002               	movlw	2
  1578     0173  00AA               	movwf	??_sprintf^(0+128)
  1579     0174  082A               	movf	??_sprintf^(0+128),w
  1580     0175  07AD               	addwf	sprintf@ap^(0+128),f
  1581     0176                     l2591:
  1582                           
  1583                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1584     0176  1FB1               	btfss	(sprintf@val+1)^(0+128),7
  1585     0177  2979               	goto	u1951
  1586     0178  297A               	goto	u1950
  1587     0179                     u1951:
  1588     0179  2983               	goto	l2597
  1589     017A                     u1950:
  1590     017A                     l2593:
  1591                           
  1592                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1593     017A  3003               	movlw	3
  1594     017B  00AA               	movwf	??_sprintf^(0+128)
  1595     017C  082A               	movf	??_sprintf^(0+128),w
  1596     017D  04AE               	iorwf	sprintf@flag^(0+128),f
  1597     017E                     l2595:
  1598                           
  1599                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1600     017E  09B0               	comf	sprintf@val^(0+128),f
  1601     017F  09B1               	comf	(sprintf@val+1)^(0+128),f
  1602     0180  0AB0               	incf	sprintf@val^(0+128),f
  1603     0181  1903               	skipnz
  1604     0182  0AB1               	incf	(sprintf@val+1)^(0+128),f
  1605     0183                     l2597:
  1606                           
  1607                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1608     0183  01B3               	clrf	sprintf@c^(0+128)
  1609     0184  0AB3               	incf	sprintf@c^(0+128),f
  1610     0185                     l2603:
  1611                           
  1612                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1613     0185  0833               	movf	sprintf@c^(0+128),w
  1614     0186  00AA               	movwf	??_sprintf^(0+128)
  1615     0187  072A               	addwf	??_sprintf^(0+128),w
  1616     0188  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1617     0189  0084               	movwf	4
  1618     018A  120A  118A  260A  120A  118A  	fcall	stringdir
  1619     018F  00AB               	movwf	(??_sprintf+1)^(0+128)
  1620     0190  120A  118A  260A  120A  118A  	fcall	stringdir
  1621     0195  00AC               	movwf	((??_sprintf+1)^(0+128)+1)
  1622     0196  082C               	movf	(??_sprintf+2)^(0+128),w
  1623     0197  0231               	subwf	(sprintf@val+1)^(0+128),w
  1624     0198  1D03               	skipz
  1625     0199  299C               	goto	u1965
  1626     019A  082B               	movf	(??_sprintf+1)^(0+128),w
  1627     019B  0230               	subwf	sprintf@val^(0+128),w
  1628     019C                     u1965:
  1629     019C  1803               	skipnc
  1630     019D  299F               	goto	u1961
  1631     019E  29A0               	goto	u1960
  1632     019F                     u1961:
  1633     019F  29A1               	goto	l2607
  1634     01A0                     u1960:
  1635     01A0  29AB               	goto	l2609
  1636     01A1                     l2607:
  1637     01A1  3001               	movlw	1
  1638     01A2  00AA               	movwf	??_sprintf^(0+128)
  1639     01A3  082A               	movf	??_sprintf^(0+128),w
  1640     01A4  07B3               	addwf	sprintf@c^(0+128),f
  1641     01A5  3005               	movlw	5
  1642     01A6  0633               	xorwf	sprintf@c^(0+128),w
  1643     01A7  1D03               	btfss	3,2
  1644     01A8  29AA               	goto	u1971
  1645     01A9  29AB               	goto	u1970
  1646     01AA                     u1971:
  1647     01AA  2985               	goto	l2603
  1648     01AB                     u1970:
  1649     01AB                     l2609:
  1650                           
  1651                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1652     01AB  082E               	movf	sprintf@flag^(0+128),w
  1653     01AC  3903               	andlw	3
  1654     01AD  1903               	btfsc	3,2
  1655     01AE  29B0               	goto	u1981
  1656     01AF  29B1               	goto	u1980
  1657     01B0                     u1981:
  1658     01B0  29BA               	goto	l2615
  1659     01B1                     u1980:
  1660     01B1                     l2611:
  1661                           
  1662                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1663     01B1  0832               	movf	sprintf@sp^(0+128),w
  1664     01B2  0084               	movwf	4
  1665     01B3  302D               	movlw	45
  1666     01B4  1383               	bcf	3,7	;select IRP bank0
  1667     01B5  0080               	movwf	0
  1668     01B6                     l2613:
  1669     01B6  3001               	movlw	1
  1670     01B7  00AA               	movwf	??_sprintf^(0+128)
  1671     01B8  082A               	movf	??_sprintf^(0+128),w
  1672     01B9  07B2               	addwf	sprintf@sp^(0+128),f
  1673     01BA                     l2615:
  1674                           
  1675                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1676     01BA  0833               	movf	sprintf@c^(0+128),w
  1677     01BB  00AF               	movwf	sprintf@prec^(0+128)
  1678                           
  1679                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1680     01BC  2A04               	goto	l2623
  1681     01BD                     l2617:
  1682                           
  1683                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1684     01BD  300A               	movlw	10
  1685     01BE  00A3               	movwf	___lwmod@divisor^(0+128)
  1686     01BF  3000               	movlw	0
  1687     01C0  00A4               	movwf	(___lwmod@divisor^(0+128)+1)
  1688     01C1  082F               	movf	sprintf@prec^(0+128),w
  1689     01C2  00AA               	movwf	??_sprintf^(0+128)
  1690     01C3  072A               	addwf	??_sprintf^(0+128),w
  1691     01C4  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1692     01C5  0084               	movwf	4
  1693     01C6  120A  118A  260A  120A  118A  	fcall	stringdir
  1694     01CB  1283               	bcf	3,5	;RP0=0, select bank0
  1695     01CC  1303               	bcf	3,6	;RP1=0, select bank0
  1696     01CD  00C0               	movwf	___lwdiv@divisor
  1697     01CE  120A  118A  260A  120A  118A  	fcall	stringdir
  1698     01D3  00C1               	movwf	___lwdiv@divisor+1
  1699     01D4  1683               	bsf	3,5	;RP0=1, select bank1
  1700     01D5  1303               	bcf	3,6	;RP1=0, select bank1
  1701     01D6  0831               	movf	(sprintf@val+1)^(0+128),w
  1702     01D7  1283               	bcf	3,5	;RP0=0, select bank0
  1703     01D8  1303               	bcf	3,6	;RP1=0, select bank0
  1704     01D9  00C3               	movwf	___lwdiv@dividend+1
  1705     01DA  1683               	bsf	3,5	;RP0=1, select bank1
  1706     01DB  1303               	bcf	3,6	;RP1=0, select bank1
  1707     01DC  0830               	movf	sprintf@val^(0+128),w
  1708     01DD  1283               	bcf	3,5	;RP0=0, select bank0
  1709     01DE  1303               	bcf	3,6	;RP1=0, select bank0
  1710     01DF  00C2               	movwf	___lwdiv@dividend
  1711     01E0  120A  118A  255A  120A  118A  	fcall	___lwdiv
  1712     01E5  1283               	bcf	3,5	;RP0=0, select bank0
  1713     01E6  1303               	bcf	3,6	;RP1=0, select bank0
  1714     01E7  0841               	movf	?___lwdiv+1,w
  1715     01E8  1683               	bsf	3,5	;RP0=1, select bank1
  1716     01E9  1303               	bcf	3,6	;RP1=0, select bank1
  1717     01EA  00A6               	movwf	(___lwmod@dividend+1)^(0+128)
  1718     01EB  1283               	bcf	3,5	;RP0=0, select bank0
  1719     01EC  1303               	bcf	3,6	;RP1=0, select bank0
  1720     01ED  0840               	movf	?___lwdiv,w
  1721     01EE  1683               	bsf	3,5	;RP0=1, select bank1
  1722     01EF  1303               	bcf	3,6	;RP1=0, select bank1
  1723     01F0  00A5               	movwf	___lwmod@dividend^(0+128)
  1724     01F1  120A  118A  26EE  120A  118A  	fcall	___lwmod
  1725     01F6  1683               	bsf	3,5	;RP0=1, select bank1
  1726     01F7  1303               	bcf	3,6	;RP1=0, select bank1
  1727     01F8  0823               	movf	?___lwmod^(0+128),w
  1728     01F9  3E30               	addlw	48
  1729     01FA  00B3               	movwf	sprintf@c^(0+128)
  1730     01FB                     l2619:
  1731                           
  1732                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1733     01FB  0832               	movf	sprintf@sp^(0+128),w
  1734     01FC  0084               	movwf	4
  1735     01FD  0833               	movf	sprintf@c^(0+128),w
  1736     01FE  1383               	bcf	3,7	;select IRP bank0
  1737     01FF  0080               	movwf	0
  1738     0200                     l2621:
  1739     0200  3001               	movlw	1
  1740     0201  00AA               	movwf	??_sprintf^(0+128)
  1741     0202  082A               	movf	??_sprintf^(0+128),w
  1742     0203  07B2               	addwf	sprintf@sp^(0+128),f
  1743     0204                     l2623:
  1744                           
  1745                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1746     0204  30FF               	movlw	255
  1747     0205  00AA               	movwf	??_sprintf^(0+128)
  1748     0206  082A               	movf	??_sprintf^(0+128),w
  1749     0207  07AF               	addwf	sprintf@prec^(0+128),f
  1750     0208  0A2F               	incf	sprintf@prec^(0+128),w
  1751     0209  1D03               	btfss	3,2
  1752     020A  2A0C               	goto	u1991
  1753     020B  2A0D               	goto	u1990
  1754     020C                     u1991:
  1755     020C  29BD               	goto	l2617
  1756     020D                     u1990:
  1757     020D                     l2625:
  1758                           
  1759                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1760     020D  3001               	movlw	1
  1761     020E  07A7               	addwf	sprintf@f^(0+128),f
  1762     020F  30FF               	movlw	-1
  1763     0210  0727               	addwf	sprintf@f^(0+128),w
  1764     0211  0084               	movwf	4
  1765     0212  120A  118A  260A  120A  118A  	fcall	stringdir
  1766     0217  00B3               	movwf	sprintf@c^(0+128)
  1767     0218  0833               	movf	sprintf@c^(0+128),w
  1768     0219  1D03               	btfss	3,2
  1769     021A  2A1C               	goto	u2001
  1770     021B  2A1D               	goto	u2000
  1771     021C                     u2001:
  1772     021C  293C               	goto	l2575
  1773     021D                     u2000:
  1774     021D                     l2627:
  1775                           
  1776                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1777     021D  0832               	movf	sprintf@sp^(0+128),w
  1778     021E  0084               	movwf	4
  1779     021F  1383               	bcf	3,7	;select IRP bank0
  1780     0220  0180               	clrf	0
  1781     0221                     l403:
  1782     0221  0008               	return
  1783     0222                     __end_of_sprintf:
  1784                           
  1785                           	psect	text2
  1786     06EE                     __ptext2:	
  1787 ;; *************** function ___lwmod *****************
  1788 ;; Defined at:
  1789 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  1790 ;; Parameters:    Size  Location     Type
  1791 ;;  divisor         2    3[BANK1 ] unsigned int 
  1792 ;;  dividend        2    5[BANK1 ] unsigned int 
  1793 ;; Auto vars:     Size  Location     Type
  1794 ;;  counter         1   38[BANK0 ] unsigned char 
  1795 ;; Return value:  Size  Location     Type
  1796 ;;                  2    3[BANK1 ] unsigned int 
  1797 ;; Registers used:
  1798 ;;		wreg, status,2, status,0
  1799 ;; Tracked objects:
  1800 ;;		On entry : 0/0
  1801 ;;		On exit  : 0/0
  1802 ;;		Unchanged: 0/0
  1803 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1804 ;;      Params:         0       0       4       0       0
  1805 ;;      Locals:         0       1       0       0       0
  1806 ;;      Temps:          0       1       0       0       0
  1807 ;;      Totals:         0       2       4       0       0
  1808 ;;Total ram usage:        6 bytes
  1809 ;; Hardware stack levels used: 1
  1810 ;; Hardware stack levels required when called: 3
  1811 ;; This function calls:
  1812 ;;		Nothing
  1813 ;; This function is called by:
  1814 ;;		_sprintf
  1815 ;; This function uses a non-reentrant model
  1816 ;;
  1817                           
  1818     06EE                     ___lwmod:	
  1819                           ;psect for function ___lwmod
  1820                           
  1821     06EE                     l2519:	
  1822                           ;incstack = 0
  1823                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1824                           
  1825     06EE  1683               	bsf	3,5	;RP0=1, select bank1
  1826     06EF  1303               	bcf	3,6	;RP1=0, select bank1
  1827     06F0  0823               	movf	___lwmod@divisor^(0+128),w
  1828     06F1  0424               	iorwf	(___lwmod@divisor+1)^(0+128),w
  1829     06F2  1903               	btfsc	3,2
  1830     06F3  2EF5               	goto	u1881
  1831     06F4  2EF6               	goto	u1880
  1832     06F5                     u1881:
  1833     06F5  2F2F               	goto	l2537
  1834     06F6                     u1880:
  1835     06F6                     l2521:
  1836     06F6  1283               	bcf	3,5	;RP0=0, select bank0
  1837     06F7  1303               	bcf	3,6	;RP1=0, select bank0
  1838     06F8  01C6               	clrf	___lwmod@counter
  1839     06F9  0AC6               	incf	___lwmod@counter,f
  1840     06FA  2F08               	goto	l2527
  1841     06FB                     l2523:
  1842     06FB  3001               	movlw	1
  1843     06FC                     u1895:
  1844     06FC  1003               	clrc
  1845     06FD  0DA3               	rlf	___lwmod@divisor^(0+128),f
  1846     06FE  0DA4               	rlf	(___lwmod@divisor+1)^(0+128),f
  1847     06FF  3EFF               	addlw	-1
  1848     0700  1D03               	skipz
  1849     0701  2EFC               	goto	u1895
  1850     0702                     l2525:
  1851     0702  3001               	movlw	1
  1852     0703  1283               	bcf	3,5	;RP0=0, select bank0
  1853     0704  1303               	bcf	3,6	;RP1=0, select bank0
  1854     0705  00C5               	movwf	??___lwmod
  1855     0706  0845               	movf	??___lwmod,w
  1856     0707  07C6               	addwf	___lwmod@counter,f
  1857     0708                     l2527:
  1858     0708  1683               	bsf	3,5	;RP0=1, select bank1
  1859     0709  1303               	bcf	3,6	;RP1=0, select bank1
  1860     070A  1FA4               	btfss	(___lwmod@divisor+1)^(0+128),7
  1861     070B  2F0D               	goto	u1901
  1862     070C  2F0E               	goto	u1900
  1863     070D                     u1901:
  1864     070D  2EFB               	goto	l2523
  1865     070E                     u1900:
  1866     070E                     l2529:
  1867     070E  1683               	bsf	3,5	;RP0=1, select bank1
  1868     070F  1303               	bcf	3,6	;RP1=0, select bank1
  1869     0710  0824               	movf	(___lwmod@divisor+1)^(0+128),w
  1870     0711  0226               	subwf	(___lwmod@dividend+1)^(0+128),w
  1871     0712  1D03               	skipz
  1872     0713  2F16               	goto	u1915
  1873     0714  0823               	movf	___lwmod@divisor^(0+128),w
  1874     0715  0225               	subwf	___lwmod@dividend^(0+128),w
  1875     0716                     u1915:
  1876     0716  1C03               	skipc
  1877     0717  2F19               	goto	u1911
  1878     0718  2F1A               	goto	u1910
  1879     0719                     u1911:
  1880     0719  2F20               	goto	l2533
  1881     071A                     u1910:
  1882     071A                     l2531:
  1883     071A  0823               	movf	___lwmod@divisor^(0+128),w
  1884     071B  02A5               	subwf	___lwmod@dividend^(0+128),f
  1885     071C  0824               	movf	(___lwmod@divisor+1)^(0+128),w
  1886     071D  1C03               	skipc
  1887     071E  03A6               	decf	(___lwmod@dividend+1)^(0+128),f
  1888     071F  02A6               	subwf	(___lwmod@dividend+1)^(0+128),f
  1889     0720                     l2533:
  1890     0720  3001               	movlw	1
  1891     0721                     u1925:
  1892     0721  1003               	clrc
  1893     0722  0CA4               	rrf	(___lwmod@divisor+1)^(0+128),f
  1894     0723  0CA3               	rrf	___lwmod@divisor^(0+128),f
  1895     0724  3EFF               	addlw	-1
  1896     0725  1D03               	skipz
  1897     0726  2F21               	goto	u1925
  1898     0727                     l2535:
  1899     0727  3001               	movlw	1
  1900     0728  1283               	bcf	3,5	;RP0=0, select bank0
  1901     0729  1303               	bcf	3,6	;RP1=0, select bank0
  1902     072A  02C6               	subwf	___lwmod@counter,f
  1903     072B  1D03               	btfss	3,2
  1904     072C  2F2E               	goto	u1931
  1905     072D  2F2F               	goto	u1930
  1906     072E                     u1931:
  1907     072E  2F0E               	goto	l2529
  1908     072F                     u1930:
  1909     072F                     l2537:
  1910     072F  1683               	bsf	3,5	;RP0=1, select bank1
  1911     0730  1303               	bcf	3,6	;RP1=0, select bank1
  1912     0731  0826               	movf	(___lwmod@dividend+1)^(0+128),w
  1913     0732  00A4               	movwf	(?___lwmod+1)^(0+128)
  1914     0733  0825               	movf	___lwmod@dividend^(0+128),w
  1915     0734  00A3               	movwf	?___lwmod^(0+128)
  1916     0735                     l689:
  1917     0735  0008               	return
  1918     0736                     __end_of___lwmod:
  1919                           
  1920                           	psect	text3
  1921     055A                     __ptext3:	
  1922 ;; *************** function ___lwdiv *****************
  1923 ;; Defined at:
  1924 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;  divisor         2   32[BANK0 ] unsigned int 
  1927 ;;  dividend        2   34[BANK0 ] unsigned int 
  1928 ;; Auto vars:     Size  Location     Type
  1929 ;;  quotient        2    1[BANK1 ] unsigned int 
  1930 ;;  counter         1    0[BANK1 ] unsigned char 
  1931 ;; Return value:  Size  Location     Type
  1932 ;;                  2   32[BANK0 ] unsigned int 
  1933 ;; Registers used:
  1934 ;;		wreg, status,2, status,0
  1935 ;; Tracked objects:
  1936 ;;		On entry : 0/0
  1937 ;;		On exit  : 0/0
  1938 ;;		Unchanged: 0/0
  1939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1940 ;;      Params:         0       4       0       0       0
  1941 ;;      Locals:         0       0       3       0       0
  1942 ;;      Temps:          0       1       0       0       0
  1943 ;;      Totals:         0       5       3       0       0
  1944 ;;Total ram usage:        8 bytes
  1945 ;; Hardware stack levels used: 1
  1946 ;; Hardware stack levels required when called: 3
  1947 ;; This function calls:
  1948 ;;		Nothing
  1949 ;; This function is called by:
  1950 ;;		_sprintf
  1951 ;; This function uses a non-reentrant model
  1952 ;;
  1953                           
  1954     055A                     ___lwdiv:	
  1955                           ;psect for function ___lwdiv
  1956                           
  1957     055A                     l2493:	
  1958                           ;incstack = 0
  1959                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1960                           
  1961     055A  1683               	bsf	3,5	;RP0=1, select bank1
  1962     055B  1303               	bcf	3,6	;RP1=0, select bank1
  1963     055C  01A1               	clrf	___lwdiv@quotient^(0+128)
  1964     055D  01A2               	clrf	(___lwdiv@quotient+1)^(0+128)
  1965     055E                     l2495:
  1966     055E  1283               	bcf	3,5	;RP0=0, select bank0
  1967     055F  1303               	bcf	3,6	;RP1=0, select bank0
  1968     0560  0840               	movf	___lwdiv@divisor,w
  1969     0561  0441               	iorwf	___lwdiv@divisor+1,w
  1970     0562  1903               	btfsc	3,2
  1971     0563  2D65               	goto	u1811
  1972     0564  2D66               	goto	u1810
  1973     0565                     u1811:
  1974     0565  2DAC               	goto	l2515
  1975     0566                     u1810:
  1976     0566                     l2497:
  1977     0566  1683               	bsf	3,5	;RP0=1, select bank1
  1978     0567  1303               	bcf	3,6	;RP1=0, select bank1
  1979     0568  01A0               	clrf	___lwdiv@counter^(0+128)
  1980     0569  0AA0               	incf	___lwdiv@counter^(0+128),f
  1981     056A  2D78               	goto	l2503
  1982     056B                     l2499:
  1983     056B  3001               	movlw	1
  1984     056C                     u1825:
  1985     056C  1003               	clrc
  1986     056D  0DC0               	rlf	___lwdiv@divisor,f
  1987     056E  0DC1               	rlf	___lwdiv@divisor+1,f
  1988     056F  3EFF               	addlw	-1
  1989     0570  1D03               	skipz
  1990     0571  2D6C               	goto	u1825
  1991     0572                     l2501:
  1992     0572  3001               	movlw	1
  1993     0573  00C4               	movwf	??___lwdiv
  1994     0574  0844               	movf	??___lwdiv,w
  1995     0575  1683               	bsf	3,5	;RP0=1, select bank1
  1996     0576  1303               	bcf	3,6	;RP1=0, select bank1
  1997     0577  07A0               	addwf	___lwdiv@counter^(0+128),f
  1998     0578                     l2503:
  1999     0578  1283               	bcf	3,5	;RP0=0, select bank0
  2000     0579  1303               	bcf	3,6	;RP1=0, select bank0
  2001     057A  1FC1               	btfss	___lwdiv@divisor+1,7
  2002     057B  2D7D               	goto	u1831
  2003     057C  2D7E               	goto	u1830
  2004     057D                     u1831:
  2005     057D  2D6B               	goto	l2499
  2006     057E                     u1830:
  2007     057E                     l2505:
  2008     057E  3001               	movlw	1
  2009     057F  1683               	bsf	3,5	;RP0=1, select bank1
  2010     0580  1303               	bcf	3,6	;RP1=0, select bank1
  2011     0581                     u1845:
  2012     0581  1003               	clrc
  2013     0582  0DA1               	rlf	___lwdiv@quotient^(0+128),f
  2014     0583  0DA2               	rlf	(___lwdiv@quotient+1)^(0+128),f
  2015     0584  3EFF               	addlw	-1
  2016     0585  1D03               	skipz
  2017     0586  2D81               	goto	u1845
  2018     0587  1283               	bcf	3,5	;RP0=0, select bank0
  2019     0588  1303               	bcf	3,6	;RP1=0, select bank0
  2020     0589  0841               	movf	___lwdiv@divisor+1,w
  2021     058A  0243               	subwf	___lwdiv@dividend+1,w
  2022     058B  1D03               	skipz
  2023     058C  2D8F               	goto	u1855
  2024     058D  0840               	movf	___lwdiv@divisor,w
  2025     058E  0242               	subwf	___lwdiv@dividend,w
  2026     058F                     u1855:
  2027     058F  1C03               	skipc
  2028     0590  2D92               	goto	u1851
  2029     0591  2D93               	goto	u1850
  2030     0592                     u1851:
  2031     0592  2D9C               	goto	l2511
  2032     0593                     u1850:
  2033     0593                     l2507:
  2034     0593  0840               	movf	___lwdiv@divisor,w
  2035     0594  02C2               	subwf	___lwdiv@dividend,f
  2036     0595  0841               	movf	___lwdiv@divisor+1,w
  2037     0596  1C03               	skipc
  2038     0597  03C3               	decf	___lwdiv@dividend+1,f
  2039     0598  02C3               	subwf	___lwdiv@dividend+1,f
  2040     0599                     l2509:
  2041     0599  1683               	bsf	3,5	;RP0=1, select bank1
  2042     059A  1303               	bcf	3,6	;RP1=0, select bank1
  2043     059B  1421               	bsf	___lwdiv@quotient^(0+128),0
  2044     059C                     l2511:
  2045     059C  3001               	movlw	1
  2046     059D  1283               	bcf	3,5	;RP0=0, select bank0
  2047     059E                     u1865:
  2048     059E  1003               	clrc
  2049     059F  0CC1               	rrf	___lwdiv@divisor+1,f
  2050     05A0  0CC0               	rrf	___lwdiv@divisor,f
  2051     05A1  3EFF               	addlw	-1
  2052     05A2  1D03               	skipz
  2053     05A3  2D9E               	goto	u1865
  2054     05A4                     l2513:
  2055     05A4  3001               	movlw	1
  2056     05A5  1683               	bsf	3,5	;RP0=1, select bank1
  2057     05A6  1303               	bcf	3,6	;RP1=0, select bank1
  2058     05A7  02A0               	subwf	___lwdiv@counter^(0+128),f
  2059     05A8  1D03               	btfss	3,2
  2060     05A9  2DAB               	goto	u1871
  2061     05AA  2DAC               	goto	u1870
  2062     05AB                     u1871:
  2063     05AB  2D7E               	goto	l2505
  2064     05AC                     u1870:
  2065     05AC                     l2515:
  2066     05AC  1683               	bsf	3,5	;RP0=1, select bank1
  2067     05AD  1303               	bcf	3,6	;RP1=0, select bank1
  2068     05AE  0822               	movf	(___lwdiv@quotient+1)^(0+128),w
  2069     05AF  1283               	bcf	3,5	;RP0=0, select bank0
  2070     05B0  1303               	bcf	3,6	;RP1=0, select bank0
  2071     05B1  00C1               	movwf	?___lwdiv+1
  2072     05B2  1683               	bsf	3,5	;RP0=1, select bank1
  2073     05B3  1303               	bcf	3,6	;RP1=0, select bank1
  2074     05B4  0821               	movf	___lwdiv@quotient^(0+128),w
  2075     05B5  1283               	bcf	3,5	;RP0=0, select bank0
  2076     05B6  1303               	bcf	3,6	;RP1=0, select bank0
  2077     05B7  00C0               	movwf	?___lwdiv
  2078     05B8                     l679:
  2079     05B8  0008               	return
  2080     05B9                     __end_of___lwdiv:
  2081                           
  2082                           	psect	text4
  2083     05B9                     __ptext4:	
  2084 ;; *************** function _setup *****************
  2085 ;; Defined at:
  2086 ;;		line 49 in file "Principal.c"
  2087 ;; Parameters:    Size  Location     Type
  2088 ;;		None
  2089 ;; Auto vars:     Size  Location     Type
  2090 ;;		None
  2091 ;; Return value:  Size  Location     Type
  2092 ;;                  1    wreg      void 
  2093 ;; Registers used:
  2094 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2095 ;; Tracked objects:
  2096 ;;		On entry : 0/0
  2097 ;;		On exit  : 0/0
  2098 ;;		Unchanged: 0/0
  2099 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2100 ;;      Params:         0       0       0       0       0
  2101 ;;      Locals:         0       0       0       0       0
  2102 ;;      Temps:          0       0       0       0       0
  2103 ;;      Totals:         0       0       0       0       0
  2104 ;;Total ram usage:        0 bytes
  2105 ;; Hardware stack levels used: 1
  2106 ;; Hardware stack levels required when called: 4
  2107 ;; This function calls:
  2108 ;;		_UART_config
  2109 ;;		_setup_ADC
  2110 ;; This function is called by:
  2111 ;;		_main
  2112 ;; This function uses a non-reentrant model
  2113 ;;
  2114                           
  2115     05B9                     _setup:	
  2116                           ;psect for function _setup
  2117                           
  2118     05B9                     l2541:	
  2119                           ;incstack = 0
  2120                           ; Regs used in _setup: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2121                           
  2122                           
  2123                           ;Principal.c: 51:     OSCCON = 0B01000001;
  2124     05B9  3041               	movlw	65
  2125     05BA  1683               	bsf	3,5	;RP0=1, select bank1
  2126     05BB  1303               	bcf	3,6	;RP1=0, select bank1
  2127     05BC  008F               	movwf	15	;volatile
  2128                           
  2129                           ;Principal.c: 54:     INTCON = 0B11000000;
  2130     05BD  30C0               	movlw	192
  2131     05BE  008B               	movwf	11	;volatile
  2132                           
  2133                           ;Principal.c: 55:     PIE1 = 0B01100000;
  2134     05BF  3060               	movlw	96
  2135     05C0  008C               	movwf	12	;volatile
  2136     05C1                     l2543:
  2137                           
  2138                           ;Principal.c: 56:     PIR1 = 0B00000000;
  2139     05C1  1283               	bcf	3,5	;RP0=0, select bank0
  2140     05C2  1303               	bcf	3,6	;RP1=0, select bank0
  2141     05C3  018C               	clrf	12	;volatile
  2142     05C4                     l2545:
  2143                           
  2144                           ;Principal.c: 57:     OPTION_REG = 0;
  2145     05C4  1683               	bsf	3,5	;RP0=1, select bank1
  2146     05C5  1303               	bcf	3,6	;RP1=0, select bank1
  2147     05C6  0181               	clrf	1	;volatile
  2148     05C7                     l2547:
  2149                           
  2150                           ;Principal.c: 60:     setup_ADC(0);
  2151     05C7  3000               	movlw	0
  2152     05C8  1283               	bcf	3,5	;RP0=0, select bank0
  2153     05C9  1303               	bcf	3,6	;RP1=0, select bank0
  2154     05CA  00C0               	movwf	setup_ADC@channel
  2155     05CB  00C1               	movwf	setup_ADC@channel+1
  2156     05CC  120A  118A  22FC  120A  118A  	fcall	_setup_ADC
  2157     05D1                     l2549:
  2158                           
  2159                           ;Principal.c: 63:     UART_config(9600, 1000000, BOTH);
  2160     05D1  3080               	movlw	128
  2161     05D2  1283               	bcf	3,5	;RP0=0, select bank0
  2162     05D3  1303               	bcf	3,6	;RP1=0, select bank0
  2163     05D4  00C0               	movwf	UART_config@baudrate
  2164     05D5  3025               	movlw	37
  2165     05D6  00C1               	movwf	UART_config@baudrate+1
  2166     05D7  3000               	movlw	0
  2167     05D8  00C5               	movwf	UART_config@fosc+3
  2168     05D9  300F               	movlw	15
  2169     05DA  00C4               	movwf	UART_config@fosc+2
  2170     05DB  3042               	movlw	66
  2171     05DC  00C3               	movwf	UART_config@fosc+1
  2172     05DD  3040               	movlw	64
  2173     05DE  00C2               	movwf	UART_config@fosc
  2174     05DF  3002               	movlw	2
  2175     05E0  00C6               	movwf	UART_config@conection
  2176     05E1  120A  158A  27C5  120A  118A  	fcall	_UART_config
  2177     05E6                     l2551:
  2178                           
  2179                           ;Principal.c: 66:     TRISB = 0;
  2180     05E6  1683               	bsf	3,5	;RP0=1, select bank1
  2181     05E7  1303               	bcf	3,6	;RP1=0, select bank1
  2182     05E8  0186               	clrf	6	;volatile
  2183     05E9                     l2553:
  2184                           
  2185                           ;Principal.c: 68:     TRISD = 0;
  2186     05E9  0188               	clrf	8	;volatile
  2187     05EA                     l2555:
  2188                           
  2189                           ;Principal.c: 69:     TRISE = 0;
  2190     05EA  0189               	clrf	9	;volatile
  2191     05EB                     l2557:
  2192                           
  2193                           ;Principal.c: 72:     PORTA = 0;
  2194     05EB  1283               	bcf	3,5	;RP0=0, select bank0
  2195     05EC  1303               	bcf	3,6	;RP1=0, select bank0
  2196     05ED  0185               	clrf	5	;volatile
  2197     05EE                     l2559:
  2198                           
  2199                           ;Principal.c: 73:     PORTB = 0;
  2200     05EE  0186               	clrf	6	;volatile
  2201     05EF                     l2561:
  2202                           
  2203                           ;Principal.c: 75:     PORTD = 0;
  2204     05EF  0188               	clrf	8	;volatile
  2205     05F0                     l2563:
  2206                           
  2207                           ;Principal.c: 76:     PORTE = 0;
  2208     05F0  0189               	clrf	9	;volatile
  2209     05F1                     l2565:
  2210                           
  2211                           ;Principal.c: 78:     esperar = 0;
  2212     05F1  01C7               	clrf	_esperar
  2213     05F2  01C8               	clrf	_esperar+1
  2214     05F3                     l2567:
  2215                           
  2216                           ;Principal.c: 79:     contador = 0;
  2217     05F3  1683               	bsf	3,5	;RP0=1, select bank1
  2218     05F4  1303               	bcf	3,6	;RP1=0, select bank1
  2219     05F5  01B6               	clrf	_contador^(0+128)
  2220     05F6                     l2569:
  2221                           
  2222                           ;Principal.c: 80:     ADC = 0;
  2223     05F6  1283               	bcf	3,5	;RP0=0, select bank0
  2224     05F7  1303               	bcf	3,6	;RP1=0, select bank0
  2225     05F8  01CB               	clrf	_ADC
  2226     05F9  01CC               	clrf	_ADC+1
  2227     05FA                     l71:
  2228     05FA  0008               	return
  2229     05FB                     __end_of_setup:
  2230                           
  2231                           	psect	text5
  2232     02FC                     __ptext5:	
  2233 ;; *************** function _setup_ADC *****************
  2234 ;; Defined at:
  2235 ;;		line 8 in file "ADC_int.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  channel         2   32[BANK0 ] int 
  2238 ;; Auto vars:     Size  Location     Type
  2239 ;;		None
  2240 ;; Return value:  Size  Location     Type
  2241 ;;                  1    wreg      void 
  2242 ;; Registers used:
  2243 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2244 ;; Tracked objects:
  2245 ;;		On entry : 0/0
  2246 ;;		On exit  : 0/0
  2247 ;;		Unchanged: 0/0
  2248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2249 ;;      Params:         0       2       0       0       0
  2250 ;;      Locals:         0       0       0       0       0
  2251 ;;      Temps:          0       0       0       0       0
  2252 ;;      Totals:         0       2       0       0       0
  2253 ;;Total ram usage:        2 bytes
  2254 ;; Hardware stack levels used: 1
  2255 ;; Hardware stack levels required when called: 3
  2256 ;; This function calls:
  2257 ;;		Nothing
  2258 ;; This function is called by:
  2259 ;;		_setup
  2260 ;; This function uses a non-reentrant model
  2261 ;;
  2262                           
  2263     02FC                     _setup_ADC:	
  2264                           ;psect for function _setup_ADC
  2265                           
  2266     02FC                     l1785:	
  2267                           ;incstack = 0
  2268                           ; Regs used in _setup_ADC: [wreg-fsr0h+status,2+status,0]
  2269                           
  2270                           
  2271                           ;ADC_int.c: 9:     ADCON0 = 0B01000001;
  2272     02FC  3041               	movlw	65
  2273     02FD  1283               	bcf	3,5	;RP0=0, select bank0
  2274     02FE  1303               	bcf	3,6	;RP1=0, select bank0
  2275     02FF  009F               	movwf	31	;volatile
  2276     0300                     l1787:
  2277                           
  2278                           ;ADC_int.c: 10:     ADCON1 = 0B00000000;
  2279     0300  1683               	bsf	3,5	;RP0=1, select bank1
  2280     0301  1303               	bcf	3,6	;RP1=0, select bank1
  2281     0302  019F               	clrf	31	;volatile
  2282     0303                     l1789:
  2283                           
  2284                           ;ADC_int.c: 11:     ANSEL = 0;
  2285     0303  1683               	bsf	3,5	;RP0=1, select bank3
  2286     0304  1703               	bsf	3,6	;RP1=1, select bank3
  2287     0305  0188               	clrf	8	;volatile
  2288     0306                     l1791:
  2289                           
  2290                           ;ADC_int.c: 12:     ANSELH = 0;
  2291     0306  0189               	clrf	9	;volatile
  2292                           
  2293                           ;ADC_int.c: 14:     switch (channel){
  2294     0307  2B9E               	goto	l1873
  2295     0308                     l132:	
  2296                           ;ADC_int.c: 15:         case 0:
  2297                           
  2298                           
  2299                           ;ADC_int.c: 16:             ANSELbits.ANS0 = 1;
  2300     0308  1683               	bsf	3,5	;RP0=1, select bank3
  2301     0309  1703               	bsf	3,6	;RP1=1, select bank3
  2302     030A  1408               	bsf	8,0	;volatile
  2303                           
  2304                           ;ADC_int.c: 17:             TRISAbits.TRISA0 = 1;
  2305     030B  1683               	bsf	3,5	;RP0=1, select bank1
  2306     030C  1303               	bcf	3,6	;RP1=0, select bank1
  2307     030D  1405               	bsf	5,0	;volatile
  2308                           
  2309                           ;ADC_int.c: 18:             break;
  2310     030E  2BD1               	goto	l147
  2311     030F                     l1793:
  2312                           
  2313                           ;ADC_int.c: 20:             ADCON0bits.CHS = 0B0001;
  2314     030F  081F               	movf	31,w	;volatile
  2315     0310  39C3               	andlw	-61
  2316     0311  3804               	iorlw	4
  2317     0312  009F               	movwf	31	;volatile
  2318     0313                     l1795:
  2319                           
  2320                           ;ADC_int.c: 21:             ANSELbits.ANS1 = 1;
  2321     0313  1683               	bsf	3,5	;RP0=1, select bank3
  2322     0314  1703               	bsf	3,6	;RP1=1, select bank3
  2323     0315  1488               	bsf	8,1	;volatile
  2324     0316                     l1797:
  2325                           
  2326                           ;ADC_int.c: 22:             TRISAbits.TRISA1 = 1;
  2327     0316  1683               	bsf	3,5	;RP0=1, select bank1
  2328     0317  1303               	bcf	3,6	;RP1=0, select bank1
  2329     0318  1485               	bsf	5,1	;volatile
  2330                           
  2331                           ;ADC_int.c: 23:             break;
  2332     0319  2BD1               	goto	l147
  2333     031A                     l1799:
  2334                           
  2335                           ;ADC_int.c: 25:             ADCON0bits.CHS = 0B0010;
  2336     031A  081F               	movf	31,w	;volatile
  2337     031B  39C3               	andlw	-61
  2338     031C  3808               	iorlw	8
  2339     031D  009F               	movwf	31	;volatile
  2340     031E                     l1801:
  2341                           
  2342                           ;ADC_int.c: 26:             ANSELbits.ANS2 = 1;
  2343     031E  1683               	bsf	3,5	;RP0=1, select bank3
  2344     031F  1703               	bsf	3,6	;RP1=1, select bank3
  2345     0320  1508               	bsf	8,2	;volatile
  2346     0321                     l1803:
  2347                           
  2348                           ;ADC_int.c: 27:             TRISAbits.TRISA2 = 1;
  2349     0321  1683               	bsf	3,5	;RP0=1, select bank1
  2350     0322  1303               	bcf	3,6	;RP1=0, select bank1
  2351     0323  1505               	bsf	5,2	;volatile
  2352                           
  2353                           ;ADC_int.c: 28:             break;
  2354     0324  2BD1               	goto	l147
  2355     0325                     l1805:
  2356                           
  2357                           ;ADC_int.c: 30:             ADCON0bits.CHS = 0B0011;
  2358     0325  081F               	movf	31,w	;volatile
  2359     0326  39C3               	andlw	-61
  2360     0327  380C               	iorlw	12
  2361     0328  009F               	movwf	31	;volatile
  2362     0329                     l1807:
  2363                           
  2364                           ;ADC_int.c: 31:             ANSELbits.ANS3 = 1;
  2365     0329  1683               	bsf	3,5	;RP0=1, select bank3
  2366     032A  1703               	bsf	3,6	;RP1=1, select bank3
  2367     032B  1588               	bsf	8,3	;volatile
  2368     032C                     l1809:
  2369                           
  2370                           ;ADC_int.c: 32:             TRISAbits.TRISA3 = 1;
  2371     032C  1683               	bsf	3,5	;RP0=1, select bank1
  2372     032D  1303               	bcf	3,6	;RP1=0, select bank1
  2373     032E  1585               	bsf	5,3	;volatile
  2374                           
  2375                           ;ADC_int.c: 33:             break;
  2376     032F  2BD1               	goto	l147
  2377     0330                     l1811:
  2378                           
  2379                           ;ADC_int.c: 35:             ADCON0bits.CHS = 0B0100;
  2380     0330  081F               	movf	31,w	;volatile
  2381     0331  39C3               	andlw	-61
  2382     0332  3810               	iorlw	16
  2383     0333  009F               	movwf	31	;volatile
  2384     0334                     l1813:
  2385                           
  2386                           ;ADC_int.c: 36:             ANSELbits.ANS4 = 1;
  2387     0334  1683               	bsf	3,5	;RP0=1, select bank3
  2388     0335  1703               	bsf	3,6	;RP1=1, select bank3
  2389     0336  1608               	bsf	8,4	;volatile
  2390     0337                     l1815:
  2391                           
  2392                           ;ADC_int.c: 37:             TRISAbits.TRISA5 = 1;
  2393     0337  1683               	bsf	3,5	;RP0=1, select bank1
  2394     0338  1303               	bcf	3,6	;RP1=0, select bank1
  2395     0339  1685               	bsf	5,5	;volatile
  2396                           
  2397                           ;ADC_int.c: 38:             break;
  2398     033A  2BD1               	goto	l147
  2399     033B                     l1817:
  2400                           
  2401                           ;ADC_int.c: 40:             ADCON0bits.CHS = 0B0101;
  2402     033B  081F               	movf	31,w	;volatile
  2403     033C  39C3               	andlw	-61
  2404     033D  3814               	iorlw	20
  2405     033E  009F               	movwf	31	;volatile
  2406     033F                     l1819:
  2407                           
  2408                           ;ADC_int.c: 41:             ANSELbits.ANS5 = 1;
  2409     033F  1683               	bsf	3,5	;RP0=1, select bank3
  2410     0340  1703               	bsf	3,6	;RP1=1, select bank3
  2411     0341  1688               	bsf	8,5	;volatile
  2412     0342                     l1821:
  2413                           
  2414                           ;ADC_int.c: 42:             TRISEbits.TRISE0 = 1;
  2415     0342  1683               	bsf	3,5	;RP0=1, select bank1
  2416     0343  1303               	bcf	3,6	;RP1=0, select bank1
  2417     0344  1409               	bsf	9,0	;volatile
  2418                           
  2419                           ;ADC_int.c: 43:             break;
  2420     0345  2BD1               	goto	l147
  2421     0346                     l1823:
  2422                           
  2423                           ;ADC_int.c: 45:             ADCON0bits.CHS = 0B0110;
  2424     0346  081F               	movf	31,w	;volatile
  2425     0347  39C3               	andlw	-61
  2426     0348  3818               	iorlw	24
  2427     0349  009F               	movwf	31	;volatile
  2428     034A                     l1825:
  2429                           
  2430                           ;ADC_int.c: 46:             ANSELbits.ANS6 = 1;
  2431     034A  1683               	bsf	3,5	;RP0=1, select bank3
  2432     034B  1703               	bsf	3,6	;RP1=1, select bank3
  2433     034C  1708               	bsf	8,6	;volatile
  2434     034D                     l1827:
  2435                           
  2436                           ;ADC_int.c: 47:             TRISEbits.TRISE1 = 1;
  2437     034D  1683               	bsf	3,5	;RP0=1, select bank1
  2438     034E  1303               	bcf	3,6	;RP1=0, select bank1
  2439     034F  1489               	bsf	9,1	;volatile
  2440                           
  2441                           ;ADC_int.c: 48:             break;
  2442     0350  2BD1               	goto	l147
  2443     0351                     l1829:
  2444                           
  2445                           ;ADC_int.c: 50:             ADCON0bits.CHS = 0B0111;
  2446     0351  081F               	movf	31,w	;volatile
  2447     0352  39C3               	andlw	-61
  2448     0353  381C               	iorlw	28
  2449     0354  009F               	movwf	31	;volatile
  2450     0355                     l1831:
  2451                           
  2452                           ;ADC_int.c: 51:             ANSELbits.ANS7 = 1;
  2453     0355  1683               	bsf	3,5	;RP0=1, select bank3
  2454     0356  1703               	bsf	3,6	;RP1=1, select bank3
  2455     0357  1788               	bsf	8,7	;volatile
  2456     0358                     l1833:
  2457                           
  2458                           ;ADC_int.c: 52:             TRISEbits.TRISE2 = 1;
  2459     0358  1683               	bsf	3,5	;RP0=1, select bank1
  2460     0359  1303               	bcf	3,6	;RP1=0, select bank1
  2461     035A  1509               	bsf	9,2	;volatile
  2462                           
  2463                           ;ADC_int.c: 53:             break;
  2464     035B  2BD1               	goto	l147
  2465     035C                     l1835:
  2466                           
  2467                           ;ADC_int.c: 55:             ADCON0bits.CHS = 0B1000;
  2468     035C  081F               	movf	31,w	;volatile
  2469     035D  39C3               	andlw	-61
  2470     035E  3820               	iorlw	32
  2471     035F  009F               	movwf	31	;volatile
  2472     0360                     l1837:
  2473                           
  2474                           ;ADC_int.c: 56:             ANSELHbits.ANS8 = 1;
  2475     0360  1683               	bsf	3,5	;RP0=1, select bank3
  2476     0361  1703               	bsf	3,6	;RP1=1, select bank3
  2477     0362  1409               	bsf	9,0	;volatile
  2478     0363                     l1839:
  2479                           
  2480                           ;ADC_int.c: 57:             TRISBbits.TRISB2 = 1;
  2481     0363  1683               	bsf	3,5	;RP0=1, select bank1
  2482     0364  1303               	bcf	3,6	;RP1=0, select bank1
  2483     0365  1506               	bsf	6,2	;volatile
  2484                           
  2485                           ;ADC_int.c: 58:             break;
  2486     0366  2BD1               	goto	l147
  2487     0367                     l1841:
  2488                           
  2489                           ;ADC_int.c: 60:             ADCON0bits.CHS = 0B1001;
  2490     0367  081F               	movf	31,w	;volatile
  2491     0368  39C3               	andlw	-61
  2492     0369  3824               	iorlw	36
  2493     036A  009F               	movwf	31	;volatile
  2494     036B                     l1843:
  2495                           
  2496                           ;ADC_int.c: 61:             ANSELHbits.ANS9 = 1;
  2497     036B  1683               	bsf	3,5	;RP0=1, select bank3
  2498     036C  1703               	bsf	3,6	;RP1=1, select bank3
  2499     036D  1489               	bsf	9,1	;volatile
  2500     036E                     l1845:
  2501                           
  2502                           ;ADC_int.c: 62:             TRISBbits.TRISB3 = 1;
  2503     036E  1683               	bsf	3,5	;RP0=1, select bank1
  2504     036F  1303               	bcf	3,6	;RP1=0, select bank1
  2505     0370  1586               	bsf	6,3	;volatile
  2506                           
  2507                           ;ADC_int.c: 63:             break;
  2508     0371  2BD1               	goto	l147
  2509     0372                     l1847:
  2510                           
  2511                           ;ADC_int.c: 65:             ADCON0bits.CHS = 0B1010;
  2512     0372  081F               	movf	31,w	;volatile
  2513     0373  39C3               	andlw	-61
  2514     0374  3828               	iorlw	40
  2515     0375  009F               	movwf	31	;volatile
  2516     0376                     l1849:
  2517                           
  2518                           ;ADC_int.c: 66:             ANSELHbits.ANS10 = 1;
  2519     0376  1683               	bsf	3,5	;RP0=1, select bank3
  2520     0377  1703               	bsf	3,6	;RP1=1, select bank3
  2521     0378  1509               	bsf	9,2	;volatile
  2522     0379                     l1851:
  2523                           
  2524                           ;ADC_int.c: 67:             TRISBbits.TRISB1 = 1;
  2525     0379  1683               	bsf	3,5	;RP0=1, select bank1
  2526     037A  1303               	bcf	3,6	;RP1=0, select bank1
  2527     037B  1486               	bsf	6,1	;volatile
  2528                           
  2529                           ;ADC_int.c: 68:             break;
  2530     037C  2BD1               	goto	l147
  2531     037D                     l1853:
  2532                           
  2533                           ;ADC_int.c: 70:             ADCON0bits.CHS = 0B1011;
  2534     037D  081F               	movf	31,w	;volatile
  2535     037E  39C3               	andlw	-61
  2536     037F  382C               	iorlw	44
  2537     0380  009F               	movwf	31	;volatile
  2538     0381                     l1855:
  2539                           
  2540                           ;ADC_int.c: 71:             ANSELHbits.ANS11 = 1;
  2541     0381  1683               	bsf	3,5	;RP0=1, select bank3
  2542     0382  1703               	bsf	3,6	;RP1=1, select bank3
  2543     0383  1589               	bsf	9,3	;volatile
  2544     0384                     l1857:
  2545                           
  2546                           ;ADC_int.c: 72:             TRISBbits.TRISB4 = 1;
  2547     0384  1683               	bsf	3,5	;RP0=1, select bank1
  2548     0385  1303               	bcf	3,6	;RP1=0, select bank1
  2549     0386  1606               	bsf	6,4	;volatile
  2550                           
  2551                           ;ADC_int.c: 73:             break;
  2552     0387  2BD1               	goto	l147
  2553     0388                     l1859:
  2554                           
  2555                           ;ADC_int.c: 75:             ADCON0bits.CHS = 0B1100;
  2556     0388  081F               	movf	31,w	;volatile
  2557     0389  39C3               	andlw	-61
  2558     038A  3830               	iorlw	48
  2559     038B  009F               	movwf	31	;volatile
  2560     038C                     l1861:
  2561                           
  2562                           ;ADC_int.c: 76:             ANSELHbits.ANS12 = 1;
  2563     038C  1683               	bsf	3,5	;RP0=1, select bank3
  2564     038D  1703               	bsf	3,6	;RP1=1, select bank3
  2565     038E  1609               	bsf	9,4	;volatile
  2566     038F                     l1863:
  2567                           
  2568                           ;ADC_int.c: 77:             TRISBbits.TRISB0 = 1;
  2569     038F  1683               	bsf	3,5	;RP0=1, select bank1
  2570     0390  1303               	bcf	3,6	;RP1=0, select bank1
  2571     0391  1406               	bsf	6,0	;volatile
  2572                           
  2573                           ;ADC_int.c: 78:             break;
  2574     0392  2BD1               	goto	l147
  2575     0393                     l1865:
  2576                           
  2577                           ;ADC_int.c: 80:             ADCON0bits.CHS = 0B1101;
  2578     0393  081F               	movf	31,w	;volatile
  2579     0394  39C3               	andlw	-61
  2580     0395  3834               	iorlw	52
  2581     0396  009F               	movwf	31	;volatile
  2582     0397                     l1867:
  2583                           
  2584                           ;ADC_int.c: 81:             ANSELHbits.ANS13 = 1;
  2585     0397  1683               	bsf	3,5	;RP0=1, select bank3
  2586     0398  1703               	bsf	3,6	;RP1=1, select bank3
  2587     0399  1689               	bsf	9,5	;volatile
  2588     039A                     l1869:
  2589                           
  2590                           ;ADC_int.c: 82:             TRISBbits.TRISB5 = 1;
  2591     039A  1683               	bsf	3,5	;RP0=1, select bank1
  2592     039B  1303               	bcf	3,6	;RP1=0, select bank1
  2593     039C  1686               	bsf	6,5	;volatile
  2594                           
  2595                           ;ADC_int.c: 83:             break;
  2596     039D  2BD1               	goto	l147
  2597     039E                     l1873:
  2598                           
  2599                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2600                           ; Switch size 1, requested type "simple"
  2601                           ; Number of cases is 1, Range of values is 0 to 0
  2602                           ; switch strategies available:
  2603                           ; Name         Instructions Cycles
  2604                           ; simple_byte            4     3 (average)
  2605                           ; direct_byte           11     8 (fixed)
  2606                           ; jumptable            260     6 (fixed)
  2607                           ;	Chosen strategy is simple_byte
  2608     039E  1283               	bcf	3,5	;RP0=0, select bank0
  2609     039F  1303               	bcf	3,6	;RP1=0, select bank0
  2610     03A0  0841               	movf	setup_ADC@channel+1,w
  2611     03A1  3A00               	xorlw	0	; case 0
  2612     03A2  1903               	skipnz
  2613     03A3  2BA5               	goto	l2783
  2614     03A4  2BD1               	goto	l147
  2615     03A5                     l2783:
  2616                           
  2617                           ; Switch size 1, requested type "simple"
  2618                           ; Number of cases is 14, Range of values is 0 to 13
  2619                           ; switch strategies available:
  2620                           ; Name         Instructions Cycles
  2621                           ; simple_byte           43    22 (average)
  2622                           ; direct_byte           50     8 (fixed)
  2623                           ; jumptable            260     6 (fixed)
  2624                           ;	Chosen strategy is simple_byte
  2625     03A5  0840               	movf	setup_ADC@channel,w
  2626     03A6  3A00               	xorlw	0	; case 0
  2627     03A7  1903               	skipnz
  2628     03A8  2B08               	goto	l132
  2629     03A9  3A01               	xorlw	1	; case 1
  2630     03AA  1903               	skipnz
  2631     03AB  2B0F               	goto	l1793
  2632     03AC  3A03               	xorlw	3	; case 2
  2633     03AD  1903               	skipnz
  2634     03AE  2B1A               	goto	l1799
  2635     03AF  3A01               	xorlw	1	; case 3
  2636     03B0  1903               	skipnz
  2637     03B1  2B25               	goto	l1805
  2638     03B2  3A07               	xorlw	7	; case 4
  2639     03B3  1903               	skipnz
  2640     03B4  2B30               	goto	l1811
  2641     03B5  3A01               	xorlw	1	; case 5
  2642     03B6  1903               	skipnz
  2643     03B7  2B3B               	goto	l1817
  2644     03B8  3A03               	xorlw	3	; case 6
  2645     03B9  1903               	skipnz
  2646     03BA  2B46               	goto	l1823
  2647     03BB  3A01               	xorlw	1	; case 7
  2648     03BC  1903               	skipnz
  2649     03BD  2B51               	goto	l1829
  2650     03BE  3A0F               	xorlw	15	; case 8
  2651     03BF  1903               	skipnz
  2652     03C0  2B5C               	goto	l1835
  2653     03C1  3A01               	xorlw	1	; case 9
  2654     03C2  1903               	skipnz
  2655     03C3  2B67               	goto	l1841
  2656     03C4  3A03               	xorlw	3	; case 10
  2657     03C5  1903               	skipnz
  2658     03C6  2B72               	goto	l1847
  2659     03C7  3A01               	xorlw	1	; case 11
  2660     03C8  1903               	skipnz
  2661     03C9  2B7D               	goto	l1853
  2662     03CA  3A07               	xorlw	7	; case 12
  2663     03CB  1903               	skipnz
  2664     03CC  2B88               	goto	l1859
  2665     03CD  3A01               	xorlw	1	; case 13
  2666     03CE  1903               	skipnz
  2667     03CF  2B93               	goto	l1865
  2668     03D0  2BD1               	goto	l147
  2669     03D1                     l147:
  2670     03D1  0008               	return
  2671     03D2                     __end_of_setup_ADC:
  2672                           
  2673                           	psect	text6
  2674     0FC5                     __ptext6:	
  2675 ;; *************** function _UART_config *****************
  2676 ;; Defined at:
  2677 ;;		line 12 in file "UART.c"
  2678 ;; Parameters:    Size  Location     Type
  2679 ;;  baudrate        2   32[BANK0 ] unsigned int 
  2680 ;;  fosc            4   34[BANK0 ] long 
  2681 ;;  conection       1   38[BANK0 ] enum E1349
  2682 ;; Auto vars:     Size  Location     Type
  2683 ;;		None
  2684 ;; Return value:  Size  Location     Type
  2685 ;;                  1    wreg      void 
  2686 ;; Registers used:
  2687 ;;		wreg, fsr0l, fsr0h, status,2, status,0
  2688 ;; Tracked objects:
  2689 ;;		On entry : 0/0
  2690 ;;		On exit  : 0/0
  2691 ;;		Unchanged: 0/0
  2692 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2693 ;;      Params:         0       7       0       0       0
  2694 ;;      Locals:         0       0       0       0       0
  2695 ;;      Temps:          0       0       2       0       0
  2696 ;;      Totals:         0       7       2       0       0
  2697 ;;Total ram usage:        9 bytes
  2698 ;; Hardware stack levels used: 1
  2699 ;; Hardware stack levels required when called: 3
  2700 ;; This function calls:
  2701 ;;		Nothing
  2702 ;; This function is called by:
  2703 ;;		_setup
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707     0FC5                     _UART_config:	
  2708                           ;psect for function _UART_config
  2709                           
  2710     0FC5                     l2469:	
  2711                           ;incstack = 0
  2712                           ; Regs used in _UART_config: [wreg-fsr0h+status,2+status,0]
  2713                           
  2714                           
  2715                           ;UART.c: 18:     SPBRG = 25;
  2716     0FC5  3019               	movlw	25
  2717     0FC6  1683               	bsf	3,5	;RP0=1, select bank1
  2718     0FC7  1303               	bcf	3,6	;RP1=0, select bank1
  2719     0FC8  0099               	movwf	25	;volatile
  2720     0FC9                     l2471:
  2721                           
  2722                           ;UART.c: 19:     SPBRGH = 0;
  2723     0FC9  019A               	clrf	26	;volatile
  2724     0FCA                     l2473:
  2725                           
  2726                           ;UART.c: 20:     BAUDCTL = 0B00001000;
  2727     0FCA  3008               	movlw	8
  2728     0FCB  1683               	bsf	3,5	;RP0=1, select bank3
  2729     0FCC  1703               	bsf	3,6	;RP1=1, select bank3
  2730     0FCD  0087               	movwf	7	;volatile
  2731                           
  2732                           ;UART.c: 22:     switch (conection){
  2733     0FCE  2FE8               	goto	l2487
  2734     0FCF                     l2475:
  2735                           
  2736                           ;UART.c: 24:             RCSTA = 0B10010000;
  2737     0FCF  3090               	movlw	144
  2738     0FD0  1283               	bcf	3,5	;RP0=0, select bank0
  2739     0FD1  1303               	bcf	3,6	;RP1=0, select bank0
  2740     0FD2  0098               	movwf	24	;volatile
  2741     0FD3                     l2477:
  2742                           
  2743                           ;UART.c: 25:             TXSTA = 0B00000000;
  2744     0FD3  1683               	bsf	3,5	;RP0=1, select bank1
  2745     0FD4  1303               	bcf	3,6	;RP1=0, select bank1
  2746     0FD5  0198               	clrf	24	;volatile
  2747                           
  2748                           ;UART.c: 26:             break;
  2749     0FD6  2FFF               	goto	l280
  2750     0FD7                     l2479:
  2751                           
  2752                           ;UART.c: 28:             RCSTA = 0B00000000;
  2753     0FD7  1283               	bcf	3,5	;RP0=0, select bank0
  2754     0FD8  1303               	bcf	3,6	;RP1=0, select bank0
  2755     0FD9  0198               	clrf	24	;volatile
  2756     0FDA                     l2481:
  2757                           
  2758                           ;UART.c: 29:             TXSTA = 0B00100100;
  2759     0FDA  3024               	movlw	36
  2760     0FDB  1683               	bsf	3,5	;RP0=1, select bank1
  2761     0FDC  1303               	bcf	3,6	;RP1=0, select bank1
  2762     0FDD  0098               	movwf	24	;volatile
  2763                           
  2764                           ;UART.c: 30:             break;
  2765     0FDE  2FFF               	goto	l280
  2766     0FDF                     l2483:
  2767                           
  2768                           ;UART.c: 32:             RCSTA = 0B10010000;
  2769     0FDF  3090               	movlw	144
  2770     0FE0  1283               	bcf	3,5	;RP0=0, select bank0
  2771     0FE1  1303               	bcf	3,6	;RP1=0, select bank0
  2772     0FE2  0098               	movwf	24	;volatile
  2773                           
  2774                           ;UART.c: 33:             TXSTA = 0B00100100;
  2775     0FE3  3024               	movlw	36
  2776     0FE4  1683               	bsf	3,5	;RP0=1, select bank1
  2777     0FE5  1303               	bcf	3,6	;RP1=0, select bank1
  2778     0FE6  0098               	movwf	24	;volatile
  2779                           
  2780                           ;UART.c: 34:             break;
  2781     0FE7  2FFF               	goto	l280
  2782     0FE8                     l2487:
  2783     0FE8  1283               	bcf	3,5	;RP0=0, select bank0
  2784     0FE9  1303               	bcf	3,6	;RP1=0, select bank0
  2785     0FEA  0846               	movf	UART_config@conection,w
  2786     0FEB  1683               	bsf	3,5	;RP0=1, select bank1
  2787     0FEC  1303               	bcf	3,6	;RP1=0, select bank1
  2788     0FED  00A0               	movwf	??_UART_config^(0+128)
  2789     0FEE  01A1               	clrf	(??_UART_config^(0+128)+1)
  2790                           
  2791                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2792                           ; Switch size 1, requested type "simple"
  2793                           ; Number of cases is 1, Range of values is 0 to 0
  2794                           ; switch strategies available:
  2795                           ; Name         Instructions Cycles
  2796                           ; simple_byte            4     3 (average)
  2797                           ; direct_byte           11     8 (fixed)
  2798                           ; jumptable            260     6 (fixed)
  2799                           ;	Chosen strategy is simple_byte
  2800     0FEF  0821               	movf	(??_UART_config+1)^(0+128),w
  2801     0FF0  3A00               	xorlw	0	; case 0
  2802     0FF1  1903               	skipnz
  2803     0FF2  2FF4               	goto	l2785
  2804     0FF3  2FFF               	goto	l280
  2805     0FF4                     l2785:
  2806                           
  2807                           ; Switch size 1, requested type "simple"
  2808                           ; Number of cases is 3, Range of values is 0 to 2
  2809                           ; switch strategies available:
  2810                           ; Name         Instructions Cycles
  2811                           ; simple_byte           10     6 (average)
  2812                           ; direct_byte           17     8 (fixed)
  2813                           ; jumptable            260     6 (fixed)
  2814                           ;	Chosen strategy is simple_byte
  2815     0FF4  0820               	movf	??_UART_config^(0+128),w
  2816     0FF5  3A00               	xorlw	0	; case 0
  2817     0FF6  1903               	skipnz
  2818     0FF7  2FCF               	goto	l2475
  2819     0FF8  3A01               	xorlw	1	; case 1
  2820     0FF9  1903               	skipnz
  2821     0FFA  2FD7               	goto	l2479
  2822     0FFB  3A03               	xorlw	3	; case 2
  2823     0FFC  1903               	skipnz
  2824     0FFD  2FDF               	goto	l2483
  2825     0FFE  2FFF               	goto	l280
  2826     0FFF                     l280:
  2827     0FFF  0008               	return
  2828     1000                     __end_of_UART_config:
  2829                           
  2830                           	psect	text7
  2831     0F65                     __ptext7:	
  2832 ;; *************** function _UART_write_string *****************
  2833 ;; Defined at:
  2834 ;;		line 47 in file "UART.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;  txt             1    wreg     PTR unsigned char 
  2837 ;;		 -> STR_3(17), STR_2(23), 
  2838 ;; Auto vars:     Size  Location     Type
  2839 ;;  txt             1   36[BANK0 ] PTR unsigned char 
  2840 ;;		 -> STR_3(17), STR_2(23), 
  2841 ;;  i               1   35[BANK0 ] unsigned char 
  2842 ;; Return value:  Size  Location     Type
  2843 ;;                  1    wreg      void 
  2844 ;; Registers used:
  2845 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  2846 ;; Tracked objects:
  2847 ;;		On entry : 0/0
  2848 ;;		On exit  : 0/0
  2849 ;;		Unchanged: 0/0
  2850 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2851 ;;      Params:         0       0       0       0       0
  2852 ;;      Locals:         0       2       0       0       0
  2853 ;;      Temps:          0       1       0       0       0
  2854 ;;      Totals:         0       3       0       0       0
  2855 ;;Total ram usage:        3 bytes
  2856 ;; Hardware stack levels used: 1
  2857 ;; Hardware stack levels required when called: 4
  2858 ;; This function calls:
  2859 ;;		_UART_write_char
  2860 ;; This function is called by:
  2861 ;;		_main
  2862 ;; This function uses a non-reentrant model
  2863 ;;
  2864                           
  2865     0F65                     _UART_write_string:	
  2866                           ;psect for function _UART_write_string
  2867                           
  2868                           
  2869                           ;incstack = 0
  2870                           ; Regs used in _UART_write_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  2871                           ;UART_write_string@txt stored from wreg
  2872     0F65  1283               	bcf	3,5	;RP0=0, select bank0
  2873     0F66  1303               	bcf	3,6	;RP1=0, select bank0
  2874     0F67  00C4               	movwf	UART_write_string@txt
  2875     0F68                     l2195:
  2876                           
  2877                           ;UART.c: 48:     for (uint8_t i = 0; txt[i] != '\0'; i++){
  2878     0F68  01C3               	clrf	UART_write_string@i
  2879     0F69  2F7D               	goto	l2201
  2880     0F6A                     l2197:
  2881                           
  2882                           ;UART.c: 49:         UART_write_char(txt[i]);
  2883     0F6A  0843               	movf	UART_write_string@i,w
  2884     0F6B  0744               	addwf	UART_write_string@txt,w
  2885     0F6C  0084               	movwf	4
  2886     0F6D  120A  118A  260A  120A  158A  	fcall	stringdir
  2887     0F72  120A  158A  2701  120A  158A  	fcall	_UART_write_char
  2888     0F77                     l2199:
  2889                           
  2890                           ;UART.c: 50:     }
  2891     0F77  3001               	movlw	1
  2892     0F78  1283               	bcf	3,5	;RP0=0, select bank0
  2893     0F79  1303               	bcf	3,6	;RP1=0, select bank0
  2894     0F7A  00C2               	movwf	??_UART_write_string
  2895     0F7B  0842               	movf	??_UART_write_string,w
  2896     0F7C  07C3               	addwf	UART_write_string@i,f
  2897     0F7D                     l2201:
  2898     0F7D  0843               	movf	UART_write_string@i,w
  2899     0F7E  0744               	addwf	UART_write_string@txt,w
  2900     0F7F  0084               	movwf	4
  2901     0F80  120A  118A  260A  120A  158A  	fcall	stringdir
  2902     0F85  3A00               	xorlw	0
  2903     0F86  1D03               	skipz
  2904     0F87  2F89               	goto	u1551
  2905     0F88  2F8A               	goto	u1550
  2906     0F89                     u1551:
  2907     0F89  2F6A               	goto	l2197
  2908     0F8A                     u1550:
  2909     0F8A                     l290:
  2910     0F8A  0008               	return
  2911     0F8B                     __end_of_UART_write_string:
  2912                           
  2913                           	psect	text8
  2914     0F01                     __ptext8:	
  2915 ;; *************** function _UART_write_char *****************
  2916 ;; Defined at:
  2917 ;;		line 39 in file "UART.c"
  2918 ;; Parameters:    Size  Location     Type
  2919 ;;  a               1    wreg     unsigned char 
  2920 ;; Auto vars:     Size  Location     Type
  2921 ;;  a               1   33[BANK0 ] unsigned char 
  2922 ;; Return value:  Size  Location     Type
  2923 ;;                  1    wreg      void 
  2924 ;; Registers used:
  2925 ;;		wreg
  2926 ;; Tracked objects:
  2927 ;;		On entry : 0/0
  2928 ;;		On exit  : 0/0
  2929 ;;		Unchanged: 0/0
  2930 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2931 ;;      Params:         0       0       0       0       0
  2932 ;;      Locals:         0       1       0       0       0
  2933 ;;      Temps:          0       1       0       0       0
  2934 ;;      Totals:         0       2       0       0       0
  2935 ;;Total ram usage:        2 bytes
  2936 ;; Hardware stack levels used: 1
  2937 ;; Hardware stack levels required when called: 3
  2938 ;; This function calls:
  2939 ;;		Nothing
  2940 ;; This function is called by:
  2941 ;;		_UART_write_string
  2942 ;; This function uses a non-reentrant model
  2943 ;;
  2944                           
  2945     0F01                     _UART_write_char:	
  2946                           ;psect for function _UART_write_char
  2947                           
  2948                           
  2949                           ;incstack = 0
  2950                           ; Regs used in _UART_write_char: [wreg]
  2951                           ;UART_write_char@a stored from wreg
  2952     0F01  1283               	bcf	3,5	;RP0=0, select bank0
  2953     0F02  1303               	bcf	3,6	;RP1=0, select bank0
  2954     0F03  00C1               	movwf	UART_write_char@a
  2955     0F04                     l1923:
  2956                           
  2957                           ;UART.c: 40:     if (PIR1bits.TXIF){
  2958     0F04  1E0C               	btfss	12,4	;volatile
  2959     0F05  2F07               	goto	u1061
  2960     0F06  2F08               	goto	u1060
  2961     0F07                     u1061:
  2962     0F07  2F11               	goto	l284
  2963     0F08                     u1060:
  2964     0F08                     l1925:
  2965                           
  2966                           ;UART.c: 41:         TXREG = a;
  2967     0F08  0841               	movf	UART_write_char@a,w
  2968     0F09  0099               	movwf	25	;volatile
  2969                           
  2970                           ;UART.c: 42:         _delay((unsigned long)((1)*(1000000/4000.0)));
  2971     0F0A  3052               	movlw	82
  2972     0F0B  1283               	bcf	3,5	;RP0=0, select bank0
  2973     0F0C  1303               	bcf	3,6	;RP1=0, select bank0
  2974     0F0D  00C0               	movwf	??_UART_write_char
  2975     0F0E                     u2127:
  2976     0F0E  0BC0               	decfsz	??_UART_write_char,f
  2977     0F0F  2F0E               	goto	u2127
  2978     0F10  0000               	nop
  2979     0F11                     l284:
  2980     0F11  0008               	return
  2981     0F12                     __end_of_UART_write_char:
  2982                           
  2983                           	psect	text9
  2984     04F4                     __ptext9:	
  2985 ;; *************** function _Lcd_Write_String *****************
  2986 ;; Defined at:
  2987 ;;		line 118 in file "LCD.c"
  2988 ;; Parameters:    Size  Location     Type
  2989 ;;  a               2   35[BANK0 ] PTR unsigned char 
  2990 ;;		 -> charcontador(2), STR_5(9), STR_4(5), ncADC(4), 
  2991 ;; Auto vars:     Size  Location     Type
  2992 ;;  i               2   37[BANK0 ] int 
  2993 ;; Return value:  Size  Location     Type
  2994 ;;                  1    wreg      void 
  2995 ;; Registers used:
  2996 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2997 ;; Tracked objects:
  2998 ;;		On entry : 0/0
  2999 ;;		On exit  : 0/0
  3000 ;;		Unchanged: 0/0
  3001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3002 ;;      Params:         0       2       0       0       0
  3003 ;;      Locals:         0       2       0       0       0
  3004 ;;      Temps:          0       0       3       0       0
  3005 ;;      Totals:         0       4       3       0       0
  3006 ;;Total ram usage:        7 bytes
  3007 ;; Hardware stack levels used: 1
  3008 ;; Hardware stack levels required when called: 5
  3009 ;; This function calls:
  3010 ;;		_Lcd_Write_Char
  3011 ;; This function is called by:
  3012 ;;		_main
  3013 ;; This function uses a non-reentrant model
  3014 ;;
  3015                           
  3016     04F4                     _Lcd_Write_String:	
  3017                           ;psect for function _Lcd_Write_String
  3018                           
  3019     04F4                     l2635:	
  3020                           ;incstack = 0
  3021                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3022                           
  3023                           
  3024                           ;LCD.c: 119:     int i;;LCD.c: 120:     for (i = 0; a[i] != '\0'; i++)
  3025     04F4  1283               	bcf	3,5	;RP0=0, select bank0
  3026     04F5  1303               	bcf	3,6	;RP1=0, select bank0
  3027     04F6  01C5               	clrf	Lcd_Write_String@i
  3028     04F7  01C6               	clrf	Lcd_Write_String@i+1
  3029     04F8  2D2D               	goto	l2641
  3030     04F9                     l2637:
  3031                           
  3032                           ;LCD.c: 121:         Lcd_Write_Char(a[i]);
  3033     04F9  0845               	movf	Lcd_Write_String@i,w
  3034     04FA  0743               	addwf	Lcd_Write_String@a,w
  3035     04FB  1683               	bsf	3,5	;RP0=1, select bank1
  3036     04FC  1303               	bcf	3,6	;RP1=0, select bank1
  3037     04FD  00A1               	movwf	(??_Lcd_Write_String+1)^(0+128)
  3038     04FE  1283               	bcf	3,5	;RP0=0, select bank0
  3039     04FF  1303               	bcf	3,6	;RP1=0, select bank0
  3040     0500  0844               	movf	Lcd_Write_String@a+1,w
  3041     0501  1683               	bsf	3,5	;RP0=1, select bank1
  3042     0502  1303               	bcf	3,6	;RP1=0, select bank1
  3043     0503  00A0               	movwf	??_Lcd_Write_String^(0+128)
  3044     0504  1803               	skipnc
  3045     0505  0AA0               	incf	??_Lcd_Write_String^(0+128),f
  3046     0506  1283               	bcf	3,5	;RP0=0, select bank0
  3047     0507  1303               	bcf	3,6	;RP1=0, select bank0
  3048     0508  1FC5               	btfss	Lcd_Write_String@i,7
  3049     0509  2D0D               	goto	u2010
  3050     050A  1683               	bsf	3,5	;RP0=1, select bank1
  3051     050B  1303               	bcf	3,6	;RP1=0, select bank1
  3052     050C  03A0               	decf	??_Lcd_Write_String^(0+128),f
  3053     050D                     u2010:
  3054     050D  1683               	bsf	3,5	;RP0=1, select bank1
  3055     050E  1303               	bcf	3,6	;RP1=0, select bank1
  3056     050F  0820               	movf	??_Lcd_Write_String^(0+128),w
  3057     0510  00A2               	movwf	((??_Lcd_Write_String+1)^(0+128)+1)
  3058     0511  0822               	movf	(??_Lcd_Write_String+2)^(0+128),w
  3059     0512  1283               	bcf	3,5	;RP0=0, select bank0
  3060     0513  1303               	bcf	3,6	;RP1=0, select bank0
  3061     0514  00FF               	movwf	btemp+1
  3062     0515  1683               	bsf	3,5	;RP0=1, select bank1
  3063     0516  1303               	bcf	3,6	;RP1=0, select bank1
  3064     0517  0821               	movf	(??_Lcd_Write_String+1)^(0+128),w
  3065     0518  0084               	movwf	4
  3066     0519  1283               	bcf	3,5	;RP0=0, select bank0
  3067     051A  1303               	bcf	3,6	;RP1=0, select bank0
  3068     051B  120A  118A  2600  120A  118A  	fcall	stringtab
  3069     0520  120A  158A  2712  120A  118A  	fcall	_Lcd_Write_Char
  3070     0525                     l2639:
  3071     0525  3001               	movlw	1
  3072     0526  1283               	bcf	3,5	;RP0=0, select bank0
  3073     0527  1303               	bcf	3,6	;RP1=0, select bank0
  3074     0528  07C5               	addwf	Lcd_Write_String@i,f
  3075     0529  1803               	skipnc
  3076     052A  0AC6               	incf	Lcd_Write_String@i+1,f
  3077     052B  3000               	movlw	0
  3078     052C  07C6               	addwf	Lcd_Write_String@i+1,f
  3079     052D                     l2641:
  3080     052D  0845               	movf	Lcd_Write_String@i,w
  3081     052E  0743               	addwf	Lcd_Write_String@a,w
  3082     052F  1683               	bsf	3,5	;RP0=1, select bank1
  3083     0530  1303               	bcf	3,6	;RP1=0, select bank1
  3084     0531  00A1               	movwf	(??_Lcd_Write_String+1)^(0+128)
  3085     0532  1283               	bcf	3,5	;RP0=0, select bank0
  3086     0533  1303               	bcf	3,6	;RP1=0, select bank0
  3087     0534  0844               	movf	Lcd_Write_String@a+1,w
  3088     0535  1683               	bsf	3,5	;RP0=1, select bank1
  3089     0536  1303               	bcf	3,6	;RP1=0, select bank1
  3090     0537  00A0               	movwf	??_Lcd_Write_String^(0+128)
  3091     0538  1803               	skipnc
  3092     0539  0AA0               	incf	??_Lcd_Write_String^(0+128),f
  3093     053A  1283               	bcf	3,5	;RP0=0, select bank0
  3094     053B  1303               	bcf	3,6	;RP1=0, select bank0
  3095     053C  1FC5               	btfss	Lcd_Write_String@i,7
  3096     053D  2D41               	goto	u2020
  3097     053E  1683               	bsf	3,5	;RP0=1, select bank1
  3098     053F  1303               	bcf	3,6	;RP1=0, select bank1
  3099     0540  03A0               	decf	??_Lcd_Write_String^(0+128),f
  3100     0541                     u2020:
  3101     0541  1683               	bsf	3,5	;RP0=1, select bank1
  3102     0542  1303               	bcf	3,6	;RP1=0, select bank1
  3103     0543  0820               	movf	??_Lcd_Write_String^(0+128),w
  3104     0544  00A2               	movwf	((??_Lcd_Write_String+1)^(0+128)+1)
  3105     0545  0822               	movf	(??_Lcd_Write_String+2)^(0+128),w
  3106     0546  1283               	bcf	3,5	;RP0=0, select bank0
  3107     0547  1303               	bcf	3,6	;RP1=0, select bank0
  3108     0548  00FF               	movwf	btemp+1
  3109     0549  1683               	bsf	3,5	;RP0=1, select bank1
  3110     054A  1303               	bcf	3,6	;RP1=0, select bank1
  3111     054B  0821               	movf	(??_Lcd_Write_String+1)^(0+128),w
  3112     054C  0084               	movwf	4
  3113     054D  1283               	bcf	3,5	;RP0=0, select bank0
  3114     054E  1303               	bcf	3,6	;RP1=0, select bank0
  3115     054F  120A  118A  2600  120A  118A  	fcall	stringtab
  3116     0554  3A00               	xorlw	0
  3117     0555  1D03               	skipz
  3118     0556  2D58               	goto	u2031
  3119     0557  2D59               	goto	u2030
  3120     0558                     u2031:
  3121     0558  2CF9               	goto	l2637
  3122     0559                     u2030:
  3123     0559                     l248:
  3124     0559  0008               	return
  3125     055A                     __end_of_Lcd_Write_String:
  3126                           
  3127                           	psect	text10
  3128     0F12                     __ptext10:	
  3129 ;; *************** function _Lcd_Write_Char *****************
  3130 ;; Defined at:
  3131 ;;		line 110 in file "LCD.c"
  3132 ;; Parameters:    Size  Location     Type
  3133 ;;  a               1    wreg     unsigned char 
  3134 ;; Auto vars:     Size  Location     Type
  3135 ;;  a               1   34[BANK0 ] unsigned char 
  3136 ;; Return value:  Size  Location     Type
  3137 ;;                  1    wreg      void 
  3138 ;; Registers used:
  3139 ;;		wreg, status,2, status,0, pclath, cstack
  3140 ;; Tracked objects:
  3141 ;;		On entry : 0/0
  3142 ;;		On exit  : 0/0
  3143 ;;		Unchanged: 0/0
  3144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3145 ;;      Params:         0       0       0       0       0
  3146 ;;      Locals:         0       1       0       0       0
  3147 ;;      Temps:          0       1       0       0       0
  3148 ;;      Totals:         0       2       0       0       0
  3149 ;;Total ram usage:        2 bytes
  3150 ;; Hardware stack levels used: 1
  3151 ;; Hardware stack levels required when called: 4
  3152 ;; This function calls:
  3153 ;;		_Lcd_Port
  3154 ;; This function is called by:
  3155 ;;		_Lcd_Write_String
  3156 ;; This function uses a non-reentrant model
  3157 ;;
  3158                           
  3159     0F12                     _Lcd_Write_Char:	
  3160                           ;psect for function _Lcd_Write_Char
  3161                           
  3162                           
  3163                           ;incstack = 0
  3164                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  3165                           ;Lcd_Write_Char@a stored from wreg
  3166     0F12  1283               	bcf	3,5	;RP0=0, select bank0
  3167     0F13  1303               	bcf	3,6	;RP1=0, select bank0
  3168     0F14  00C2               	movwf	Lcd_Write_Char@a
  3169     0F15                     l1913:
  3170                           
  3171                           ;LCD.c: 111:     PORTDbits.RD6 = 1;
  3172     0F15  1708               	bsf	8,6	;volatile
  3173     0F16                     l1915:
  3174                           
  3175                           ;LCD.c: 112:     Lcd_Port(a);
  3176     0F16  0842               	movf	Lcd_Write_Char@a,w
  3177     0F17  120A  118A  27C0  120A  158A  	fcall	_Lcd_Port
  3178     0F1C                     l1917:
  3179                           
  3180                           ;LCD.c: 113:     PORTDbits.RD7 = 1;
  3181     0F1C  1283               	bcf	3,5	;RP0=0, select bank0
  3182     0F1D  1303               	bcf	3,6	;RP1=0, select bank0
  3183     0F1E  1788               	bsf	8,7	;volatile
  3184     0F1F                     l1919:
  3185                           
  3186                           ;LCD.c: 114:     _delay((unsigned long)((40)*(1000000/4000000.0)));
  3187     0F1F  3002               	movlw	2
  3188     0F20  1283               	bcf	3,5	;RP0=0, select bank0
  3189     0F21  1303               	bcf	3,6	;RP1=0, select bank0
  3190     0F22  00C1               	movwf	??_Lcd_Write_Char
  3191     0F23                     u2137:
  3192     0F23  0BC1               	decfsz	??_Lcd_Write_Char,f
  3193     0F24  2F23               	goto	u2137
  3194     0F25  0000               	nop
  3195     0F26                     l1921:
  3196                           
  3197                           ;LCD.c: 115:     PORTDbits.RD7 = 0;
  3198     0F26  1283               	bcf	3,5	;RP0=0, select bank0
  3199     0F27  1303               	bcf	3,6	;RP1=0, select bank0
  3200     0F28  1388               	bcf	8,7	;volatile
  3201     0F29                     l242:
  3202     0F29  0008               	return
  3203     0F2A                     __end_of_Lcd_Write_Char:
  3204                           
  3205                           	psect	text11
  3206     0F43                     __ptext11:	
  3207 ;; *************** function _Lcd_Set_Cursor *****************
  3208 ;; Defined at:
  3209 ;;		line 71 in file "LCD.c"
  3210 ;; Parameters:    Size  Location     Type
  3211 ;;  a               1    wreg     unsigned char 
  3212 ;;  b               1   35[BANK0 ] unsigned char 
  3213 ;; Auto vars:     Size  Location     Type
  3214 ;;  a               1   36[BANK0 ] unsigned char 
  3215 ;;  temp            1   37[BANK0 ] unsigned char 
  3216 ;; Return value:  Size  Location     Type
  3217 ;;                  1    wreg      void 
  3218 ;; Registers used:
  3219 ;;		wreg, status,2, status,0, pclath, cstack
  3220 ;; Tracked objects:
  3221 ;;		On entry : 0/0
  3222 ;;		On exit  : 0/0
  3223 ;;		Unchanged: 0/0
  3224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3225 ;;      Params:         0       1       0       0       0
  3226 ;;      Locals:         0       2       0       0       0
  3227 ;;      Temps:          0       0       0       0       0
  3228 ;;      Totals:         0       3       0       0       0
  3229 ;;Total ram usage:        3 bytes
  3230 ;; Hardware stack levels used: 1
  3231 ;; Hardware stack levels required when called: 5
  3232 ;; This function calls:
  3233 ;;		_Lcd_Cmd
  3234 ;; This function is called by:
  3235 ;;		_main
  3236 ;; This function uses a non-reentrant model
  3237 ;;
  3238                           
  3239     0F43                     _Lcd_Set_Cursor:	
  3240                           ;psect for function _Lcd_Set_Cursor
  3241                           
  3242                           
  3243                           ;incstack = 0
  3244                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  3245                           ;Lcd_Set_Cursor@a stored from wreg
  3246     0F43  1283               	bcf	3,5	;RP0=0, select bank0
  3247     0F44  1303               	bcf	3,6	;RP1=0, select bank0
  3248     0F45  00C4               	movwf	Lcd_Set_Cursor@a
  3249     0F46                     l2203:
  3250                           
  3251                           ;LCD.c: 72:     char temp;;LCD.c: 73:     if (a == 1) {
  3252     0F46  0344               	decf	Lcd_Set_Cursor@a,w
  3253     0F47  1D03               	btfss	3,2
  3254     0F48  2F4A               	goto	u1561
  3255     0F49  2F4B               	goto	u1560
  3256     0F4A                     u1561:
  3257     0F4A  2F55               	goto	l2209
  3258     0F4B                     u1560:
  3259     0F4B                     l2205:
  3260                           
  3261                           ;LCD.c: 74:         temp = 0x80 + b - 1;
  3262     0F4B  0843               	movf	Lcd_Set_Cursor@b,w
  3263     0F4C  3E7F               	addlw	127
  3264     0F4D  00C5               	movwf	Lcd_Set_Cursor@temp
  3265     0F4E                     l2207:
  3266                           
  3267                           ;LCD.c: 75:         Lcd_Cmd(temp);
  3268     0F4E  0845               	movf	Lcd_Set_Cursor@temp,w
  3269     0F4F  120A  158A  272A  120A  158A  	fcall	_Lcd_Cmd
  3270                           
  3271                           ;LCD.c: 76:     } else if (a == 2) {
  3272     0F54  2F64               	goto	l236
  3273     0F55                     l2209:
  3274     0F55  3002               	movlw	2
  3275     0F56  0644               	xorwf	Lcd_Set_Cursor@a,w
  3276     0F57  1D03               	btfss	3,2
  3277     0F58  2F5A               	goto	u1571
  3278     0F59  2F5B               	goto	u1570
  3279     0F5A                     u1571:
  3280     0F5A  2F64               	goto	l236
  3281     0F5B                     u1570:
  3282     0F5B                     l2211:
  3283                           
  3284                           ;LCD.c: 77:         temp = 0xC0 + b - 1;
  3285     0F5B  0843               	movf	Lcd_Set_Cursor@b,w
  3286     0F5C  3EBF               	addlw	191
  3287     0F5D  00C5               	movwf	Lcd_Set_Cursor@temp
  3288     0F5E                     l2213:
  3289                           
  3290                           ;LCD.c: 78:         Lcd_Cmd(temp);
  3291     0F5E  0845               	movf	Lcd_Set_Cursor@temp,w
  3292     0F5F  120A  158A  272A  120A  158A  	fcall	_Lcd_Cmd
  3293     0F64                     l236:
  3294     0F64  0008               	return
  3295     0F65                     __end_of_Lcd_Set_Cursor:
  3296                           
  3297                           	psect	text12
  3298     0653                     __ptext12:	
  3299 ;; *************** function _Lcd_Init *****************
  3300 ;; Defined at:
  3301 ;;		line 82 in file "LCD.c"
  3302 ;; Parameters:    Size  Location     Type
  3303 ;;		None
  3304 ;; Auto vars:     Size  Location     Type
  3305 ;;		None
  3306 ;; Return value:  Size  Location     Type
  3307 ;;                  1    wreg      void 
  3308 ;; Registers used:
  3309 ;;		wreg, status,2, status,0, pclath, cstack
  3310 ;; Tracked objects:
  3311 ;;		On entry : 0/0
  3312 ;;		On exit  : 0/0
  3313 ;;		Unchanged: 0/0
  3314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3315 ;;      Params:         0       0       0       0       0
  3316 ;;      Locals:         0       0       0       0       0
  3317 ;;      Temps:          0       2       0       0       0
  3318 ;;      Totals:         0       2       0       0       0
  3319 ;;Total ram usage:        2 bytes
  3320 ;; Hardware stack levels used: 1
  3321 ;; Hardware stack levels required when called: 5
  3322 ;; This function calls:
  3323 ;;		_Lcd_Cmd
  3324 ;;		_Lcd_Port
  3325 ;; This function is called by:
  3326 ;;		_main
  3327 ;; This function uses a non-reentrant model
  3328 ;;
  3329                           
  3330     0653                     _Lcd_Init:	
  3331                           ;psect for function _Lcd_Init
  3332                           
  3333     0653                     l2183:	
  3334                           ;incstack = 0
  3335                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  3336                           
  3337                           
  3338                           ;LCD.c: 83:     Lcd_Port(0x00);
  3339     0653  3000               	movlw	0
  3340     0654  120A  118A  27C0  120A  118A  	fcall	_Lcd_Port
  3341     0659                     l2185:
  3342                           
  3343                           ;LCD.c: 84:     _delay((unsigned long)((20)*(1000000/4000.0)));
  3344     0659  3007               	movlw	7
  3345     065A  1283               	bcf	3,5	;RP0=0, select bank0
  3346     065B  1303               	bcf	3,6	;RP1=0, select bank0
  3347     065C  00C4               	movwf	??_Lcd_Init+1
  3348     065D  307C               	movlw	124
  3349     065E  00C3               	movwf	??_Lcd_Init
  3350     065F                     u2147:
  3351     065F  0BC3               	decfsz	??_Lcd_Init,f
  3352     0660  2E5F               	goto	u2147
  3353     0661  0BC4               	decfsz	??_Lcd_Init+1,f
  3354     0662  2E5F               	goto	u2147
  3355     0663  0000               	nop
  3356     0664                     l2187:
  3357                           
  3358                           ;LCD.c: 85:     Lcd_Cmd(0x03);
  3359     0664  3003               	movlw	3
  3360     0665  120A  158A  272A  120A  118A  	fcall	_Lcd_Cmd
  3361                           
  3362                           ;LCD.c: 86:     _delay((unsigned long)((5)*(1000000/4000.0)));
  3363     066A  30F9               	movlw	249
  3364     066B  1283               	bcf	3,5	;RP0=0, select bank0
  3365     066C  1303               	bcf	3,6	;RP1=0, select bank0
  3366     066D  00C3               	movwf	??_Lcd_Init
  3367     066E                     u2157:
  3368     066E  2E6F               	nop2
  3369     066F  0BC3               	decfsz	??_Lcd_Init,f
  3370     0670  2E6E               	goto	u2157
  3371     0671  2E72               	nop2
  3372     0672                     l2189:
  3373                           
  3374                           ;LCD.c: 87:     Lcd_Cmd(0x03);
  3375     0672  3003               	movlw	3
  3376     0673  120A  158A  272A  120A  118A  	fcall	_Lcd_Cmd
  3377     0678                     l2191:
  3378                           
  3379                           ;LCD.c: 88:     _delay((unsigned long)((11)*(1000000/4000.0)));
  3380     0678  3004               	movlw	4
  3381     0679  1283               	bcf	3,5	;RP0=0, select bank0
  3382     067A  1303               	bcf	3,6	;RP1=0, select bank0
  3383     067B  00C4               	movwf	??_Lcd_Init+1
  3384     067C  3090               	movlw	144
  3385     067D  00C3               	movwf	??_Lcd_Init
  3386     067E                     u2167:
  3387     067E  0BC3               	decfsz	??_Lcd_Init,f
  3388     067F  2E7E               	goto	u2167
  3389     0680  0BC4               	decfsz	??_Lcd_Init+1,f
  3390     0681  2E7E               	goto	u2167
  3391     0682  0000               	nop
  3392                           
  3393                           ;LCD.c: 89:     Lcd_Cmd(0x03);
  3394     0683  3003               	movlw	3
  3395     0684  120A  158A  272A  120A  118A  	fcall	_Lcd_Cmd
  3396                           
  3397                           ;LCD.c: 93:     Lcd_Cmd(0b00111000);
  3398     0689  3038               	movlw	56
  3399     068A  120A  158A  272A  120A  118A  	fcall	_Lcd_Cmd
  3400                           
  3401                           ;LCD.c: 94:     Lcd_Cmd(0b00001100);
  3402     068F  300C               	movlw	12
  3403     0690  120A  158A  272A  120A  118A  	fcall	_Lcd_Cmd
  3404                           
  3405                           ;LCD.c: 95:     Lcd_Cmd(0b00000001);
  3406     0695  3001               	movlw	1
  3407     0696  120A  158A  272A  120A  118A  	fcall	_Lcd_Cmd
  3408                           
  3409                           ;LCD.c: 96:     Lcd_Cmd(0b00000110);
  3410     069B  3006               	movlw	6
  3411     069C  120A  158A  272A  120A  118A  	fcall	_Lcd_Cmd
  3412     06A1                     l239:
  3413     06A1  0008               	return
  3414     06A2                     __end_of_Lcd_Init:
  3415                           
  3416                           	psect	text13
  3417     0EF0                     __ptext13:	
  3418 ;; *************** function _Lcd_Clear *****************
  3419 ;; Defined at:
  3420 ;;		line 67 in file "LCD.c"
  3421 ;; Parameters:    Size  Location     Type
  3422 ;;		None
  3423 ;; Auto vars:     Size  Location     Type
  3424 ;;		None
  3425 ;; Return value:  Size  Location     Type
  3426 ;;                  1    wreg      void 
  3427 ;; Registers used:
  3428 ;;		wreg, status,2, status,0, pclath, cstack
  3429 ;; Tracked objects:
  3430 ;;		On entry : 0/0
  3431 ;;		On exit  : 0/0
  3432 ;;		Unchanged: 0/0
  3433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3434 ;;      Params:         0       0       0       0       0
  3435 ;;      Locals:         0       0       0       0       0
  3436 ;;      Temps:          0       0       0       0       0
  3437 ;;      Totals:         0       0       0       0       0
  3438 ;;Total ram usage:        0 bytes
  3439 ;; Hardware stack levels used: 1
  3440 ;; Hardware stack levels required when called: 5
  3441 ;; This function calls:
  3442 ;;		_Lcd_Cmd
  3443 ;; This function is called by:
  3444 ;;		_main
  3445 ;; This function uses a non-reentrant model
  3446 ;;
  3447                           
  3448     0EF0                     _Lcd_Clear:	
  3449                           ;psect for function _Lcd_Clear
  3450                           
  3451     0EF0                     l2193:	
  3452                           ;incstack = 0
  3453                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  3454                           
  3455                           
  3456                           ;LCD.c: 68:     Lcd_Cmd(1);
  3457     0EF0  3001               	movlw	1
  3458     0EF1  120A  158A  272A  120A  158A  	fcall	_Lcd_Cmd
  3459     0EF6                     l230:
  3460     0EF6  0008               	return
  3461     0EF7                     __end_of_Lcd_Clear:
  3462                           
  3463                           	psect	text14
  3464     0F2A                     __ptext14:	
  3465 ;; *************** function _Lcd_Cmd *****************
  3466 ;; Defined at:
  3467 ;;		line 59 in file "LCD.c"
  3468 ;; Parameters:    Size  Location     Type
  3469 ;;  a               1    wreg     unsigned char 
  3470 ;; Auto vars:     Size  Location     Type
  3471 ;;  a               1   34[BANK0 ] unsigned char 
  3472 ;; Return value:  Size  Location     Type
  3473 ;;                  1    wreg      void 
  3474 ;; Registers used:
  3475 ;;		wreg, status,2, status,0, pclath, cstack
  3476 ;; Tracked objects:
  3477 ;;		On entry : 0/0
  3478 ;;		On exit  : 0/0
  3479 ;;		Unchanged: 0/0
  3480 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3481 ;;      Params:         0       0       0       0       0
  3482 ;;      Locals:         0       1       0       0       0
  3483 ;;      Temps:          0       1       0       0       0
  3484 ;;      Totals:         0       2       0       0       0
  3485 ;;Total ram usage:        2 bytes
  3486 ;; Hardware stack levels used: 1
  3487 ;; Hardware stack levels required when called: 4
  3488 ;; This function calls:
  3489 ;;		_Lcd_Port
  3490 ;; This function is called by:
  3491 ;;		_Lcd_Clear
  3492 ;;		_Lcd_Set_Cursor
  3493 ;;		_Lcd_Init
  3494 ;;		_Lcd_Shift_Right
  3495 ;;		_Lcd_Shift_Left
  3496 ;; This function uses a non-reentrant model
  3497 ;;
  3498                           
  3499     0F2A                     _Lcd_Cmd:	
  3500                           ;psect for function _Lcd_Cmd
  3501                           
  3502                           
  3503                           ;incstack = 0
  3504                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  3505                           ;Lcd_Cmd@a stored from wreg
  3506     0F2A  1283               	bcf	3,5	;RP0=0, select bank0
  3507     0F2B  1303               	bcf	3,6	;RP1=0, select bank0
  3508     0F2C  00C2               	movwf	Lcd_Cmd@a
  3509     0F2D                     l1903:
  3510                           
  3511                           ;LCD.c: 60:     PORTDbits.RD6 = 0;
  3512     0F2D  1308               	bcf	8,6	;volatile
  3513     0F2E                     l1905:
  3514                           
  3515                           ;LCD.c: 61:     Lcd_Port(a);
  3516     0F2E  0842               	movf	Lcd_Cmd@a,w
  3517     0F2F  120A  118A  27C0  120A  158A  	fcall	_Lcd_Port
  3518     0F34                     l1907:
  3519                           
  3520                           ;LCD.c: 62:     PORTDbits.RD7 = 1;
  3521     0F34  1283               	bcf	3,5	;RP0=0, select bank0
  3522     0F35  1303               	bcf	3,6	;RP1=0, select bank0
  3523     0F36  1788               	bsf	8,7	;volatile
  3524     0F37                     l1909:
  3525                           
  3526                           ;LCD.c: 63:     _delay((unsigned long)((4)*(1000000/4000.0)));
  3527     0F37  30C7               	movlw	199
  3528     0F38  1283               	bcf	3,5	;RP0=0, select bank0
  3529     0F39  1303               	bcf	3,6	;RP1=0, select bank0
  3530     0F3A  00C1               	movwf	??_Lcd_Cmd
  3531     0F3B                     u2177:
  3532     0F3B  2F3C               	nop2
  3533     0F3C  0BC1               	decfsz	??_Lcd_Cmd,f
  3534     0F3D  2F3B               	goto	u2177
  3535     0F3E  2F3F               	nop2
  3536     0F3F                     l1911:
  3537                           
  3538                           ;LCD.c: 64:     PORTDbits.RD7 = 0;
  3539     0F3F  1283               	bcf	3,5	;RP0=0, select bank0
  3540     0F40  1303               	bcf	3,6	;RP1=0, select bank0
  3541     0F41  1388               	bcf	8,7	;volatile
  3542     0F42                     l227:
  3543     0F42  0008               	return
  3544     0F43                     __end_of_Lcd_Cmd:
  3545                           
  3546                           	psect	text15
  3547     07C0                     __ptext15:	
  3548 ;; *************** function _Lcd_Port *****************
  3549 ;; Defined at:
  3550 ;;		line 17 in file "LCD.c"
  3551 ;; Parameters:    Size  Location     Type
  3552 ;;  a               1    wreg     unsigned char 
  3553 ;; Auto vars:     Size  Location     Type
  3554 ;;  a               1   32[BANK0 ] unsigned char 
  3555 ;; Return value:  Size  Location     Type
  3556 ;;                  1    wreg      void 
  3557 ;; Registers used:
  3558 ;;		wreg
  3559 ;; Tracked objects:
  3560 ;;		On entry : 0/0
  3561 ;;		On exit  : 0/0
  3562 ;;		Unchanged: 0/0
  3563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3564 ;;      Params:         0       0       0       0       0
  3565 ;;      Locals:         0       1       0       0       0
  3566 ;;      Temps:          0       0       0       0       0
  3567 ;;      Totals:         0       1       0       0       0
  3568 ;;Total ram usage:        1 bytes
  3569 ;; Hardware stack levels used: 1
  3570 ;; Hardware stack levels required when called: 3
  3571 ;; This function calls:
  3572 ;;		Nothing
  3573 ;; This function is called by:
  3574 ;;		_Lcd_Cmd
  3575 ;;		_Lcd_Init
  3576 ;;		_Lcd_Write_Char
  3577 ;; This function uses a non-reentrant model
  3578 ;;
  3579                           
  3580     07C0                     _Lcd_Port:	
  3581                           ;psect for function _Lcd_Port
  3582                           
  3583                           
  3584                           ;incstack = 0
  3585                           ; Regs used in _Lcd_Port: [wreg]
  3586                           ;Lcd_Port@a stored from wreg
  3587     07C0  1283               	bcf	3,5	;RP0=0, select bank0
  3588     07C1  1303               	bcf	3,6	;RP1=0, select bank0
  3589     07C2  00C0               	movwf	Lcd_Port@a
  3590     07C3                     l1767:
  3591                           
  3592                           ;LCD.c: 18:     if (a & 0b00000001)
  3593     07C3  1C40               	btfss	Lcd_Port@a,0
  3594     07C4  2FC6               	goto	u981
  3595     07C5  2FC7               	goto	u980
  3596     07C6                     u981:
  3597     07C6  2FC9               	goto	l208
  3598     07C7                     u980:
  3599     07C7                     l1769:
  3600                           
  3601                           ;LCD.c: 19:         PORTBbits.RB0 = 1;
  3602     07C7  1406               	bsf	6,0	;volatile
  3603     07C8  2FCA               	goto	l209
  3604     07C9                     l208:	
  3605                           ;LCD.c: 20:     else
  3606                           
  3607                           
  3608                           ;LCD.c: 21:         PORTBbits.RB0 = 0;
  3609     07C9  1006               	bcf	6,0	;volatile
  3610     07CA                     l209:
  3611                           
  3612                           ;LCD.c: 23:     if (a & 0b00000010)
  3613     07CA  1CC0               	btfss	Lcd_Port@a,1
  3614     07CB  2FCD               	goto	u991
  3615     07CC  2FCE               	goto	u990
  3616     07CD                     u991:
  3617     07CD  2FD0               	goto	l210
  3618     07CE                     u990:
  3619     07CE                     l1771:
  3620                           
  3621                           ;LCD.c: 24:         PORTBbits.RB1 = 1;
  3622     07CE  1486               	bsf	6,1	;volatile
  3623     07CF  2FD1               	goto	l211
  3624     07D0                     l210:	
  3625                           ;LCD.c: 25:     else
  3626                           
  3627                           
  3628                           ;LCD.c: 26:         PORTBbits.RB1 = 0;
  3629     07D0  1086               	bcf	6,1	;volatile
  3630     07D1                     l211:
  3631                           
  3632                           ;LCD.c: 28:     if (a & 0b00000100)
  3633     07D1  1D40               	btfss	Lcd_Port@a,2
  3634     07D2  2FD4               	goto	u1001
  3635     07D3  2FD5               	goto	u1000
  3636     07D4                     u1001:
  3637     07D4  2FD7               	goto	l212
  3638     07D5                     u1000:
  3639     07D5                     l1773:
  3640                           
  3641                           ;LCD.c: 29:         PORTBbits.RB2 = 1;
  3642     07D5  1506               	bsf	6,2	;volatile
  3643     07D6  2FD8               	goto	l213
  3644     07D7                     l212:	
  3645                           ;LCD.c: 30:     else
  3646                           
  3647                           
  3648                           ;LCD.c: 31:         PORTBbits.RB2 = 0;
  3649     07D7  1106               	bcf	6,2	;volatile
  3650     07D8                     l213:
  3651                           
  3652                           ;LCD.c: 33:     if (a & 0b00001000)
  3653     07D8  1DC0               	btfss	Lcd_Port@a,3
  3654     07D9  2FDB               	goto	u1011
  3655     07DA  2FDC               	goto	u1010
  3656     07DB                     u1011:
  3657     07DB  2FDE               	goto	l214
  3658     07DC                     u1010:
  3659     07DC                     l1775:
  3660                           
  3661                           ;LCD.c: 34:         PORTBbits.RB3 = 1;
  3662     07DC  1586               	bsf	6,3	;volatile
  3663     07DD  2FDF               	goto	l215
  3664     07DE                     l214:	
  3665                           ;LCD.c: 35:     else
  3666                           
  3667                           
  3668                           ;LCD.c: 36:         PORTBbits.RB3 = 0;
  3669     07DE  1186               	bcf	6,3	;volatile
  3670     07DF                     l215:
  3671                           
  3672                           ;LCD.c: 38:     if (a & 0b00010000)
  3673     07DF  1E40               	btfss	Lcd_Port@a,4
  3674     07E0  2FE2               	goto	u1021
  3675     07E1  2FE3               	goto	u1020
  3676     07E2                     u1021:
  3677     07E2  2FE5               	goto	l216
  3678     07E3                     u1020:
  3679     07E3                     l1777:
  3680                           
  3681                           ;LCD.c: 39:         PORTBbits.RB4 = 1;
  3682     07E3  1606               	bsf	6,4	;volatile
  3683     07E4  2FE6               	goto	l217
  3684     07E5                     l216:	
  3685                           ;LCD.c: 40:     else
  3686                           
  3687                           
  3688                           ;LCD.c: 41:         PORTBbits.RB4 = 0;
  3689     07E5  1206               	bcf	6,4	;volatile
  3690     07E6                     l217:
  3691                           
  3692                           ;LCD.c: 43:     if (a & 0b00100000)
  3693     07E6  1EC0               	btfss	Lcd_Port@a,5
  3694     07E7  2FE9               	goto	u1031
  3695     07E8  2FEA               	goto	u1030
  3696     07E9                     u1031:
  3697     07E9  2FEC               	goto	l218
  3698     07EA                     u1030:
  3699     07EA                     l1779:
  3700                           
  3701                           ;LCD.c: 44:         PORTBbits.RB5 = 1;
  3702     07EA  1686               	bsf	6,5	;volatile
  3703     07EB  2FED               	goto	l219
  3704     07EC                     l218:	
  3705                           ;LCD.c: 45:     else
  3706                           
  3707                           
  3708                           ;LCD.c: 46:         PORTBbits.RB5 = 0;
  3709     07EC  1286               	bcf	6,5	;volatile
  3710     07ED                     l219:
  3711                           
  3712                           ;LCD.c: 48:     if (a & 0b01000000)
  3713     07ED  1F40               	btfss	Lcd_Port@a,6
  3714     07EE  2FF0               	goto	u1041
  3715     07EF  2FF1               	goto	u1040
  3716     07F0                     u1041:
  3717     07F0  2FF3               	goto	l220
  3718     07F1                     u1040:
  3719     07F1                     l1781:
  3720                           
  3721                           ;LCD.c: 49:         PORTBbits.RB6 = 1;
  3722     07F1  1706               	bsf	6,6	;volatile
  3723     07F2  2FF4               	goto	l221
  3724     07F3                     l220:	
  3725                           ;LCD.c: 50:     else
  3726                           
  3727                           
  3728                           ;LCD.c: 51:         PORTBbits.RB6 = 0;
  3729     07F3  1306               	bcf	6,6	;volatile
  3730     07F4                     l221:
  3731                           
  3732                           ;LCD.c: 53:     if (a & 0b10000000)
  3733     07F4  1FC0               	btfss	Lcd_Port@a,7
  3734     07F5  2FF7               	goto	u1051
  3735     07F6  2FF8               	goto	u1050
  3736     07F7                     u1051:
  3737     07F7  2FFA               	goto	l222
  3738     07F8                     u1050:
  3739     07F8                     l1783:
  3740                           
  3741                           ;LCD.c: 54:         PORTBbits.RB7 = 1;
  3742     07F8  1786               	bsf	6,7	;volatile
  3743     07F9  2FFB               	goto	l224
  3744     07FA                     l222:	
  3745                           ;LCD.c: 55:     else
  3746                           
  3747                           
  3748                           ;LCD.c: 56:         PORTBbits.RB7 = 0;
  3749     07FA  1386               	bcf	6,7	;volatile
  3750     07FB                     l224:
  3751     07FB  0008               	return
  3752     07FC                     __end_of_Lcd_Port:
  3753                           
  3754                           	psect	text16
  3755     046F                     __ptext16:	
  3756 ;; *************** function _isr *****************
  3757 ;; Defined at:
  3758 ;;		line 86 in file "Principal.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      void 
  3765 ;; Registers used:
  3766 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3772 ;;      Params:         0       0       0       0       0
  3773 ;;      Locals:         0       0       0       0       0
  3774 ;;      Temps:          0       6       0       0       0
  3775 ;;      Totals:         0       6       0       0       0
  3776 ;;Total ram usage:        6 bytes
  3777 ;; Hardware stack levels used: 1
  3778 ;; Hardware stack levels required when called: 2
  3779 ;; This function calls:
  3780 ;;		_mapear
  3781 ;;		_read_ADC
  3782 ;;		i1_sprintf
  3783 ;; This function is called by:
  3784 ;;		Interrupt level 1
  3785 ;; This function uses a non-reentrant model
  3786 ;;
  3787                           
  3788     046F                     _isr:	
  3789                           ;psect for function _isr
  3790                           
  3791     046F                     i1l2285:
  3792                           
  3793                           ;Principal.c: 87:     if (PIR1bits.ADIF){
  3794     046F  1F0C               	btfss	12,6	;volatile
  3795     0470  2C72               	goto	u168_21
  3796     0471  2C73               	goto	u168_20
  3797     0472                     u168_21:
  3798     0472  2CA7               	goto	i1l2293
  3799     0473                     u168_20:
  3800     0473                     i1l2287:
  3801                           
  3802                           ;Principal.c: 88:         ADC = read_ADC();
  3803     0473  120A  158A  26F7  120A  118A  	fcall	_read_ADC
  3804     0478  0871               	movf	?_read_ADC+1,w
  3805     0479  1283               	bcf	3,5	;RP0=0, select bank0
  3806     047A  1303               	bcf	3,6	;RP1=0, select bank0
  3807     047B  00CC               	movwf	_ADC+1
  3808     047C  0870               	movf	?_read_ADC,w
  3809     047D  00CB               	movwf	_ADC
  3810     047E                     i1l2289:
  3811                           
  3812                           ;Principal.c: 89:         ADC = mapear(ADC, 0, 255, 0, 500);
  3813     047E  084C               	movf	_ADC+1,w
  3814     047F  00AF               	movwf	mapear@valor+1
  3815     0480  084B               	movf	_ADC,w
  3816     0481  00AE               	movwf	mapear@valor
  3817     0482  3000               	movlw	0
  3818     0483  00B0               	movwf	mapear@min
  3819     0484  00B1               	movwf	mapear@min+1
  3820     0485  30FF               	movlw	255
  3821     0486  00B2               	movwf	mapear@max
  3822     0487  3000               	movlw	0
  3823     0488  00B3               	movwf	mapear@max+1
  3824     0489  3000               	movlw	0
  3825     048A  00B4               	movwf	mapear@nmin
  3826     048B  00B5               	movwf	mapear@nmin+1
  3827     048C  30F4               	movlw	244
  3828     048D  00B6               	movwf	mapear@nmax
  3829     048E  3001               	movlw	1
  3830     048F  00B7               	movwf	mapear@nmax+1
  3831     0490  120A  118A  26A2  120A  118A  	fcall	_mapear
  3832     0495  1283               	bcf	3,5	;RP0=0, select bank0
  3833     0496  1303               	bcf	3,6	;RP1=0, select bank0
  3834     0497  082F               	movf	?_mapear+1,w
  3835     0498  00CC               	movwf	_ADC+1
  3836     0499  082E               	movf	?_mapear,w
  3837     049A  00CB               	movwf	_ADC
  3838     049B                     i1l2291:
  3839                           
  3840                           ;Principal.c: 90:         sprintf(cADC, "%d", ADC);
  3841     049B  3041               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
  3842     049C  00A0               	movwf	i1sprintf@f
  3843     049D  084C               	movf	_ADC+1,w
  3844     049E  00A2               	movwf	?i1_sprintf+2
  3845     049F  084B               	movf	_ADC,w
  3846     04A0  00A1               	movwf	?i1_sprintf+1
  3847     04A1  304D               	movlw	(low (_cADC| 0))& (0+255)
  3848     04A2  120A  118A  2222  120A  118A  	fcall	i1_sprintf
  3849     04A7                     i1l2293:
  3850                           
  3851                           ;Principal.c: 93:     if (PIR1bits.RCIF){
  3852     04A7  1283               	bcf	3,5	;RP0=0, select bank0
  3853     04A8  1303               	bcf	3,6	;RP1=0, select bank0
  3854     04A9  1E8C               	btfss	12,5	;volatile
  3855     04AA  2CAC               	goto	u169_21
  3856     04AB  2CAD               	goto	u169_20
  3857     04AC                     u169_21:
  3858     04AC  2CE7               	goto	i1l2321
  3859     04AD                     u169_20:
  3860     04AD                     i1l2295:
  3861                           
  3862                           ;Principal.c: 94:         indicador = RCREG;
  3863     04AD  081A               	movf	26,w	;volatile
  3864     04AE  00CF               	movwf	_indicador
  3865     04AF                     i1l2297:
  3866                           
  3867                           ;Principal.c: 95:         if (indicador == 0B00110010){
  3868     04AF  3032               	movlw	50
  3869     04B0  064F               	xorwf	_indicador,w
  3870     04B1  1D03               	btfss	3,2
  3871     04B2  2CB4               	goto	u170_21
  3872     04B3  2CB5               	goto	u170_20
  3873     04B4                     u170_21:
  3874     04B4  2CE7               	goto	i1l2321
  3875     04B5                     u170_20:
  3876     04B5  2CDD               	goto	i1l2315
  3877     04B6                     i1l2301:
  3878                           
  3879                           ;Principal.c: 97:                 condicion = RCREG;
  3880     04B6  081A               	movf	26,w	;volatile
  3881     04B7  00BA               	movwf	??_isr
  3882     04B8  01BB               	clrf	??_isr+1
  3883     04B9  083A               	movf	??_isr,w
  3884     04BA  00C9               	movwf	_condicion
  3885     04BB  083B               	movf	??_isr+1,w
  3886     04BC  00CA               	movwf	_condicion+1
  3887     04BD                     i1l2303:
  3888                           
  3889                           ;Principal.c: 98:                 if (condicion == 0B00101011){
  3890     04BD  302B               	movlw	43
  3891     04BE  0649               	xorwf	_condicion,w
  3892     04BF  044A               	iorwf	_condicion+1,w
  3893     04C0  1D03               	btfss	3,2
  3894     04C1  2CC3               	goto	u171_21
  3895     04C2  2CC4               	goto	u171_20
  3896     04C3                     u171_21:
  3897     04C3  2CD1               	goto	i1l2309
  3898     04C4                     u171_20:
  3899     04C4                     i1l2305:
  3900                           
  3901                           ;Principal.c: 99:                     contador ++;
  3902     04C4  3001               	movlw	1
  3903     04C5  00BA               	movwf	??_isr
  3904     04C6  083A               	movf	??_isr,w
  3905     04C7  1683               	bsf	3,5	;RP0=1, select bank1
  3906     04C8  1303               	bcf	3,6	;RP1=0, select bank1
  3907     04C9  07B6               	addwf	_contador^(0+128),f
  3908     04CA                     i1l2307:
  3909                           
  3910                           ;Principal.c: 100:                     esperar = 1;
  3911     04CA  3001               	movlw	1
  3912     04CB  1283               	bcf	3,5	;RP0=0, select bank0
  3913     04CC  1303               	bcf	3,6	;RP1=0, select bank0
  3914     04CD  00C7               	movwf	_esperar
  3915     04CE  3000               	movlw	0
  3916     04CF  00C8               	movwf	_esperar+1
  3917                           
  3918                           ;Principal.c: 101:                 }
  3919     04D0  2CDD               	goto	i1l2315
  3920     04D1                     i1l2309:
  3921     04D1  302D               	movlw	45
  3922     04D2  0649               	xorwf	_condicion,w
  3923     04D3  044A               	iorwf	_condicion+1,w
  3924     04D4  1D03               	btfss	3,2
  3925     04D5  2CD7               	goto	u172_21
  3926     04D6  2CD8               	goto	u172_20
  3927     04D7                     u172_21:
  3928     04D7  2CDD               	goto	i1l2315
  3929     04D8                     u172_20:
  3930     04D8                     i1l2311:
  3931                           
  3932                           ;Principal.c: 103:                     contador --;
  3933     04D8  3001               	movlw	1
  3934     04D9  1683               	bsf	3,5	;RP0=1, select bank1
  3935     04DA  1303               	bcf	3,6	;RP1=0, select bank1
  3936     04DB  02B6               	subwf	_contador^(0+128),f
  3937     04DC  2CCA               	goto	i1l2307
  3938     04DD                     i1l2315:
  3939                           
  3940                           ;Principal.c: 96:             while (esperar == 0){
  3941     04DD  0847               	movf	_esperar,w
  3942     04DE  0448               	iorwf	_esperar+1,w
  3943     04DF  1903               	btfsc	3,2
  3944     04E0  2CE2               	goto	u173_21
  3945     04E1  2CE3               	goto	u173_20
  3946     04E2                     u173_21:
  3947     04E2  2CB6               	goto	i1l2301
  3948     04E3                     u173_20:
  3949     04E3                     i1l2317:
  3950                           
  3951                           ;Principal.c: 107:             indicador = 0B00110000;
  3952     04E3  3030               	movlw	48
  3953     04E4  00CF               	movwf	_indicador
  3954     04E5                     i1l2319:
  3955                           
  3956                           ;Principal.c: 108:             esperar = 0;
  3957     04E5  01C7               	clrf	_esperar
  3958     04E6  01C8               	clrf	_esperar+1
  3959     04E7                     i1l2321:
  3960                           
  3961                           ;Principal.c: 112:     PIR1bits.RCIF = 0;
  3962     04E7  128C               	bcf	12,5	;volatile
  3963     04E8                     i1l2323:
  3964                           
  3965                           ;Principal.c: 113:     PIR1bits.ADIF = 0;
  3966     04E8  130C               	bcf	12,6	;volatile
  3967     04E9                     i1l85:
  3968     04E9  083F               	movf	??_isr+5,w
  3969     04EA  00FF               	movwf	btemp+1
  3970     04EB  083E               	movf	??_isr+4,w
  3971     04EC  008A               	movwf	10
  3972     04ED  083D               	movf	??_isr+3,w
  3973     04EE  0084               	movwf	4
  3974     04EF  0E3C               	swapf	??_isr+2,w
  3975     04F0  0083               	movwf	3
  3976     04F1  0EFE               	swapf	btemp,f
  3977     04F2  0E7E               	swapf	btemp,w
  3978     04F3  0009               	retfie
  3979     04F4                     __end_of_isr:
  3980                           
  3981                           	psect	intentry
  3982     0004                     __pintentry:	
  3983                           ;incstack = 0
  3984                           ; Regs used in _isr: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  3985                           
  3986     0004                     interrupt_function:
  3987     007E                     saved_w	set	btemp
  3988     0004  00FE               	movwf	btemp
  3989     0005  0E03               	swapf	3,w
  3990     0006  1283               	bcf	3,5	;RP0=0, select bank0
  3991     0007  1303               	bcf	3,6	;RP1=0, select bank0
  3992     0008  00BC               	movwf	??_isr+2
  3993     0009  0804               	movf	4,w
  3994     000A  00BD               	movwf	??_isr+3
  3995     000B  080A               	movf	10,w
  3996     000C  00BE               	movwf	??_isr+4
  3997     000D  087F               	movf	btemp+1,w
  3998     000E  00BF               	movwf	??_isr+5
  3999     000F  120A  118A  2C6F   	ljmp	_isr
  4000                           
  4001                           	psect	text17
  4002     0222                     __ptext17:	
  4003 ;; *************** function i1_sprintf *****************
  4004 ;; Defined at:
  4005 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c"
  4006 ;; Parameters:    Size  Location     Type
  4007 ;;  sp              1    wreg     PTR unsigned char 
  4008 ;;		 -> charcontador(2), cADC(2), 
  4009 ;;  f               1    0[BANK0 ] PTR const unsigned char 
  4010 ;;		 -> STR_6(3), STR_1(3), 
  4011 ;; Auto vars:     Size  Location     Type
  4012 ;;  sp              1   11[BANK0 ] PTR unsigned char 
  4013 ;;		 -> charcontador(2), cADC(2), 
  4014 ;;  tmpval          4    0        struct .
  4015 ;;  val             2    9[BANK0 ] unsigned int 
  4016 ;;  cp              2    0        PTR const unsigned char 
  4017 ;;  len             2    0        unsigned int 
  4018 ;;  c               1   12[BANK0 ] unsigned char 
  4019 ;;  prec            1    8[BANK0 ] char 
  4020 ;;  flag            1    7[BANK0 ] unsigned char 
  4021 ;;  ap              1    6[BANK0 ] PTR void [1]
  4022 ;;		 -> ?i1_sprintf(2), ?_sprintf(2), 
  4023 ;; Return value:  Size  Location     Type
  4024 ;;                  2    0[BANK0 ] int 
  4025 ;; Registers used:
  4026 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4027 ;; Tracked objects:
  4028 ;;		On entry : 0/0
  4029 ;;		On exit  : 0/0
  4030 ;;		Unchanged: 0/0
  4031 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4032 ;;      Params:         0       3       0       0       0
  4033 ;;      Locals:         0       7       0       0       0
  4034 ;;      Temps:          0       3       0       0       0
  4035 ;;      Totals:         0      13       0       0       0
  4036 ;;Total ram usage:       13 bytes
  4037 ;; Hardware stack levels used: 1
  4038 ;; Hardware stack levels required when called: 1
  4039 ;; This function calls:
  4040 ;;		i1___lwdiv
  4041 ;;		i1___lwmod
  4042 ;; This function is called by:
  4043 ;;		_isr
  4044 ;; This function uses a non-reentrant model
  4045 ;;
  4046                           
  4047     0222                     i1_sprintf:	
  4048                           ;psect for function i1_sprintf
  4049                           
  4050                           
  4051                           ;incstack = 0
  4052                           ; Regs used in i1_sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  4053                           ;i1sprintf@sp stored from wreg
  4054     0222  1283               	bcf	3,5	;RP0=0, select bank0
  4055     0223  1303               	bcf	3,6	;RP1=0, select bank0
  4056     0224  00AB               	movwf	i1sprintf@sp
  4057     0225                     i1l2223:
  4058                           
  4059                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  4060     0225  3021               	movlw	(low ((?i1_sprintf| 0+1)))& (0+255)
  4061     0226  00A6               	movwf	i1sprintf@ap
  4062                           
  4063                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4064     0227  2AE7               	goto	i1l2275
  4065     0228                     i1l2225:
  4066                           
  4067                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  4068     0228  3025               	movlw	37
  4069     0229  062C               	xorwf	i1sprintf@c,w
  4070     022A  1903               	btfsc	3,2
  4071     022B  2A2D               	goto	u161_21
  4072     022C  2A2E               	goto	u161_20
  4073     022D                     u161_21:
  4074     022D  2A38               	goto	i1l2231
  4075     022E                     u161_20:
  4076     022E                     i1l2227:
  4077                           
  4078                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  4079     022E  082B               	movf	i1sprintf@sp,w
  4080     022F  0084               	movwf	4
  4081     0230  082C               	movf	i1sprintf@c,w
  4082     0231  1383               	bcf	3,7	;select IRP bank0
  4083     0232  0080               	movwf	0
  4084     0233                     i1l2229:
  4085     0233  3001               	movlw	1
  4086     0234  00A3               	movwf	??i1_sprintf
  4087     0235  0823               	movf	??i1_sprintf,w
  4088     0236  07AB               	addwf	i1sprintf@sp,f
  4089                           
  4090                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 559:    continue;
  4091     0237  2AE7               	goto	i1l2275
  4092     0238                     i1l2231:
  4093                           
  4094                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  4095     0238  01A7               	clrf	i1sprintf@flag
  4096     0239                     i1l2235:	
  4097                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  4098                           
  4099     0239  3001               	movlw	1
  4100     023A  07A0               	addwf	i1sprintf@f,f
  4101     023B  30FF               	movlw	-1
  4102     023C  0720               	addwf	i1sprintf@f,w
  4103     023D  0084               	movwf	4
  4104     023E  120A  118A  260A  120A  118A  	fcall	stringdir
  4105     0243  00AC               	movwf	i1sprintf@c
  4106     0244  00A3               	movwf	??i1_sprintf
  4107     0245  01A4               	clrf	??i1_sprintf+1
  4108                           
  4109                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  4110                           ; Switch size 1, requested type "simple"
  4111                           ; Number of cases is 1, Range of values is 0 to 0
  4112                           ; switch strategies available:
  4113                           ; Name         Instructions Cycles
  4114                           ; simple_byte            4     3 (average)
  4115                           ; direct_byte           11     8 (fixed)
  4116                           ; jumptable            260     6 (fixed)
  4117                           ;	Chosen strategy is simple_byte
  4118     0246  0824               	movf	??i1_sprintf+1,w
  4119     0247  3A00               	xorlw	0	; case 0
  4120     0248  1903               	skipnz
  4121     0249  2A4B               	goto	i1l2787
  4122     024A  2AE7               	goto	i1l2275
  4123     024B                     i1l2787:
  4124                           
  4125                           ; Switch size 1, requested type "simple"
  4126                           ; Number of cases is 3, Range of values is 0 to 105
  4127                           ; switch strategies available:
  4128                           ; Name         Instructions Cycles
  4129                           ; simple_byte           10     6 (average)
  4130                           ; jumptable            260     6 (fixed)
  4131                           ;	Chosen strategy is simple_byte
  4132     024B  0823               	movf	??i1_sprintf,w
  4133     024C  3A00               	xorlw	0	; case 0
  4134     024D  1903               	skipnz
  4135     024E  2AF7               	goto	i1l2277
  4136     024F  3A64               	xorlw	100	; case 100
  4137     0250  1903               	skipnz
  4138     0251  2A56               	goto	i1l2237
  4139     0252  3A0D               	xorlw	13	; case 105
  4140     0253  1903               	skipnz
  4141     0254  2A56               	goto	i1l2237
  4142     0255  2AE7               	goto	i1l2275
  4143     0256                     i1l2237:
  4144                           
  4145                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  4146     0256  0826               	movf	i1sprintf@ap,w
  4147     0257  0084               	movwf	4
  4148     0258  1383               	bcf	3,7	;select IRP bank0
  4149     0259  0800               	movf	0,w
  4150     025A  00A9               	movwf	i1sprintf@val
  4151     025B  0A84               	incf	4,f
  4152     025C  0800               	movf	0,w
  4153     025D  00AA               	movwf	i1sprintf@val+1
  4154     025E                     i1l2239:
  4155     025E  3002               	movlw	2
  4156     025F  00A3               	movwf	??i1_sprintf
  4157     0260  0823               	movf	??i1_sprintf,w
  4158     0261  07A6               	addwf	i1sprintf@ap,f
  4159     0262                     i1l2241:
  4160                           
  4161                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  4162     0262  1FAA               	btfss	i1sprintf@val+1,7
  4163     0263  2A65               	goto	u162_21
  4164     0264  2A66               	goto	u162_20
  4165     0265                     u162_21:
  4166     0265  2A6F               	goto	i1l2247
  4167     0266                     u162_20:
  4168     0266                     i1l2243:
  4169                           
  4170                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  4171     0266  3003               	movlw	3
  4172     0267  00A3               	movwf	??i1_sprintf
  4173     0268  0823               	movf	??i1_sprintf,w
  4174     0269  04A7               	iorwf	i1sprintf@flag,f
  4175     026A                     i1l2245:
  4176                           
  4177                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  4178     026A  09A9               	comf	i1sprintf@val,f
  4179     026B  09AA               	comf	i1sprintf@val+1,f
  4180     026C  0AA9               	incf	i1sprintf@val,f
  4181     026D  1903               	skipnz
  4182     026E  0AAA               	incf	i1sprintf@val+1,f
  4183     026F                     i1l2247:
  4184                           
  4185                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  4186     026F  01AC               	clrf	i1sprintf@c
  4187     0270  0AAC               	incf	i1sprintf@c,f
  4188     0271                     i1l2253:
  4189                           
  4190                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  4191     0271  082C               	movf	i1sprintf@c,w
  4192     0272  00A3               	movwf	??i1_sprintf
  4193     0273  0723               	addwf	??i1_sprintf,w
  4194     0274  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4195     0275  0084               	movwf	4
  4196     0276  120A  118A  260A  120A  118A  	fcall	stringdir
  4197     027B  00A4               	movwf	??i1_sprintf+1
  4198     027C  120A  118A  260A  120A  118A  	fcall	stringdir
  4199     0281  00A5               	movwf	??i1_sprintf+2
  4200     0282  0825               	movf	??i1_sprintf+2,w
  4201     0283  022A               	subwf	i1sprintf@val+1,w
  4202     0284  1D03               	skipz
  4203     0285  2A88               	goto	u163_25
  4204     0286  0824               	movf	??i1_sprintf+1,w
  4205     0287  0229               	subwf	i1sprintf@val,w
  4206     0288                     u163_25:
  4207     0288  1803               	skipnc
  4208     0289  2A8B               	goto	u163_21
  4209     028A  2A8C               	goto	u163_20
  4210     028B                     u163_21:
  4211     028B  2A8D               	goto	i1l2257
  4212     028C                     u163_20:
  4213     028C  2A97               	goto	i1l2259
  4214     028D                     i1l2257:
  4215     028D  3001               	movlw	1
  4216     028E  00A3               	movwf	??i1_sprintf
  4217     028F  0823               	movf	??i1_sprintf,w
  4218     0290  07AC               	addwf	i1sprintf@c,f
  4219     0291  3005               	movlw	5
  4220     0292  062C               	xorwf	i1sprintf@c,w
  4221     0293  1D03               	btfss	3,2
  4222     0294  2A96               	goto	u164_21
  4223     0295  2A97               	goto	u164_20
  4224     0296                     u164_21:
  4225     0296  2A71               	goto	i1l2253
  4226     0297                     u164_20:
  4227     0297                     i1l2259:
  4228                           
  4229                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  4230     0297  0827               	movf	i1sprintf@flag,w
  4231     0298  3903               	andlw	3
  4232     0299  1903               	btfsc	3,2
  4233     029A  2A9C               	goto	u165_21
  4234     029B  2A9D               	goto	u165_20
  4235     029C                     u165_21:
  4236     029C  2AA6               	goto	i1l2265
  4237     029D                     u165_20:
  4238     029D                     i1l2261:
  4239                           
  4240                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  4241     029D  082B               	movf	i1sprintf@sp,w
  4242     029E  0084               	movwf	4
  4243     029F  302D               	movlw	45
  4244     02A0  1383               	bcf	3,7	;select IRP bank0
  4245     02A1  0080               	movwf	0
  4246     02A2                     i1l2263:
  4247     02A2  3001               	movlw	1
  4248     02A3  00A3               	movwf	??i1_sprintf
  4249     02A4  0823               	movf	??i1_sprintf,w
  4250     02A5  07AB               	addwf	i1sprintf@sp,f
  4251     02A6                     i1l2265:
  4252                           
  4253                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  4254     02A6  082C               	movf	i1sprintf@c,w
  4255     02A7  00A8               	movwf	i1sprintf@prec
  4256                           
  4257                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4258     02A8  2ADE               	goto	i1l2273
  4259     02A9                     i1l2267:
  4260                           
  4261                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  4262     02A9  300A               	movlw	10
  4263     02AA  00F8               	movwf	i1___lwmod@divisor
  4264     02AB  3000               	movlw	0
  4265     02AC  00F9               	movwf	i1___lwmod@divisor+1
  4266     02AD  0828               	movf	i1sprintf@prec,w
  4267     02AE  00A3               	movwf	??i1_sprintf
  4268     02AF  0723               	addwf	??i1_sprintf,w
  4269     02B0  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  4270     02B1  0084               	movwf	4
  4271     02B2  120A  118A  260A  120A  118A  	fcall	stringdir
  4272     02B7  00F0               	movwf	i1___lwdiv@divisor
  4273     02B8  120A  118A  260A  120A  118A  	fcall	stringdir
  4274     02BD  00F1               	movwf	i1___lwdiv@divisor+1
  4275     02BE  082A               	movf	i1sprintf@val+1,w
  4276     02BF  00F3               	movwf	i1___lwdiv@dividend+1
  4277     02C0  0829               	movf	i1sprintf@val,w
  4278     02C1  00F2               	movwf	i1___lwdiv@dividend
  4279     02C2  120A  118A  277C  120A  118A  	fcall	i1___lwdiv
  4280     02C7  0871               	movf	?i1___lwdiv+1,w
  4281     02C8  00FB               	movwf	i1___lwmod@dividend+1
  4282     02C9  0870               	movf	?i1___lwdiv,w
  4283     02CA  00FA               	movwf	i1___lwmod@dividend
  4284     02CB  120A  158A  278B  120A  118A  	fcall	i1___lwmod
  4285     02D0  0878               	movf	?i1___lwmod,w
  4286     02D1  3E30               	addlw	48
  4287     02D2  1283               	bcf	3,5	;RP0=0, select bank0
  4288     02D3  1303               	bcf	3,6	;RP1=0, select bank0
  4289     02D4  00AC               	movwf	i1sprintf@c
  4290     02D5                     i1l2269:
  4291                           
  4292                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  4293     02D5  082B               	movf	i1sprintf@sp,w
  4294     02D6  0084               	movwf	4
  4295     02D7  082C               	movf	i1sprintf@c,w
  4296     02D8  1383               	bcf	3,7	;select IRP bank0
  4297     02D9  0080               	movwf	0
  4298     02DA                     i1l2271:
  4299     02DA  3001               	movlw	1
  4300     02DB  00A3               	movwf	??i1_sprintf
  4301     02DC  0823               	movf	??i1_sprintf,w
  4302     02DD  07AB               	addwf	i1sprintf@sp,f
  4303     02DE                     i1l2273:
  4304                           
  4305                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  4306     02DE  30FF               	movlw	255
  4307     02DF  00A3               	movwf	??i1_sprintf
  4308     02E0  0823               	movf	??i1_sprintf,w
  4309     02E1  07A8               	addwf	i1sprintf@prec,f
  4310     02E2  0A28               	incf	i1sprintf@prec,w
  4311     02E3  1D03               	btfss	3,2
  4312     02E4  2AE6               	goto	u166_21
  4313     02E5  2AE7               	goto	u166_20
  4314     02E6                     u166_21:
  4315     02E6  2AA9               	goto	i1l2267
  4316     02E7                     u166_20:
  4317     02E7                     i1l2275:
  4318                           
  4319                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  4320     02E7  3001               	movlw	1
  4321     02E8  07A0               	addwf	i1sprintf@f,f
  4322     02E9  30FF               	movlw	-1
  4323     02EA  0720               	addwf	i1sprintf@f,w
  4324     02EB  0084               	movwf	4
  4325     02EC  120A  118A  260A  120A  118A  	fcall	stringdir
  4326     02F1  00AC               	movwf	i1sprintf@c
  4327     02F2  082C               	movf	i1sprintf@c,w
  4328     02F3  1D03               	btfss	3,2
  4329     02F4  2AF6               	goto	u167_21
  4330     02F5  2AF7               	goto	u167_20
  4331     02F6                     u167_21:
  4332     02F6  2A28               	goto	i1l2225
  4333     02F7                     u167_20:
  4334     02F7                     i1l2277:
  4335                           
  4336                           ;C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  4337     02F7  082B               	movf	i1sprintf@sp,w
  4338     02F8  0084               	movwf	4
  4339     02F9  1383               	bcf	3,7	;select IRP bank0
  4340     02FA  0180               	clrf	0
  4341     02FB                     i1l403:
  4342     02FB  0008               	return
  4343     02FC                     __end_ofi1_sprintf:
  4344                           
  4345                           	psect	text18
  4346     0F8B                     __ptext18:	
  4347 ;; *************** function i1___lwmod *****************
  4348 ;; Defined at:
  4349 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwmod.c"
  4350 ;; Parameters:    Size  Location     Type
  4351 ;;  divisor         2    8[COMMON] unsigned int 
  4352 ;;  dividend        2   10[COMMON] unsigned int 
  4353 ;; Auto vars:     Size  Location     Type
  4354 ;;  counter         1   13[COMMON] unsigned char 
  4355 ;; Return value:  Size  Location     Type
  4356 ;;                  2    8[COMMON] unsigned int 
  4357 ;; Registers used:
  4358 ;;		wreg, status,2, status,0
  4359 ;; Tracked objects:
  4360 ;;		On entry : 0/0
  4361 ;;		On exit  : 0/0
  4362 ;;		Unchanged: 0/0
  4363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4364 ;;      Params:         4       0       0       0       0
  4365 ;;      Locals:         1       0       0       0       0
  4366 ;;      Temps:          1       0       0       0       0
  4367 ;;      Totals:         6       0       0       0       0
  4368 ;;Total ram usage:        6 bytes
  4369 ;; Hardware stack levels used: 1
  4370 ;; This function calls:
  4371 ;;		Nothing
  4372 ;; This function is called by:
  4373 ;;		i1_sprintf
  4374 ;; This function uses a non-reentrant model
  4375 ;;
  4376                           
  4377     0F8B                     i1___lwmod:	
  4378                           ;psect for function i1___lwmod
  4379                           
  4380     0F8B                     i1l2057:	
  4381                           ;incstack = 0
  4382                           ; Regs used in i1___lwmod: [wreg+status,2+status,0]
  4383                           
  4384     0F8B  0878               	movf	i1___lwmod@divisor,w
  4385     0F8C  0479               	iorwf	i1___lwmod@divisor+1,w
  4386     0F8D  1903               	btfsc	3,2
  4387     0F8E  2F90               	goto	u142_21
  4388     0F8F  2F91               	goto	u142_20
  4389     0F90                     u142_21:
  4390     0F90  2FC0               	goto	i1l2075
  4391     0F91                     u142_20:
  4392     0F91                     i1l2059:
  4393     0F91  01FD               	clrf	i1___lwmod@counter
  4394     0F92  0AFD               	incf	i1___lwmod@counter,f
  4395     0F93  2F9F               	goto	i1l2065
  4396     0F94                     i1l2061:
  4397     0F94  3001               	movlw	1
  4398     0F95                     u143_25:
  4399     0F95  1003               	clrc
  4400     0F96  0DF8               	rlf	i1___lwmod@divisor,f
  4401     0F97  0DF9               	rlf	i1___lwmod@divisor+1,f
  4402     0F98  3EFF               	addlw	-1
  4403     0F99  1D03               	skipz
  4404     0F9A  2F95               	goto	u143_25
  4405     0F9B                     i1l2063:
  4406     0F9B  3001               	movlw	1
  4407     0F9C  00FC               	movwf	??i1___lwmod
  4408     0F9D  087C               	movf	??i1___lwmod,w
  4409     0F9E  07FD               	addwf	i1___lwmod@counter,f
  4410     0F9F                     i1l2065:
  4411     0F9F  1FF9               	btfss	i1___lwmod@divisor+1,7
  4412     0FA0  2FA2               	goto	u144_21
  4413     0FA1  2FA3               	goto	u144_20
  4414     0FA2                     u144_21:
  4415     0FA2  2F94               	goto	i1l2061
  4416     0FA3                     u144_20:
  4417     0FA3                     i1l2067:
  4418     0FA3  0879               	movf	i1___lwmod@divisor+1,w
  4419     0FA4  027B               	subwf	i1___lwmod@dividend+1,w
  4420     0FA5  1D03               	skipz
  4421     0FA6  2FA9               	goto	u145_25
  4422     0FA7  0878               	movf	i1___lwmod@divisor,w
  4423     0FA8  027A               	subwf	i1___lwmod@dividend,w
  4424     0FA9                     u145_25:
  4425     0FA9  1C03               	skipc
  4426     0FAA  2FAC               	goto	u145_21
  4427     0FAB  2FAD               	goto	u145_20
  4428     0FAC                     u145_21:
  4429     0FAC  2FB3               	goto	i1l2071
  4430     0FAD                     u145_20:
  4431     0FAD                     i1l2069:
  4432     0FAD  0878               	movf	i1___lwmod@divisor,w
  4433     0FAE  02FA               	subwf	i1___lwmod@dividend,f
  4434     0FAF  0879               	movf	i1___lwmod@divisor+1,w
  4435     0FB0  1C03               	skipc
  4436     0FB1  03FB               	decf	i1___lwmod@dividend+1,f
  4437     0FB2  02FB               	subwf	i1___lwmod@dividend+1,f
  4438     0FB3                     i1l2071:
  4439     0FB3  3001               	movlw	1
  4440     0FB4                     u146_25:
  4441     0FB4  1003               	clrc
  4442     0FB5  0CF9               	rrf	i1___lwmod@divisor+1,f
  4443     0FB6  0CF8               	rrf	i1___lwmod@divisor,f
  4444     0FB7  3EFF               	addlw	-1
  4445     0FB8  1D03               	skipz
  4446     0FB9  2FB4               	goto	u146_25
  4447     0FBA                     i1l2073:
  4448     0FBA  3001               	movlw	1
  4449     0FBB  02FD               	subwf	i1___lwmod@counter,f
  4450     0FBC  1D03               	btfss	3,2
  4451     0FBD  2FBF               	goto	u147_21
  4452     0FBE  2FC0               	goto	u147_20
  4453     0FBF                     u147_21:
  4454     0FBF  2FA3               	goto	i1l2067
  4455     0FC0                     u147_20:
  4456     0FC0                     i1l2075:
  4457     0FC0  087B               	movf	i1___lwmod@dividend+1,w
  4458     0FC1  00F9               	movwf	?i1___lwmod+1
  4459     0FC2  087A               	movf	i1___lwmod@dividend,w
  4460     0FC3  00F8               	movwf	?i1___lwmod
  4461     0FC4                     i1l689:
  4462     0FC4  0008               	return
  4463     0FC5                     __end_ofi1___lwmod:
  4464                           
  4465                           	psect	text19
  4466     077C                     __ptext19:	
  4467 ;; *************** function i1___lwdiv *****************
  4468 ;; Defined at:
  4469 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\lwdiv.c"
  4470 ;; Parameters:    Size  Location     Type
  4471 ;;  divisor         2    0[COMMON] unsigned int 
  4472 ;;  dividend        2    2[COMMON] unsigned int 
  4473 ;; Auto vars:     Size  Location     Type
  4474 ;;  quotient        2    5[COMMON] unsigned int 
  4475 ;;  counter         1    7[COMMON] unsigned char 
  4476 ;; Return value:  Size  Location     Type
  4477 ;;                  2    0[COMMON] unsigned int 
  4478 ;; Registers used:
  4479 ;;		wreg, status,2, status,0
  4480 ;; Tracked objects:
  4481 ;;		On entry : 0/0
  4482 ;;		On exit  : 0/0
  4483 ;;		Unchanged: 0/0
  4484 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4485 ;;      Params:         4       0       0       0       0
  4486 ;;      Locals:         3       0       0       0       0
  4487 ;;      Temps:          1       0       0       0       0
  4488 ;;      Totals:         8       0       0       0       0
  4489 ;;Total ram usage:        8 bytes
  4490 ;; Hardware stack levels used: 1
  4491 ;; This function calls:
  4492 ;;		Nothing
  4493 ;; This function is called by:
  4494 ;;		i1_sprintf
  4495 ;; This function uses a non-reentrant model
  4496 ;;
  4497                           
  4498     077C                     i1___lwdiv:	
  4499                           ;psect for function i1___lwdiv
  4500                           
  4501     077C                     i1l2031:	
  4502                           ;incstack = 0
  4503                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
  4504                           
  4505     077C  01F5               	clrf	i1___lwdiv@quotient
  4506     077D  01F6               	clrf	i1___lwdiv@quotient+1
  4507     077E                     i1l2033:
  4508     077E  0870               	movf	i1___lwdiv@divisor,w
  4509     077F  0471               	iorwf	i1___lwdiv@divisor+1,w
  4510     0780  1903               	btfsc	3,2
  4511     0781  2F83               	goto	u135_21
  4512     0782  2F84               	goto	u135_20
  4513     0783                     u135_21:
  4514     0783  2FBB               	goto	i1l2053
  4515     0784                     u135_20:
  4516     0784                     i1l2035:
  4517     0784  01F7               	clrf	i1___lwdiv@counter
  4518     0785  0AF7               	incf	i1___lwdiv@counter,f
  4519     0786  2F92               	goto	i1l2041
  4520     0787                     i1l2037:
  4521     0787  3001               	movlw	1
  4522     0788                     u136_25:
  4523     0788  1003               	clrc
  4524     0789  0DF0               	rlf	i1___lwdiv@divisor,f
  4525     078A  0DF1               	rlf	i1___lwdiv@divisor+1,f
  4526     078B  3EFF               	addlw	-1
  4527     078C  1D03               	skipz
  4528     078D  2F88               	goto	u136_25
  4529     078E                     i1l2039:
  4530     078E  3001               	movlw	1
  4531     078F  00F4               	movwf	??i1___lwdiv
  4532     0790  0874               	movf	??i1___lwdiv,w
  4533     0791  07F7               	addwf	i1___lwdiv@counter,f
  4534     0792                     i1l2041:
  4535     0792  1FF1               	btfss	i1___lwdiv@divisor+1,7
  4536     0793  2F95               	goto	u137_21
  4537     0794  2F96               	goto	u137_20
  4538     0795                     u137_21:
  4539     0795  2F87               	goto	i1l2037
  4540     0796                     u137_20:
  4541     0796                     i1l2043:
  4542     0796  3001               	movlw	1
  4543     0797                     u138_25:
  4544     0797  1003               	clrc
  4545     0798  0DF5               	rlf	i1___lwdiv@quotient,f
  4546     0799  0DF6               	rlf	i1___lwdiv@quotient+1,f
  4547     079A  3EFF               	addlw	-1
  4548     079B  1D03               	skipz
  4549     079C  2F97               	goto	u138_25
  4550     079D  0871               	movf	i1___lwdiv@divisor+1,w
  4551     079E  0273               	subwf	i1___lwdiv@dividend+1,w
  4552     079F  1D03               	skipz
  4553     07A0  2FA3               	goto	u139_25
  4554     07A1  0870               	movf	i1___lwdiv@divisor,w
  4555     07A2  0272               	subwf	i1___lwdiv@dividend,w
  4556     07A3                     u139_25:
  4557     07A3  1C03               	skipc
  4558     07A4  2FA6               	goto	u139_21
  4559     07A5  2FA7               	goto	u139_20
  4560     07A6                     u139_21:
  4561     07A6  2FAE               	goto	i1l2049
  4562     07A7                     u139_20:
  4563     07A7                     i1l2045:
  4564     07A7  0870               	movf	i1___lwdiv@divisor,w
  4565     07A8  02F2               	subwf	i1___lwdiv@dividend,f
  4566     07A9  0871               	movf	i1___lwdiv@divisor+1,w
  4567     07AA  1C03               	skipc
  4568     07AB  03F3               	decf	i1___lwdiv@dividend+1,f
  4569     07AC  02F3               	subwf	i1___lwdiv@dividend+1,f
  4570     07AD                     i1l2047:
  4571     07AD  1475               	bsf	i1___lwdiv@quotient,0
  4572     07AE                     i1l2049:
  4573     07AE  3001               	movlw	1
  4574     07AF                     u140_25:
  4575     07AF  1003               	clrc
  4576     07B0  0CF1               	rrf	i1___lwdiv@divisor+1,f
  4577     07B1  0CF0               	rrf	i1___lwdiv@divisor,f
  4578     07B2  3EFF               	addlw	-1
  4579     07B3  1D03               	skipz
  4580     07B4  2FAF               	goto	u140_25
  4581     07B5                     i1l2051:
  4582     07B5  3001               	movlw	1
  4583     07B6  02F7               	subwf	i1___lwdiv@counter,f
  4584     07B7  1D03               	btfss	3,2
  4585     07B8  2FBA               	goto	u141_21
  4586     07B9  2FBB               	goto	u141_20
  4587     07BA                     u141_21:
  4588     07BA  2F96               	goto	i1l2043
  4589     07BB                     u141_20:
  4590     07BB                     i1l2053:
  4591     07BB  0876               	movf	i1___lwdiv@quotient+1,w
  4592     07BC  00F1               	movwf	?i1___lwdiv+1
  4593     07BD  0875               	movf	i1___lwdiv@quotient,w
  4594     07BE  00F0               	movwf	?i1___lwdiv
  4595     07BF                     i1l679:
  4596     07BF  0008               	return
  4597     07C0                     __end_ofi1___lwdiv:
  4598                           
  4599                           	psect	text20
  4600     0EF7                     __ptext20:	
  4601 ;; *************** function _read_ADC *****************
  4602 ;; Defined at:
  4603 ;;		line 87 in file "ADC_int.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;		None
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  2    0[COMMON] int 
  4610 ;; Registers used:
  4611 ;;		wreg
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4617 ;;      Params:         2       0       0       0       0
  4618 ;;      Locals:         0       0       0       0       0
  4619 ;;      Temps:          2       0       0       0       0
  4620 ;;      Totals:         4       0       0       0       0
  4621 ;;Total ram usage:        4 bytes
  4622 ;; Hardware stack levels used: 1
  4623 ;; This function calls:
  4624 ;;		Nothing
  4625 ;; This function is called by:
  4626 ;;		_isr
  4627 ;; This function uses a non-reentrant model
  4628 ;;
  4629                           
  4630     0EF7                     _read_ADC:	
  4631                           ;psect for function _read_ADC
  4632                           
  4633     0EF7                     i1l2111:	
  4634                           ;incstack = 0
  4635                           ; Regs used in _read_ADC: [wreg]
  4636                           
  4637                           
  4638                           ;ADC_int.c: 88:     return ADRESH;
  4639     0EF7  1283               	bcf	3,5	;RP0=0, select bank0
  4640     0EF8  1303               	bcf	3,6	;RP1=0, select bank0
  4641     0EF9  081E               	movf	30,w	;volatile
  4642     0EFA  00F2               	movwf	??_read_ADC
  4643     0EFB  01F3               	clrf	??_read_ADC+1
  4644     0EFC  0872               	movf	??_read_ADC,w
  4645     0EFD  00F0               	movwf	?_read_ADC
  4646     0EFE  0873               	movf	??_read_ADC+1,w
  4647     0EFF  00F1               	movwf	?_read_ADC+1
  4648     0F00                     i1l150:
  4649     0F00  0008               	return
  4650     0F01                     __end_of_read_ADC:
  4651                           
  4652                           	psect	text21
  4653     06A2                     __ptext21:	
  4654 ;; *************** function _mapear *****************
  4655 ;; Defined at:
  4656 ;;		line 177 in file "Principal.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  valor           2   14[BANK0 ] int 
  4659 ;;  min             2   16[BANK0 ] int 
  4660 ;;  max             2   18[BANK0 ] int 
  4661 ;;  nmin            2   20[BANK0 ] int 
  4662 ;;  nmax            2   22[BANK0 ] int 
  4663 ;; Auto vars:     Size  Location     Type
  4664 ;;  nvalor          2   24[BANK0 ] int 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;                  2   14[BANK0 ] int 
  4667 ;; Registers used:
  4668 ;;		wreg, status,2, status,0, pclath, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4674 ;;      Params:         0      10       0       0       0
  4675 ;;      Locals:         0       2       0       0       0
  4676 ;;      Temps:          0       0       0       0       0
  4677 ;;      Totals:         0      12       0       0       0
  4678 ;;Total ram usage:       12 bytes
  4679 ;; Hardware stack levels used: 1
  4680 ;; Hardware stack levels required when called: 1
  4681 ;; This function calls:
  4682 ;;		___aldiv
  4683 ;;		___lmul
  4684 ;; This function is called by:
  4685 ;;		_isr
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689     06A2                     _mapear:	
  4690                           ;psect for function _mapear
  4691                           
  4692     06A2                     i1l2115:	
  4693                           ;incstack = 0
  4694                           ; Regs used in _mapear: [wreg+status,2+status,0+pclath+cstack]
  4695                           
  4696                           
  4697                           ;Principal.c: 178:     int nvalor = nmin + (valor - min) * (long)(nmax - nmin) / (max - 
      +                          min);
  4698     06A2  1283               	bcf	3,5	;RP0=0, select bank0
  4699     06A3  1303               	bcf	3,6	;RP1=0, select bank0
  4700     06A4  0830               	movf	mapear@min,w
  4701     06A5  0232               	subwf	mapear@max,w
  4702     06A6  00A0               	movwf	___aldiv@divisor
  4703     06A7  0831               	movf	mapear@min+1,w
  4704     06A8  1C03               	skipc
  4705     06A9  0A31               	incf	mapear@min+1,w
  4706     06AA  0233               	subwf	mapear@max+1,w
  4707     06AB  00A1               	movwf	___aldiv@divisor+1
  4708     06AC  01A2               	clrf	___aldiv@divisor+2
  4709     06AD  1BA1               	btfsc	___aldiv@divisor+1,7
  4710     06AE  03A2               	decf	___aldiv@divisor+2,f
  4711     06AF  0822               	movf	___aldiv@divisor+2,w
  4712     06B0  00A3               	movwf	___aldiv@divisor+3
  4713     06B1  0830               	movf	mapear@min,w
  4714     06B2  022E               	subwf	mapear@valor,w
  4715     06B3  00F0               	movwf	___lmul@multiplier
  4716     06B4  0831               	movf	mapear@min+1,w
  4717     06B5  1C03               	skipc
  4718     06B6  0A31               	incf	mapear@min+1,w
  4719     06B7  022F               	subwf	mapear@valor+1,w
  4720     06B8  00F1               	movwf	___lmul@multiplier+1
  4721     06B9  01F2               	clrf	___lmul@multiplier+2
  4722     06BA  1BF1               	btfsc	___lmul@multiplier+1,7
  4723     06BB  03F2               	decf	___lmul@multiplier+2,f
  4724     06BC  0872               	movf	___lmul@multiplier+2,w
  4725     06BD  00F3               	movwf	___lmul@multiplier+3
  4726     06BE  0834               	movf	mapear@nmin,w
  4727     06BF  0236               	subwf	mapear@nmax,w
  4728     06C0  00F4               	movwf	___lmul@multiplicand
  4729     06C1  0835               	movf	mapear@nmin+1,w
  4730     06C2  1C03               	skipc
  4731     06C3  0A35               	incf	mapear@nmin+1,w
  4732     06C4  0237               	subwf	mapear@nmax+1,w
  4733     06C5  00F5               	movwf	___lmul@multiplicand+1
  4734     06C6  01F6               	clrf	___lmul@multiplicand+2
  4735     06C7  1BF5               	btfsc	___lmul@multiplicand+1,7
  4736     06C8  03F6               	decf	___lmul@multiplicand+2,f
  4737     06C9  0876               	movf	___lmul@multiplicand+2,w
  4738     06CA  00F7               	movwf	___lmul@multiplicand+3
  4739     06CB  120A  118A  2736  120A  118A  	fcall	___lmul
  4740     06D0  0873               	movf	?___lmul+3,w
  4741     06D1  1283               	bcf	3,5	;RP0=0, select bank0
  4742     06D2  1303               	bcf	3,6	;RP1=0, select bank0
  4743     06D3  00A7               	movwf	___aldiv@dividend+3
  4744     06D4  0872               	movf	?___lmul+2,w
  4745     06D5  00A6               	movwf	___aldiv@dividend+2
  4746     06D6  0871               	movf	?___lmul+1,w
  4747     06D7  00A5               	movwf	___aldiv@dividend+1
  4748     06D8  0870               	movf	?___lmul,w
  4749     06D9  00A4               	movwf	___aldiv@dividend
  4750     06DA  120A  118A  23D2  120A  118A  	fcall	___aldiv
  4751     06DF  1283               	bcf	3,5	;RP0=0, select bank0
  4752     06E0  1303               	bcf	3,6	;RP1=0, select bank0
  4753     06E1  0834               	movf	mapear@nmin,w
  4754     06E2  0720               	addwf	?___aldiv,w
  4755     06E3  00B8               	movwf	mapear@nvalor
  4756     06E4  0835               	movf	mapear@nmin+1,w
  4757     06E5  1803               	skipnc
  4758     06E6  0A35               	incf	mapear@nmin+1,w
  4759     06E7  0721               	addwf	?___aldiv+1,w
  4760     06E8  00B9               	movwf	mapear@nvalor+1
  4761     06E9                     i1l2117:
  4762                           
  4763                           ;Principal.c: 179:     return nvalor;
  4764     06E9  0839               	movf	mapear@nvalor+1,w
  4765     06EA  00AF               	movwf	?_mapear+1
  4766     06EB  0838               	movf	mapear@nvalor,w
  4767     06EC  00AE               	movwf	?_mapear
  4768     06ED                     i1l106:
  4769     06ED  0008               	return
  4770     06EE                     __end_of_mapear:
  4771                           
  4772                           	psect	text22
  4773     0736                     __ptext22:	
  4774 ;; *************** function ___lmul *****************
  4775 ;; Defined at:
  4776 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\Umul32.c"
  4777 ;; Parameters:    Size  Location     Type
  4778 ;;  multiplier      4    0[COMMON] unsigned long 
  4779 ;;  multiplicand    4    4[COMMON] unsigned long 
  4780 ;; Auto vars:     Size  Location     Type
  4781 ;;  product         4    9[COMMON] unsigned long 
  4782 ;; Return value:  Size  Location     Type
  4783 ;;                  4    0[COMMON] unsigned long 
  4784 ;; Registers used:
  4785 ;;		wreg, status,2, status,0
  4786 ;; Tracked objects:
  4787 ;;		On entry : 0/0
  4788 ;;		On exit  : 0/0
  4789 ;;		Unchanged: 0/0
  4790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4791 ;;      Params:         8       0       0       0       0
  4792 ;;      Locals:         4       0       0       0       0
  4793 ;;      Temps:          1       0       0       0       0
  4794 ;;      Totals:        13       0       0       0       0
  4795 ;;Total ram usage:       13 bytes
  4796 ;; Hardware stack levels used: 1
  4797 ;; This function calls:
  4798 ;;		Nothing
  4799 ;; This function is called by:
  4800 ;;		_mapear
  4801 ;; This function uses a non-reentrant model
  4802 ;;
  4803                           
  4804     0736                     ___lmul:	
  4805                           ;psect for function ___lmul
  4806                           
  4807     0736                     i1l1929:	
  4808                           ;incstack = 0
  4809                           ; Regs used in ___lmul: [wreg+status,2+status,0]
  4810                           
  4811     0736  3000               	movlw	0
  4812     0737  00FC               	movwf	___lmul@product+3
  4813     0738  3000               	movlw	0
  4814     0739  00FB               	movwf	___lmul@product+2
  4815     073A  3000               	movlw	0
  4816     073B  00FA               	movwf	___lmul@product+1
  4817     073C  3000               	movlw	0
  4818     073D  00F9               	movwf	___lmul@product
  4819     073E                     i1l1931:
  4820     073E  1C70               	btfss	___lmul@multiplier,0
  4821     073F  2F41               	goto	u107_21
  4822     0740  2F42               	goto	u107_20
  4823     0741                     u107_21:
  4824     0741  2F59               	goto	i1l1935
  4825     0742                     u107_20:
  4826     0742                     i1l1933:
  4827     0742  0874               	movf	___lmul@multiplicand,w
  4828     0743  07F9               	addwf	___lmul@product,f
  4829     0744  0875               	movf	___lmul@multiplicand+1,w
  4830     0745  1103               	clrz
  4831     0746  1803               	skipnc
  4832     0747  3E01               	addlw	1
  4833     0748  1903               	skipnz
  4834     0749  2F4B               	goto	u108_21
  4835     074A  07FA               	addwf	___lmul@product+1,f
  4836     074B                     u108_21:
  4837     074B  0876               	movf	___lmul@multiplicand+2,w
  4838     074C  1103               	clrz
  4839     074D  1803               	skipnc
  4840     074E  3E01               	addlw	1
  4841     074F  1903               	skipnz
  4842     0750  2F52               	goto	u108_22
  4843     0751  07FB               	addwf	___lmul@product+2,f
  4844     0752                     u108_22:
  4845     0752  0877               	movf	___lmul@multiplicand+3,w
  4846     0753  1103               	clrz
  4847     0754  1803               	skipnc
  4848     0755  3E01               	addlw	1
  4849     0756  1903               	skipnz
  4850     0757  2F59               	goto	u108_23
  4851     0758  07FC               	addwf	___lmul@product+3,f
  4852     0759                     u108_23:
  4853     0759                     i1l1935:
  4854     0759  3001               	movlw	1
  4855     075A  00F8               	movwf	??___lmul
  4856     075B                     u109_25:
  4857     075B  1003               	clrc
  4858     075C  0DF4               	rlf	___lmul@multiplicand,f
  4859     075D  0DF5               	rlf	___lmul@multiplicand+1,f
  4860     075E  0DF6               	rlf	___lmul@multiplicand+2,f
  4861     075F  0DF7               	rlf	___lmul@multiplicand+3,f
  4862     0760  0BF8               	decfsz	??___lmul,f
  4863     0761  2F5B               	goto	u109_25
  4864     0762                     i1l1937:
  4865     0762  3001               	movlw	1
  4866     0763                     u110_25:
  4867     0763  1003               	clrc
  4868     0764  0CF3               	rrf	___lmul@multiplier+3,f
  4869     0765  0CF2               	rrf	___lmul@multiplier+2,f
  4870     0766  0CF1               	rrf	___lmul@multiplier+1,f
  4871     0767  0CF0               	rrf	___lmul@multiplier,f
  4872     0768  3EFF               	addlw	-1
  4873     0769  1D03               	skipz
  4874     076A  2F63               	goto	u110_25
  4875     076B  0873               	movf	___lmul@multiplier+3,w
  4876     076C  0472               	iorwf	___lmul@multiplier+2,w
  4877     076D  0471               	iorwf	___lmul@multiplier+1,w
  4878     076E  0470               	iorwf	___lmul@multiplier,w
  4879     076F  1D03               	skipz
  4880     0770  2F72               	goto	u111_21
  4881     0771  2F73               	goto	u111_20
  4882     0772                     u111_21:
  4883     0772  2F3E               	goto	i1l1931
  4884     0773                     u111_20:
  4885     0773                     i1l1939:
  4886     0773  087C               	movf	___lmul@product+3,w
  4887     0774  00F3               	movwf	?___lmul+3
  4888     0775  087B               	movf	___lmul@product+2,w
  4889     0776  00F2               	movwf	?___lmul+2
  4890     0777  087A               	movf	___lmul@product+1,w
  4891     0778  00F1               	movwf	?___lmul+1
  4892     0779  0879               	movf	___lmul@product,w
  4893     077A  00F0               	movwf	?___lmul
  4894     077B                     i1l421:
  4895     077B  0008               	return
  4896     077C                     __end_of___lmul:
  4897                           
  4898                           	psect	text23
  4899     03D2                     __ptext23:	
  4900 ;; *************** function ___aldiv *****************
  4901 ;; Defined at:
  4902 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.40\pic\sources\c90\common\aldiv.c"
  4903 ;; Parameters:    Size  Location     Type
  4904 ;;  divisor         4    0[BANK0 ] long 
  4905 ;;  dividend        4    4[BANK0 ] long 
  4906 ;; Auto vars:     Size  Location     Type
  4907 ;;  quotient        4   10[BANK0 ] long 
  4908 ;;  sign            1    9[BANK0 ] unsigned char 
  4909 ;;  counter         1    8[BANK0 ] unsigned char 
  4910 ;; Return value:  Size  Location     Type
  4911 ;;                  4    0[BANK0 ] long 
  4912 ;; Registers used:
  4913 ;;		wreg, status,2, status,0
  4914 ;; Tracked objects:
  4915 ;;		On entry : 0/0
  4916 ;;		On exit  : 0/0
  4917 ;;		Unchanged: 0/0
  4918 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4919 ;;      Params:         0       8       0       0       0
  4920 ;;      Locals:         0       6       0       0       0
  4921 ;;      Temps:          1       0       0       0       0
  4922 ;;      Totals:         1      14       0       0       0
  4923 ;;Total ram usage:       15 bytes
  4924 ;; Hardware stack levels used: 1
  4925 ;; This function calls:
  4926 ;;		Nothing
  4927 ;; This function is called by:
  4928 ;;		_mapear
  4929 ;; This function uses a non-reentrant model
  4930 ;;
  4931                           
  4932     03D2                     ___aldiv:	
  4933                           ;psect for function ___aldiv
  4934                           
  4935     03D2                     i1l1943:	
  4936                           ;incstack = 0
  4937                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  4938                           
  4939     03D2  1283               	bcf	3,5	;RP0=0, select bank0
  4940     03D3  1303               	bcf	3,6	;RP1=0, select bank0
  4941     03D4  01A9               	clrf	___aldiv@sign
  4942     03D5                     i1l1945:
  4943     03D5  1FA3               	btfss	___aldiv@divisor+3,7
  4944     03D6  2BD8               	goto	u112_21
  4945     03D7  2BD9               	goto	u112_20
  4946     03D8                     u112_21:
  4947     03D8  2BE6               	goto	i1l472
  4948     03D9                     u112_20:
  4949     03D9                     i1l1947:
  4950     03D9  09A0               	comf	___aldiv@divisor,f
  4951     03DA  09A1               	comf	___aldiv@divisor+1,f
  4952     03DB  09A2               	comf	___aldiv@divisor+2,f
  4953     03DC  09A3               	comf	___aldiv@divisor+3,f
  4954     03DD  0AA0               	incf	___aldiv@divisor,f
  4955     03DE  1903               	skipnz
  4956     03DF  0AA1               	incf	___aldiv@divisor+1,f
  4957     03E0  1903               	skipnz
  4958     03E1  0AA2               	incf	___aldiv@divisor+2,f
  4959     03E2  1903               	skipnz
  4960     03E3  0AA3               	incf	___aldiv@divisor+3,f
  4961     03E4  01A9               	clrf	___aldiv@sign
  4962     03E5  0AA9               	incf	___aldiv@sign,f
  4963     03E6                     i1l472:
  4964     03E6  1FA7               	btfss	___aldiv@dividend+3,7
  4965     03E7  2BE9               	goto	u113_21
  4966     03E8  2BEA               	goto	u113_20
  4967     03E9                     u113_21:
  4968     03E9  2BF9               	goto	i1l1953
  4969     03EA                     u113_20:
  4970     03EA                     i1l1949:
  4971     03EA  09A4               	comf	___aldiv@dividend,f
  4972     03EB  09A5               	comf	___aldiv@dividend+1,f
  4973     03EC  09A6               	comf	___aldiv@dividend+2,f
  4974     03ED  09A7               	comf	___aldiv@dividend+3,f
  4975     03EE  0AA4               	incf	___aldiv@dividend,f
  4976     03EF  1903               	skipnz
  4977     03F0  0AA5               	incf	___aldiv@dividend+1,f
  4978     03F1  1903               	skipnz
  4979     03F2  0AA6               	incf	___aldiv@dividend+2,f
  4980     03F3  1903               	skipnz
  4981     03F4  0AA7               	incf	___aldiv@dividend+3,f
  4982     03F5                     i1l1951:
  4983     03F5  3001               	movlw	1
  4984     03F6  00FD               	movwf	??___aldiv
  4985     03F7  087D               	movf	??___aldiv,w
  4986     03F8  06A9               	xorwf	___aldiv@sign,f
  4987     03F9                     i1l1953:
  4988     03F9  3000               	movlw	0
  4989     03FA  00AD               	movwf	___aldiv@quotient+3
  4990     03FB  3000               	movlw	0
  4991     03FC  00AC               	movwf	___aldiv@quotient+2
  4992     03FD  3000               	movlw	0
  4993     03FE  00AB               	movwf	___aldiv@quotient+1
  4994     03FF  3000               	movlw	0
  4995     0400  00AA               	movwf	___aldiv@quotient
  4996     0401                     i1l1955:
  4997     0401  0823               	movf	___aldiv@divisor+3,w
  4998     0402  0422               	iorwf	___aldiv@divisor+2,w
  4999     0403  0421               	iorwf	___aldiv@divisor+1,w
  5000     0404  0420               	iorwf	___aldiv@divisor,w
  5001     0405  1903               	skipnz
  5002     0406  2C08               	goto	u114_21
  5003     0407  2C09               	goto	u114_20
  5004     0408                     u114_21:
  5005     0408  2C56               	goto	i1l1975
  5006     0409                     u114_20:
  5007     0409                     i1l1957:
  5008     0409  01A8               	clrf	___aldiv@counter
  5009     040A  0AA8               	incf	___aldiv@counter,f
  5010     040B  2C19               	goto	i1l1961
  5011     040C                     i1l1959:
  5012     040C  3001               	movlw	1
  5013     040D  00FD               	movwf	??___aldiv
  5014     040E                     u115_25:
  5015     040E  1003               	clrc
  5016     040F  0DA0               	rlf	___aldiv@divisor,f
  5017     0410  0DA1               	rlf	___aldiv@divisor+1,f
  5018     0411  0DA2               	rlf	___aldiv@divisor+2,f
  5019     0412  0DA3               	rlf	___aldiv@divisor+3,f
  5020     0413  0BFD               	decfsz	??___aldiv,f
  5021     0414  2C0E               	goto	u115_25
  5022     0415  3001               	movlw	1
  5023     0416  00FD               	movwf	??___aldiv
  5024     0417  087D               	movf	??___aldiv,w
  5025     0418  07A8               	addwf	___aldiv@counter,f
  5026     0419                     i1l1961:
  5027     0419  1FA3               	btfss	___aldiv@divisor+3,7
  5028     041A  2C1C               	goto	u116_21
  5029     041B  2C1D               	goto	u116_20
  5030     041C                     u116_21:
  5031     041C  2C0C               	goto	i1l1959
  5032     041D                     u116_20:
  5033     041D                     i1l1963:
  5034     041D  3001               	movlw	1
  5035     041E  00FD               	movwf	??___aldiv
  5036     041F                     u117_25:
  5037     041F  1003               	clrc
  5038     0420  0DAA               	rlf	___aldiv@quotient,f
  5039     0421  0DAB               	rlf	___aldiv@quotient+1,f
  5040     0422  0DAC               	rlf	___aldiv@quotient+2,f
  5041     0423  0DAD               	rlf	___aldiv@quotient+3,f
  5042     0424  0BFD               	decfsz	??___aldiv,f
  5043     0425  2C1F               	goto	u117_25
  5044     0426                     i1l1965:
  5045     0426  0823               	movf	___aldiv@divisor+3,w
  5046     0427  0227               	subwf	___aldiv@dividend+3,w
  5047     0428  1D03               	skipz
  5048     0429  2C34               	goto	u118_25
  5049     042A  0822               	movf	___aldiv@divisor+2,w
  5050     042B  0226               	subwf	___aldiv@dividend+2,w
  5051     042C  1D03               	skipz
  5052     042D  2C34               	goto	u118_25
  5053     042E  0821               	movf	___aldiv@divisor+1,w
  5054     042F  0225               	subwf	___aldiv@dividend+1,w
  5055     0430  1D03               	skipz
  5056     0431  2C34               	goto	u118_25
  5057     0432  0820               	movf	___aldiv@divisor,w
  5058     0433  0224               	subwf	___aldiv@dividend,w
  5059     0434                     u118_25:
  5060     0434  1C03               	skipc
  5061     0435  2C37               	goto	u118_21
  5062     0436  2C38               	goto	u118_20
  5063     0437                     u118_21:
  5064     0437  2C47               	goto	i1l1971
  5065     0438                     u118_20:
  5066     0438                     i1l1967:
  5067     0438  0820               	movf	___aldiv@divisor,w
  5068     0439  02A4               	subwf	___aldiv@dividend,f
  5069     043A  0821               	movf	___aldiv@divisor+1,w
  5070     043B  1C03               	skipc
  5071     043C  0F21               	incfsz	___aldiv@divisor+1,w
  5072     043D  02A5               	subwf	___aldiv@dividend+1,f
  5073     043E  0822               	movf	___aldiv@divisor+2,w
  5074     043F  1C03               	skipc
  5075     0440  0F22               	incfsz	___aldiv@divisor+2,w
  5076     0441  02A6               	subwf	___aldiv@dividend+2,f
  5077     0442  0823               	movf	___aldiv@divisor+3,w
  5078     0443  1C03               	skipc
  5079     0444  0F23               	incfsz	___aldiv@divisor+3,w
  5080     0445  02A7               	subwf	___aldiv@dividend+3,f
  5081     0446                     i1l1969:
  5082     0446  142A               	bsf	___aldiv@quotient,0
  5083     0447                     i1l1971:
  5084     0447  3001               	movlw	1
  5085     0448                     u119_25:
  5086     0448  1003               	clrc
  5087     0449  0CA3               	rrf	___aldiv@divisor+3,f
  5088     044A  0CA2               	rrf	___aldiv@divisor+2,f
  5089     044B  0CA1               	rrf	___aldiv@divisor+1,f
  5090     044C  0CA0               	rrf	___aldiv@divisor,f
  5091     044D  3EFF               	addlw	-1
  5092     044E  1D03               	skipz
  5093     044F  2C48               	goto	u119_25
  5094     0450                     i1l1973:
  5095     0450  3001               	movlw	1
  5096     0451  02A8               	subwf	___aldiv@counter,f
  5097     0452  1D03               	btfss	3,2
  5098     0453  2C55               	goto	u120_21
  5099     0454  2C56               	goto	u120_20
  5100     0455                     u120_21:
  5101     0455  2C1D               	goto	i1l1963
  5102     0456                     u120_20:
  5103     0456                     i1l1975:
  5104     0456  0829               	movf	___aldiv@sign,w
  5105     0457  1903               	btfsc	3,2
  5106     0458  2C5A               	goto	u121_21
  5107     0459  2C5B               	goto	u121_20
  5108     045A                     u121_21:
  5109     045A  2C66               	goto	i1l1979
  5110     045B                     u121_20:
  5111     045B                     i1l1977:
  5112     045B  09AA               	comf	___aldiv@quotient,f
  5113     045C  09AB               	comf	___aldiv@quotient+1,f
  5114     045D  09AC               	comf	___aldiv@quotient+2,f
  5115     045E  09AD               	comf	___aldiv@quotient+3,f
  5116     045F  0AAA               	incf	___aldiv@quotient,f
  5117     0460  1903               	skipnz
  5118     0461  0AAB               	incf	___aldiv@quotient+1,f
  5119     0462  1903               	skipnz
  5120     0463  0AAC               	incf	___aldiv@quotient+2,f
  5121     0464  1903               	skipnz
  5122     0465  0AAD               	incf	___aldiv@quotient+3,f
  5123     0466                     i1l1979:
  5124     0466  082D               	movf	___aldiv@quotient+3,w
  5125     0467  00A3               	movwf	?___aldiv+3
  5126     0468  082C               	movf	___aldiv@quotient+2,w
  5127     0469  00A2               	movwf	?___aldiv+2
  5128     046A  082B               	movf	___aldiv@quotient+1,w
  5129     046B  00A1               	movwf	?___aldiv+1
  5130     046C  082A               	movf	___aldiv@quotient,w
  5131     046D  00A0               	movwf	?___aldiv
  5132     046E                     i1l482:
  5133     046E  0008               	return
  5134     046F                     __end_of___aldiv:
  5135     007E                     btemp	set	126	;btemp
  5136     007E                     wtemp0	set	126
  5137                           
  5138                           	psect	idloc
  5139                           
  5140                           ;Config register IDLOC0 @ 0x2000
  5141                           ;	unspecified, using default values
  5142     2000                     	org	8192
  5143     2000  3FFF               	dw	16383
  5144                           
  5145                           ;Config register IDLOC1 @ 0x2001
  5146                           ;	unspecified, using default values
  5147     2001                     	org	8193
  5148     2001  3FFF               	dw	16383
  5149                           
  5150                           ;Config register IDLOC2 @ 0x2002
  5151                           ;	unspecified, using default values
  5152     2002                     	org	8194
  5153     2002  3FFF               	dw	16383
  5154                           
  5155                           ;Config register IDLOC3 @ 0x2003
  5156                           ;	unspecified, using default values
  5157     2003                     	org	8195
  5158     2003  3FFF               	dw	16383
  5159                           
  5160                           	psect	config
  5161                           
  5162                           ;Config register CONFIG1 @ 0x2007
  5163                           ;	Oscillator Selection bits
  5164                           ;	FOSC = INTRC_NOCLKOUT, INTOSCIO oscillator: I/O function on RA6/OSC2/CLKOUT pin, I/O f
      +                          unction on RA7/OSC1/CLKIN
  5165                           ;	Watchdog Timer Enable bit
  5166                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  5167                           ;	Power-up Timer Enable bit
  5168                           ;	PWRTE = OFF, PWRT disabled
  5169                           ;	RE3/MCLR pin function select bit
  5170                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  5171                           ;	Code Protection bit
  5172                           ;	CP = OFF, Program memory code protection is disabled
  5173                           ;	Data Code Protection bit
  5174                           ;	CPD = OFF, Data memory code protection is disabled
  5175                           ;	Brown Out Reset Selection bits
  5176                           ;	BOREN = OFF, BOR disabled
  5177                           ;	Internal External Switchover bit
  5178                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  5179                           ;	Fail-Safe Clock Monitor Enabled bit
  5180                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  5181                           ;	Low Voltage Programming Enable bit
  5182                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  5183                           ;	In-Circuit Debugger Mode bit
  5184                           ;	DEBUG = 0x1, unprogramme  5185     2007                     	org	8199
  5186     2007  20D4               	dw	8404
  5187                           
  5188                           ;Config register CONFIG2 @ 0x2008
  5189                           ;	Brown-out Reset Selection bit
  5190                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  5191                           ;	Flash Program Memory Self Write Enable bits
  5192                           ;	WRT = OFF, Write protection off
  5193     2008                     	org	8200
  5194     2008  3FFF               	dw	16383

Data Sizes:
    Strings     57
    Constant    10
    Data        1
    BSS         15
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     39      48
    BANK1            80     22      29
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_6(CODE[3]), STR_1(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 2
		 -> charcontador(BANK1[2]), cADC(BANK0[2]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK1[2]), 

    UART_write_string@txt	PTR unsigned char  size(1) Largest target is 23
		 -> STR_3(CODE[17]), STR_2(CODE[23]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 9
		 -> charcontador(BANK1[2]), STR_5(CODE[9]), STR_4(CODE[5]), ncADC(BANK1[4]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    i1_sprintf->i1___lwmod
    i1___lwmod->i1___lwdiv
    _mapear->___aldiv
    ___aldiv->___lmul

Critical Paths under _main in BANK0

    _main->_Lcd_Write_String
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_UART_config
    _UART_write_string->_UART_write_char
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _isr in BANK0

    _isr->_mapear
    _mapear->___aldiv

Critical Paths under _main in BANK1

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv
    _setup->_UART_config

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    4219
                                             20 BANK1      2     2      0
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                  _UART_write_string
                              _setup
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1746
                                              7 BANK1     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     412
                                             37 BANK0      2     2      0
                                              3 BANK1      4     0      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                             32 BANK0      5     1      4
                                              0 BANK1      3     3      0
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0     399
                        _UART_config
                          _setup_ADC
 ---------------------------------------------------------------------------------
 (2) _setup_ADC                                            2     0      2      98
                                             32 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _UART_config                                          9     2      7     301
                                             32 BANK0      7     0      7
                                              0 BANK1      2     2      0
 ---------------------------------------------------------------------------------
 (1) _UART_write_string                                    3     3      0     178
                                             34 BANK0      3     3      0
                    _UART_write_char
 ---------------------------------------------------------------------------------
 (2) _UART_write_char                                      2     2      0      22
                                             32 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     688
                                             35 BANK0      4     2      2
                                              0 BANK1      3     3      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0     198
                                             33 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       3     2      1     636
                                             35 BANK0      3     2      1
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0     374
                                             35 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0     198
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              2     2      0     198
                                             33 BANK0      2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0     176
                                             32 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  6     6      0    2181
                                             26 BANK0      6     6      0
                             _mapear
                           _read_ADC
                          i1_sprintf
 ---------------------------------------------------------------------------------
 (5) i1_sprintf                                           21    18      3     928
                                              0 BANK0     13    10      3
                          i1___lwdiv
                          i1___lwmod
 ---------------------------------------------------------------------------------
 (6) i1___lwmod                                            6     2      4     211
                                              8 COMMON     6     2      4
                          i1___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (6) i1___lwdiv                                            8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (5) _read_ADC                                             4     2      2       0
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 (5) _mapear                                              12     2     10    1253
                                             14 BANK0     12     2     10
                            ___aldiv
                             ___lmul
 ---------------------------------------------------------------------------------
 (6) ___lmul                                              13     5      8     244
                                              0 COMMON    13     5      8
 ---------------------------------------------------------------------------------
 (6) ___aldiv                                             15     7      8     452
                                             13 COMMON     1     1      0
                                              0 BANK0     14     6      8
                             ___lmul (ARG)
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _UART_write_string
     _UART_write_char
   _setup
     _UART_config
     _setup_ADC
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _isr (ROOT)
   _mapear
     ___aldiv
       ___lmul (ARG)
     ___lmul
   _read_ADC
   i1_sprintf
     i1___lwdiv
     i1___lwmod
       i1___lwdiv (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50     16      1D       7       36.2%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     27      30       5       60.0%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      E       E       1      100.0%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      5B      12        0.0%
ABS                  0      0      5B       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.40 build 20220703182018 
Symbol Table                                                                                   Wed Jul 26 00:35:16 2023

                        pc 0002                         l71 05FA                         l96 00A5  
                       fsr 0004                        l210 07D0                        l211 07D1  
                      l220 07F3                        l212 07D7                        l132 0308  
                      l221 07F4                        l213 07D8                        l222 07FA  
                      l214 07DE                        l230 0EF6                        l215 07DF  
                      l224 07FB                        l216 07E5                        l208 07C9  
                      l217 07E6                        l209 07CA                        l218 07EC  
                      l242 0F29                        l219 07ED                        l227 0F42  
                      l147 03D1                        l403 0221                        l236 0F64  
                      l239 06A1                        _ADC 004B                        l248 0559  
                      l280 0FFF                        l290 0F8A                        l284 0F11  
                      l679 05B8                        l689 0735                        u980 07C7  
                      u981 07C6                        u990 07CE                        u991 07CD  
                      _isr 046F                        fsr0 0004                        indf 0000  
                     l2201 0F7D                       l2211 0F5B                       l2203 0F46  
                     l2213 0F5E                       l2205 0F4B                       l2207 0F4E  
                     l2209 0F55                       l2501 0572                       l2191 0678  
                     l2183 0653                       l2511 059C                       l2503 0578  
                     l2193 0EF0                       l2185 0659                       l1801 031E  
                     l2513 05A4                       l2505 057E                       l2521 06F6  
                     l2187 0664                       l2195 0F68                       l1811 0330  
                     l1803 0321                       l2507 0593                       l2515 05AC  
                     l2531 071A                       l2523 06FB                       l2611 01B1  
                     l2603 0185                       l2189 0672                       l2197 0F6A  
                     l1821 0342                       l1813 0334                       l1805 0325  
                     l2541 05B9                       l2509 0599                       l2533 0720  
                     l2525 0702                       l2621 0200                       l2613 01B6  
                     l1911 0F3F                       l1903 0F2D                       l2199 0F77  
                     l2471 0FC9                       l1831 0355                       l1823 0346  
                     l1815 0337                       l1807 0329                       l2551 05E6  
                     l2543 05C1                       l2535 0727                       l2527 0708  
                     l2519 06EE                       l2623 0204                       l2615 01BA  
                     l2607 01A1                       l1905 0F2E                       l1921 0F26  
                     l1913 0F15                       l2641 052D                       l2481 0FDA  
                     l2473 0FCA                       l1841 0367                       l1833 0358  
                     l1825 034A                       l1817 033B                       l1809 032C  
                     l2561 05EF                       l2553 05E9                       l2545 05C4  
                     l2529 070E                       l2537 072F                       l2617 01BD  
                     l2609 01AB                       l2625 020D                       l1771 07CE  
                     l1907 0F34                       l1915 0F16                       l2635 04F4  
                     l1923 0F04                       l2483 0FDF                       l2475 0FCF  
                     l1851 0379                       l1843 036B                       l1835 035C  
                     l1827 034D                       l1819 033F                       l2563 05F0  
                     l2555 05EA                       l2547 05C7                       l2619 01FB  
                     l2627 021D                       l2651 0047                       l2643 0032  
                     l1781 07F1                       l1773 07D5                       l1909 0F37  
                     l1917 0F1C                       l2637 04F9                       l1925 0F08  
                     l2477 0FD3                       l2469 0FC5                       l1861 038C  
                     l1853 037D                       l1845 036E                       l1837 0360  
                     l1829 0351                       l2565 05F1                       l2557 05EB  
                     l2549 05D1                       l2493 055A                       l2581 014C  
                     l2573 0139                       l2661 0068                       l2653 004F  
                     l2645 0037                       l1783 07F8                       l1775 07DC  
                     l1767 07C3                       l1919 0F1F                       l2639 0525  
                     l2479 0FD7                       l2487 0FE8                       l1863 038F  
                     l1855 0381                       l1847 0372                       l1839 0363  
                     l1791 0306                       l2567 05F3                       l2559 05EE  
                     l2495 055E                       l2591 0176                       l2575 013C  
                     l2671 009D                       l2663 006E                       l2655 0052  
                     l2647 003C                       l1777 07E3                       l1769 07C7  
                     l1865 0393                       l1857 0384                       l1849 0376  
                     l1793 030F                       l1873 039E                       l1785 02FC  
                     l2569 05F6                       l2497 0566                       l2593 017A  
                     l2585 014D                       l2577 0142                       l2681 00D1  
                     l2673 00B9                       l2665 0076                       l2657 0058  
                     l2649 0041                       l1779 07EA                       l1867 0397  
                     l1859 0388                       l1795 0313                       l1787 0300  
                     l2499 056B                       l2595 017E                       l2587 016A  
                     l2579 0147                       l2691 010C                       l2683 00DC  
                     l2675 00BA                       l2667 0085                       l2659 0064  
                     l1869 039A                       l1797 0316                       l1789 0303  
                     l2597 0183                       l2589 0172                       l2781 015F  
                     l2693 0114                       l2685 00E6                       l2677 00C5  
                     l2669 008E                       l2783 03A5                       l1799 031A  
                     l2695 011B                       l2687 00F1                       l2679 00C9  
                     l2785 0FF4                       l2697 0121                       l2689 00FB  
                     l2699 0127                       ?_isr 0070                       STR_1 0650  
                     STR_2 061A                       STR_3 0631                       STR_4 064B  
                     STR_5 0642                       STR_6 0650                       u1000 07D5  
                     u1001 07D4                       u1010 07DC                       u1011 07DB  
                     u1020 07E3                       u1021 07E2                       u1030 07EA  
                     u1031 07E9                       u1040 07F1                       u2000 021D  
                     u1041 07F0                       u2001 021C                       u1050 07F8  
                     u2010 050D                       u1051 07F7                       u2020 0541  
                     u1060 0F08                       u2100 0121                       u1061 0F07  
                     u2101 0120                       u2030 0559                       u2031 0558  
                     u2040 0047                       u2041 0046                       u2050 0058  
                     u2051 0057                       u2060 006E                       u2061 006D  
                     u2117 004B                       u2070 0085                       u2127 0F0E  
                     u2071 0084                       u2080 009D                       u2137 0F23  
                     u2081 009C                       u2090 0114                       u2147 065F  
                     u2091 0113                       u2075 0081                       u2157 066E  
                     u2085 0099                       u1550 0F8A                       u2167 067E  
                     u1551 0F89                       u1560 0F4B                       u2177 0F3B  
                     u1561 0F4A                       u1570 0F5B                       u1810 0566  
                     u1571 0F5A                       u1811 0565                       u1900 070E  
                     u1901 070D                       u1830 057E                       u1910 071A  
                     u1831 057D                       u1911 0719                       _PIE1 008C  
                     u1825 056C                       u1850 0593                       u1930 072F  
                     u1851 0592                       u1931 072E                       u1915 0716  
                     u1940 0142                       u1845 0581                       u1925 0721  
                     u1941 0141                       u1870 05AC                       u1950 017A  
                     u1871 05AB                       u1855 058F                       u1951 0179  
                     u1880 06F6                       u1960 01A0                       u1865 059E  
                     u1881 06F5                       u1961 019F                       u1970 01AB  
                     u1971 01AA                       u1980 01B1                       u1981 01B0  
                     u1965 019C                       u1990 020D                       u1895 06FC  
                     u1991 020C                       _PIR1 000C                       i1l85 04E9  
                     _cADC 004D          ?_Lcd_Write_String 0043                       _main 0032  
                     btemp 007E                       start 0012         ??_Lcd_Write_String 00A0  
          __end_of_Lcd_Cmd 0F43           UART_write_char@a 0041                      ??_isr 003A  
          __end_of___aldiv 046F                      ?_main 0070                      _ANSEL 0188  
          __end_of___lwdiv 05B9                      i1l106 06ED                      i1l150 0F00  
                    i1l403 02FB                      i1l421 077B            __end_of___lwmod 0736  
                    i1l472 03E6                      i1l482 046E                      i1l679 07BF  
                    i1l689 0FC4                      _RCREG 001A                      _RCSTA 0018  
                    _SPBRG 0099                      _PORTA 0005                      _PORTB 0006  
                    _PORTD 0008                      _PORTE 0009                      _TRISB 0086  
                    _TRISD 0088                      _TRISE 0089                      _TXREG 0019  
                    _TXSTA 0098        ___lmul@multiplicand 0074         i1___lwmod@dividend 007A  
                    _ncADC 00B7            __end_of_dpowers 061A                      _setup 05B9  
                    pclath 000A                      status 0003                      wtemp0 007E  
          __end_of_sprintf 0222                mapear@valor 002E           __end_of_Lcd_Init 06A2  
         __end_of_Lcd_Port 07FC            __initialization 0015               __end_of_main 0136  
               i1sprintf@c 002C                 i1sprintf@f 0020                     ??_main 00B4  
          UART_config@fosc 0042                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     ?_setup 0070                     _ANSELH 0189  
                   u110_25 0763                     i1l2111 0EF7                     i1l2031 077C  
                   u111_20 0773                     u111_21 0772                     i1l2041 0792  
                   i1l2033 077E                     i1l2115 06A2                     i1l2051 07B5  
                   i1l2043 0796                     i1l2035 0784                     i1l2117 06E9  
                   i1l2045 07A7                     i1l2037 0787                     i1l2053 07BB  
                   i1l2061 0F94                     i1l2301 04B6                     i1l2047 07AD  
                   i1l2039 078E                     i1l2071 0FB3                     i1l2063 0F9B  
                   i1l2231 0238                     i1l2223 0225                     i1l2311 04D8  
                   i1l2303 04BD                     u120_20 0456                     u112_20 03D9  
                   u120_21 0455                     u112_21 03D8                     i1l2049 07AE  
                   i1l2073 0FBA                     i1l2065 0F9F                     i1l2057 0F8B  
                   i1l2241 0262                     i1l2225 0228                     i1l2305 04C4  
                   i1l2321 04E7                     i1l2067 0FA3                     i1l2059 0F91  
                   i1l2075 0FC0                     i1l2243 0266                     i1l2235 0239  
                   i1l2227 022E                     i1l2323 04E8                     i1l2307 04CA  
                   i1l2315 04DD                     i1l2069 0FAD                     i1l2261 029D  
                   i1l2253 0271                     i1l2245 026A                     i1l2237 0256  
                   i1l2229 0233                     i1l2317 04E3                     i1l2309 04D1  
                   i1l2271 02DA                     i1l2263 02A2                     i1l2247 026F  
                   i1l2239 025E                     i1l2319 04E5                     u121_20 045B  
                   u113_20 03EA                     u121_21 045A                     u113_21 03E9  
                   i1l2273 02DE                     i1l2265 02A6                     i1l2257 028D  
                   i1l2267 02A9                     i1l2259 0297                     i1l2275 02E7  
                   i1l2291 049B                     i1l2269 02D5                     i1l2277 02F7  
                   i1l2293 04A7                     i1l2285 046F                     i1l2295 04AD  
                   i1l2287 0473                     u114_20 0409                     u114_21 0408  
                   i1l2297 04AF                     i1l2289 047E                     i1l1931 073E  
                   i1l1933 0742                     i1l1951 03F5                     i1l1943 03D2  
                   i1l1935 0759                     u107_20 0742                     i1l1961 0419  
                   i1l1953 03F9                     i1l1945 03D5                     i1l1937 0762  
                   u107_21 0741                     i1l1929 0736                     i1l1971 0447  
                   i1l1963 041D                     i1l1955 0401                     i1l1947 03D9  
                   i1l1939 0773                     i1l1973 0450                     i1l1965 0426  
                   u115_25 040E                     i1l1957 0409                     i1l1949 03EA  
                   i1l1967 0438                     i1l1959 040C                     i1l1975 0456  
                   u116_20 041D                     i1l1977 045B                     i1l1969 0446  
                   u116_21 041C                     u108_21 074B                     u108_22 0752  
                   i1l1979 0466                     u108_23 0759                     i1l2787 024B  
                   u140_25 07AF                     u141_20 07BB                     u141_21 07BA  
                   u117_25 041F                     u109_25 075B                     u118_20 0438  
                   u142_20 0F91                     u118_21 0437                     u142_21 0F90  
                   u118_25 0434                     u135_20 0784                     u135_21 0783  
                   u119_25 0448                     u143_25 0F95                     u144_20 0FA3  
                   u144_21 0FA2                     u136_25 0788                     u137_20 0796  
                   u145_20 0FAD                     u161_20 022E                     _INTCON 000B  
                   u137_21 0795                     u145_21 0FAC                     u161_21 022D  
                   u145_25 0FA9                     u162_20 0266                     u170_20 04B5  
                   u162_21 0265                     u170_21 04B4                     u138_25 0797  
                   u146_25 0FB4                     u139_20 07A7                     u147_20 0FC0  
                   u163_20 028C                     u171_20 04C4                     u139_21 07A6  
                   u147_21 0FBF                     u163_21 028B                     u171_21 04C3  
                   u139_25 07A3                     u163_25 0288                     u164_20 0297  
                   u172_20 04D8                     u164_21 0296                     u172_21 04D7  
                   u165_20 029D                     u173_20 04E3                     u165_21 029C  
                   u173_21 04E2                     u166_20 02E7                     u166_21 02E6  
                   u167_20 02F7                     u167_21 02F6                     u168_20 0473  
                   u168_21 0472                     u169_20 04AD                     u169_21 04AC  
                   _OSCCON 008F                  ??_Lcd_Cmd 0041                     _SPBRGH 009A  
            i1sprintf@flag 0027              i1sprintf@prec 0028                     ___lmul 0736  
                ??___aldiv 007D               ?_UART_config 0040       UART_config@conection 0046  
                ??___lwdiv 0044           __end_of_read_ADC 0F01                  ??___lwmod 0045  
                   _mapear 06A2          __end_ofi1___lwdiv 07C0          __end_ofi1___lwmod 0FC5  
          _UART_write_char 0F01                     saved_w 007E                  ??_sprintf 00AA  
          Lcd_Set_Cursor@a 0044            Lcd_Set_Cursor@b 0043    __end_of__initialization 002E  
             mapear@nvalor 0038          __end_ofi1_sprintf 02FC          __end_of_Lcd_Clear 0EF7  
           __pcstackCOMMON 0070               __pidataBANK0 07FC              __end_of_setup 05FB  
             _charcontador 00BB             _Lcd_Set_Cursor 0F43                i1sprintf@ap 0026  
              i1sprintf@sp 002B                  ?_Lcd_Init 0070                  ?_Lcd_Port 0070  
                  ??_setup 0047                 __pbssBANK0 0047                 __pbssBANK1 00B6  
               __pmaintext 0032                    ?___lmul 0070         UART_write_string@i 0043  
               __pintentry 0004    __end_of_UART_write_char 0F12                    ?_mapear 002E  
                  _BAUDCTL 0187             ___lmul@product 0079     __end_of_Lcd_Set_Cursor 0F65  
     UART_write_string@txt 0044                 ??_Lcd_Init 0043                 ??_Lcd_Port 0040  
               __stringtab 0600                  ?_read_ADC 0070             _Lcd_Write_Char 0F12  
                  _Lcd_Cmd 0F2A                    ___aldiv 03D2                    ___lwdiv 055A  
                  ___lwmod 06EE                  _ANSELbits 0188            ?_Lcd_Set_Cursor 0043  
                  __ptext1 0136                    __ptext2 06EE                    __ptext3 055A  
                  __ptext4 05B9                    __ptext5 02FC                    __ptext6 0FC5  
                  __ptext7 0F65                    __ptext8 0F01                    __ptext9 04F4  
                  _dpowers 0610          i1___lwdiv@divisor 0070                    _esperar 0047  
        i1___lwdiv@counter 0077           ___aldiv@dividend 0024                    _sprintf 0136  
   __end_of_Lcd_Write_Char 0F2A       end_of_initialization 002E                 ??_read_ADC 0072  
        __end_of_setup_ADC 03D2           ___aldiv@quotient 002A                  Lcd_Port@a 0040  
         ?_UART_write_char 0070                  _PORTBbits 0006                  _PORTDbits 0008  
                _TRISAbits 0085                  _TRISBbits 0086                  _TRISEbits 0089  
                i1___lwdiv 077C                  i1___lwmod 0F8B            ?_Lcd_Write_Char 0070  
        Lcd_Write_String@a 0043          Lcd_Write_String@i 0045                  i1_sprintf 0222  
                _Lcd_Clear 0EF0             __end_of___lmul 077C           _Lcd_Write_String 04F4  
           __end_of_mapear 06EE          i1___lwmod@divisor 0078          i1___lwmod@counter 007D  
               mapear@nmax 0036                 mapear@nmin 0034        start_initialization 0015  
              __end_of_isr 04F4                 ?i1___lwdiv 0070                 ?i1___lwmod 0078  
      UART_config@baudrate 0040               i1sprintf@val 0029                 ?i1_sprintf 0020  
               ?_Lcd_Clear 0070                   ??___lmul 0078                __pdataBANK0 004F  
                 ??_mapear 007E            Lcd_Write_Char@a 0042                  ___latbits 0002  
            __pcstackBANK0 0020              __pcstackBANK1 00A0                   ?_Lcd_Cmd 0070  
              sprintf@flag 00AE                sprintf@prec 00AF           ___lwdiv@dividend 0042  
         setup_ADC@channel 0040           ??_Lcd_Set_Cursor 0044                   ?___aldiv 0020  
                 ?___lwdiv 0040                   ?___lwmod 00A3                  _condicion 0049  
                __pstrings 0600                  _indicador 004F           ___lwdiv@quotient 00A1  
              ??i1___lwdiv 0074                ??i1___lwmod 007C                   ?_sprintf 00A7  
          ___aldiv@divisor 0020          interrupt_function 0004            ___aldiv@counter 0028  
                 Lcd_Cmd@a 0042                   _PIR1bits 000C                ??i1_sprintf 0023  
              ??_Lcd_Clear 0043              ??_UART_config 00A0                  _setup_ADC 02FC  
               _ADCON0bits 001F                __stringbase 060F           ??_Lcd_Write_Char 0041  
                 _Lcd_Init 0653                   _Lcd_Port 07C0          ___lmul@multiplier 0070  
                mapear@max 0032                  mapear@min 0030   __end_of_Lcd_Write_String 055A  
               ?_setup_ADC 0040         __end_of__stringtab 0610        __end_of_UART_config 1000  
               _ANSELHbits 0189                 sprintf@val 00B0            ___lwdiv@divisor 0040  
          ___lwdiv@counter 00A0                   __ptext10 0F12                   __ptext11 0F43  
                 __ptext20 0EF7                   __ptext12 0653                   __ptext21 06A2  
                 __ptext13 0EF0                   __ptext22 0736                   __ptext14 0F2A  
                 __ptext23 03D2                   __ptext15 07C0                   __ptext16 046F  
                 __ptext17 0222                   __ptext18 0F8B                   __ptext19 077C  
                 _contador 00B6         i1___lwdiv@dividend 0072                   _read_ADC 0EF7  
       i1___lwdiv@quotient 0075                   intlevel1 0000                  sprintf@ap 00AD  
                sprintf@sp 00B2           ___lwmod@dividend 00A5          _UART_write_string 0F65  
                stringcode 060A         ?_UART_write_string 0070                ??_setup_ADC 0042  
              _UART_config 0FC5         Lcd_Set_Cursor@temp 0045        ??_UART_write_string 0042  
               _OPTION_REG 0081                   sprintf@c 00B3                   sprintf@f 00A7  
          ___lwmod@divisor 00A3            ___lwmod@counter 0046                   stringdir 060A  
                 stringtab 0600               ___aldiv@sign 0029  __end_of_UART_write_string 0F8B  
        ??_UART_write_char 0040  
